135
mothurLocation=/Users/sarahwestcott/Desktop/1.32.0/mothurGUI/mothur/mothur
mothurVersion=1.32.1
commandName=align.check
commandCategory=Sequence Processing
help=The align.check command reads a fasta file and map file as well as an optional name or count file.It outputs a file containing the secondary structure matches in the .align.check file.The align.check command parameters are fasta and map, both are required.The align.check command should be in the following format: align.check(fasta=yourFasta, map=yourMap).Example align.check(map=silva.ss.map, fasta=amazon.fasta).Note: No spaces between parameter labels (i.e. fasta), '=' and parameters (i.e.yourFasta).
citation=http://www.mothur.org/wiki/Align.check
description=calculate the number of potentially misaligned bases in a 16S rRNA gene sequence alignment
outputTypesNames=1
aligncheck=[filename],align.check
Boolean=0
Multiple=0
Numbers=0
String=0
inputGroupNames=1
namecount=count-name
inputTypes=count-fasta-map-name
count=F|F|namecount|none|none|none
fasta=T|T|none|none|none|aligncheck
map=T|T|none|none|none|none
name=F|F|namecount|none|none|none
commandName=align.seqs
commandCategory=Sequence Processing
help=The align.seqs command reads a file containing sequences and creates an alignment file and a report file.The align.seqs command parameters are reference, fasta, search, ksize, align, match, mismatch, gapopen, gapextend and processors.The reference and fasta parameters are required. You may leave fasta blank if you have a valid fasta file. You may enter multiple fasta files by separating their names with dashes. ie. fasta=abrecovery.fasta-amzon.fasta.The search parameter allows you to specify the method to find most similar template.  Your options are: suffix, kmer and blast. The default is kmer.The align parameter allows you to specify the alignment method to use.  Your options are: gotoh, needleman, blast and noalign. The default is needleman.The ksize parameter allows you to specify the kmer size for finding most similar template to candidate.  The default is 8.The match parameter allows you to specify the bonus for having the same base. The default is 1.0.The mistmatch parameter allows you to specify the penalty for having different bases.  The default is -1.0.The gapopen parameter allows you to specify the penalty for opening a gap in an alignment. The default is -5.0.The gapextend parameter allows you to specify the penalty for extending a gap in an alignment.  The default is -2.0.The flip parameter is used to specify whether or not you want mothur to try the reverse complement if a sequence falls below the threshold.  The default is false.The threshold is used to specify a cutoff at which an alignment is deemed 'bad' and the reverse complement may be tried. The default threshold is 0.50, meaning 50% of the bases are removed in the alignment.If the flip parameter is set to true the reverse complement of the sequence is aligned and the better alignment is reported.If the save parameter is set to true the reference sequences will be saved in memory, to clear them later you can use the clear.memory command. Default=f.The default for the threshold parameter is 0.50, meaning at least 50% of the bases must remain or the sequence is reported as potentially reversed.The align.seqs command should be in the following format:align.seqs(reference=yourTemplateFile, fasta=yourCandidateFile, align=yourAlignmentMethod, search=yourSearchmethod, ksize=yourKmerSize, match=yourMatchBonus, mismatch=yourMismatchpenalty, gapopen=yourGapopenPenalty, gapextend=yourGapExtendPenalty)Example align.seqs(candidate=candidate.fasta, template=core.filtered, align=kmer, search=gotoh, ksize=8, match=2.0, mismatch=3.0, gapopen=-2.0, gapextend=-1.0)Note: No spaces between parameter labels (i.e. candidate), '=' and parameters (i.e.yourFastaFile).
citation=DeSantis TZ, Jr., Hugenholtz P, Keller K, Brodie EL, Larsen N, Piceno YM, Phan R, Andersen GL (2006). NAST: a multiple sequence alignment server for comparative analysis of 16S rRNA genes. Nucleic Acids Res 34: W394-9.Schloss PD (2009). A high-throughput DNA sequence aligner for microbial ecology studies. PLoS ONE 4: e8230.Schloss PD (2010). The effects of alignment quality, distance calculation method, sequence filtering, and region on the analysis of 16S rRNA gene-based studies. PLoS Comput Biol 6: e1000844.http://www.mothur.org/wiki/Align.seqs http://www.mothur.org/wiki/Align.seqs
description=align sequences
outputTypesNames=3
accnos=[filename],flip.accnos
alignreport=[filename],align.report
fasta=[filename],align
Boolean=2
flip=F|F|none
save=F|F|none
Multiple=2
search=kmer-blast-suffix|kmer|F|T|none
align=needleman-gotoh-blast-noalign|needleman|F|T|none
Numbers=7
ksize=8|F|none
match=1.0|F|none
mismatch=-1.0|F|none
gapopen=-5.0|F|none
gapextend=-2.0|F|none
processors=1|T|none
threshold=0.50|F|none
String=0
inputGroupNames=0
inputTypes=fasta-reference
fasta=T|T|none|none|none|fasta-alignreport-accnos
reference=T|T|none|none|none|none
commandName=amova
commandCategory=Hypothesis Testing
help=Referenced: Anderson MJ (2001). A new method for non-parametric multivariate analysis of variance. Austral Ecol 26: 32-46.The amova command outputs a .amova file.The amova command parameters are phylip, iters, sets and alpha.  The phylip and design parameters are required, unless you have valid current files.The design parameter allows you to assign your samples to groups when you are running amova. It is required.The design file looks like the group file.  It is a 2 column tab delimited file, where the first column is the sample name and the second column is the group the sample belongs to.The sets parameter allows you to specify which of the sets in your designfile you would like to analyze. The set names are separated by dashes. THe default is all sets in the designfile.The iters parameter allows you to set number of randomization for the P value.  The default is 1000.The amova command should be in the following format: amova(phylip=file.dist, design=file.design).Note: No spaces between parameter labels (i.e. iters), '=' and parameters (i.e. 1000).
citation=Anderson MJ (2001). A new method for non-parametric multivariate analysis of variance. Austral Ecol 26: 32-46.http://www.mothur.org/wiki/Amova
description=analysis of molecular variance
outputTypesNames=1
amova=[filename],amova
Boolean=0
Multiple=0
Numbers=2
iters=1000|F|none
alpha=0.05|F|none
String=1
sets=|F|none
inputGroupNames=0
inputTypes=design-phylip
design=T|T|none|none|none|amova
phylip=T|T|none|none|none|amova
commandName=anosim
commandCategory=Hypothesis Testing
help=Referenced: Clarke, K. R. (1993). Non-parametric multivariate analysis of changes in community structure.   _Australian Journal of Ecology_ 18, 117-143.The anosim command outputs a .anosim file. The anosim command parameters are phylip, iters, and alpha.  The phylip and design parameters are required, unless you have valid current files.The design parameter allows you to assign your samples to groups when you are running anosim. It is required. The design file looks like the group file.  It is a 2 column tab delimited file, where the first column is the sample name and the second column is the group the sample belongs to.The iters parameter allows you to set number of randomization for the P value.  The default is 1000. The anosim command should be in the following format: anosim(phylip=file.dist, design=file.design).Note: No spaces between parameter labels (i.e. iters), '=' and parameters (i.e. 1000).
citation=Clarke, K. R. (1993). Non-parametric multivariate analysis of changes in community structure. _Australian Journal of Ecology_ 18, 117-143.http://www.mothur.org/wiki/Anosim
description=analysis of similarity
outputTypesNames=1
anosim=[filename],anosim
Boolean=0
Multiple=0
Numbers=2
iters=1000|F|none
alpha=0.05|F|none
String=0
inputGroupNames=0
inputTypes=design-phylip
design=T|T|none|none|none|anosim
phylip=T|T|none|none|none|anosim
commandName=bin.seqs
commandCategory=Sequence Processing
help=The bin.seqs command parameters are list, fasta, name, count, label and group.  The fasta and list are required, unless you have a valid current list and fasta file.The label parameter allows you to select what distance levels you would like a output files created for, and are separated by dashes.The bin.seqs command should be in the following format: bin.seqs(fasta=yourFastaFile, name=yourNamesFile, group=yourGroupFile, label=yourLabels).Example bin.seqs(fasta=amazon.fasta, group=amazon.groups, name=amazon.names).The default value for label is all lines in your inputfile.The bin.seqs command outputs a .fasta file for each distance you specify appending the OTU number to each name.If you provide a groupfile, then it also appends the sequences group to the name.Note: No spaces between parameter labels (i.e. fasta), '=' and parameters (i.e.yourFastaFile).
citation=http://www.mothur.org/wiki/Bin.seqs
description=maps sequences to otus
outputTypesNames=1
fasta=[filename],[distance],fasta
Boolean=0
Multiple=0
Numbers=0
String=1
label=|F|none
inputGroupNames=2
CountGroup=count-group
NameCount=count-name
inputTypes=count-fasta-group-list-name
count=F|T|NameCount-CountGroup|none|none|none
fasta=T|T|none|none|none|fasta
group=F|T|CountGroup|none|none|none
list=T|T|none|none|none|none
name=F|T|NameCount|none|none|none
commandName=catchall
commandCategory=OTU-Based Approaches
help=The catchall command interfaces mothur with the catchall program written by Linda Woodard, Sean Connolly and John Bunge.For more information about catchall refer to http://www.northeastern.edu/catchall/index.html The catchall executable must be in the same folder as your mothur executable. If you are a MAC or Linux user you must also have installed mono, a link to mono is on the webpage. The catchall command parameters are shared, sabund and label.  shared or sabund is required. The label parameter is used to analyze specific labels in your input.The catchall command should be in the following format: catchall(sabund=yourSabundFile) Example: catchall(sabund=abrecovery.fn.sabund) 
citation=Bunge J, Woodard L, Bohning D, Foster JA, Connolly S, Allen HK (2012). Estimating population diversity with CatchAll. Bioinformatics  28:1045.http://www.northeastern.edu/catchall/index.htmlhttp://www.mothur.org/wiki/Catchall
description=estimate number of species
outputTypesNames=6
analysis=[filename],_Analysis.csv
bestanalysis=[filename],_BestModelsAnalysis.csv
bubble=[filename],_BubblePlot.csv
models=[filename],_BestModelsAnalysis.csv
sabund=[filename],[distance],csv
summary=[filename],catchall.summary
Boolean=0
Multiple=0
Numbers=0
String=1
label=|F|none
inputGroupNames=1
catchallInputs=sabund-shared
inputTypes=sabund-shared
sabund=F|T|catchallInputs|catchallInputs|none|analysis-bestanalysis-models-bubble-summary
shared=F|T|catchallInputs|catchallInputs|none|analysis-bestanalysis-models-bubble-summary
commandName=chimera.bellerophon
commandCategory=Sequence Processing
help=The chimera.bellerophon command reads a fastafile and creates list of potentially chimeric sequences.The chimera.bellerophon command parameters are fasta, filter, correction, processors, window, increment. The fasta parameter is required, unless you have a valid current file.The fasta parameter is required.  You may enter multiple fasta files by separating their names with dashes. ie. fasta=abrecovery.fasta-amzon.fasta The filter parameter allows you to specify if you would like to apply a vertical and 50% soft filter, default=false. The correction parameter allows you to put more emphasis on the distance between highly similar sequences and less emphasis on the differences between remote homologs, default=true.The processors parameter allows you to specify how many processors you would like to use.  The default is 1. The window parameter allows you to specify the window size for searching for chimeras, default is 1/4 sequence length. The increment parameter allows you to specify how far you move each window while finding chimeric sequences, default is 25.chimera.bellerophon(fasta=yourFastaFile, filter=yourFilter, correction=yourCorrection, processors=yourProcessors) Example: chimera.bellerophon(fasta=AD.align, filter=True, correction=true, window=200) Note: No spaces between parameter labels (i.e. fasta), '=' and parameters (i.e.yourFastaFile).
citation=Huber T, Faulkner G, Hugenholtz P (2004). Bellerophon: a program to detect chimeric sequences in multiple sequence alignments. Bioinformatics 20: 2317-9. http://www.mothur.org/wiki/Chimera.bellerophon
description=detect chimeric sequences
outputTypesNames=2
accnos=[filename],bellerophon.accnos
chimera=[filename],bellerophon.chimeras
Boolean=2
filter=F|F|none
correction=T|F|none
Multiple=0
Numbers=3
window=0|F|none
increment=25|F|none
processors=1|T|none
String=0
inputGroupNames=0
inputTypes=fasta
fasta=T|T|none|none|none|chimera-accnos
commandName=chimera.ccode
commandCategory=Sequence Processing
help=The chimera.ccode command reads a fastafile and referencefile and outputs potentially chimeric sequences.This command was created using the algorithms described in the 'Evaluating putative chimeric sequences from PCR-amplified products' paper by Juan M. Gonzalez, Johannes Zimmerman and Cesareo Saiz-Jimenez.The chimera.ccode command parameters are fasta, reference, filter, mask, processors, window and numwanted.The fasta parameter allows you to enter the fasta file containing your potentially chimeric sequences, and is required unless you have a valid current fasta file. You may enter multiple fasta files by separating their names with dashes. ie. fasta=abrecovery.fasta-amzon.fasta The reference parameter allows you to enter a reference file containing known non-chimeric sequences, and is required. The filter parameter allows you to specify if you would like to apply a vertical and 50% soft filter. The processors parameter allows you to specify how many processors you would like to use.  The default is 1. The mask parameter allows you to specify a file containing one sequence you wish to use as a mask for the your sequences. The window parameter allows you to specify the window size for searching for chimeras. The numwanted parameter allows you to specify how many sequences you would each query sequence compared with.If the save parameter is set to true the reference sequences will be saved in memory, to clear them later you can use the clear.memory command. Default=f.The chimera.ccode command should be in the following format: chimera.ccode(fasta=yourFastaFile, reference=yourTemplate) Example: chimera.ccode(fasta=AD.align, reference=core_set_aligned.imputed.fasta) Note: No spaces between parameter labels (i.e. fasta), '=' and parameters (i.e.yourFastaFile).
citation=Gonzalez JM, Zimmermann J, Saiz-Jimenez C (2005). Evaluating putative chimeric sequences from PCR-amplified products. Bioinformatics 21: 333-7. http://www.mothur.org/wiki/Chimera.ccode
description=detect chimeric sequences
outputTypesNames=3
accnos=[filename],[tag],ccode.accnos-[filename],ccode.accnos
chimera=[filename],[tag],ccode.chimeras-[filename],ccode.chimeras
mapinfo=[filename],mapinfo
Boolean=2
filter=F|F|none
save=F|F|none
Multiple=0
Numbers=3
window=0|F|none
numwanted=20|F|none
processors=1|T|none
String=1
mask=|F|none
inputGroupNames=0
inputTypes=fasta-reference
fasta=T|T|none|none|none|chimera-mapinfo-accnos
reference=T|T|none|none|none|none
commandName=chimera.check
commandCategory=Sequence Processing
help=The chimera.check command reads a fastafile and referencefile and outputs potentially chimeric sequences.This command was created using the algorithms described in CHIMERA_CHECK version 2.7 written by Niels Larsen. The chimera.check command parameters are fasta, reference, processors, ksize, increment, svg and name.The fasta parameter allows you to enter the fasta file containing your potentially chimeric sequences, and is required unless you have a valid current fasta file. You may enter multiple fasta files by separating their names with dashes. ie. fasta=abrecovery.fasta-amzon.fasta The reference parameter allows you to enter a reference file containing known non-chimeric sequences, and is required. The processors parameter allows you to specify how many processors you would like to use.  The default is 1. The increment parameter allows you to specify how far you move each window while finding chimeric sequences, default is 10.The ksize parameter allows you to input kmersize, default is 7. The svg parameter allows you to specify whether or not you would like a svg file outputted for each query sequence, default is False.The name parameter allows you to enter a file containing names of sequences you would like .svg files for.You may enter multiple name files by separating their names with dashes. ie. fasta=abrecovery.svg.names-amzon.svg.names If the save parameter is set to true the reference sequences will be saved in memory, to clear them later you can use the clear.memory command. Default=f.The chimera.check command should be in the following format: chimera.check(fasta=yourFastaFile, reference=yourTemplateFile, processors=yourProcessors, ksize=yourKmerSize) Example: chimera.check(fasta=AD.fasta, reference=core_set_aligned,imputed.fasta, processors=4, ksize=8) Note: No spaces between parameter labels (i.e. fasta), '=' and parameters (i.e.yourFastaFile).
citation=CHIMERA_CHECK version 2.7 written by Niels Larsen (http://wdcm.nig.ac.jp/RDP/docs/chimera_doc.html) http://www.mothur.org/wiki/Chimera.check
description=detect chimeric sequences
outputTypesNames=1
chimera=[filename],chimeracheck.chimeras
Boolean=2
svg=F|F|none
save=F|F|none
Multiple=0
Numbers=3
increment=10|F|none
ksize=7|F|none
processors=1|T|none
String=0
inputGroupNames=0
inputTypes=fasta-name-reference
fasta=T|T|none|none|none|chimera
name=F|T|none|none|none|none
reference=T|T|none|none|none|none
commandName=chimera.perseus
commandCategory=Sequence Processing
help=The chimera.perseus command reads a fastafile and namefile or countfile and outputs potentially chimeric sequences.The chimera.perseus command parameters are fasta, name, group, cutoff, processors, dereplicate, alpha and beta.The fasta parameter allows you to enter the fasta file containing your potentially chimeric sequences, and is required, unless you have a valid current fasta file. The name parameter allows you to provide a name file associated with your fasta file.The count parameter allows you to provide a count file associated with your fasta file. A count or name file is required. When you use a count file with group info and dereplicate=T, mothur will create a *.pick.count_table file containing seqeunces after chimeras are removed.You may enter multiple fasta files by separating their names with dashes. ie. fasta=abrecovery.fasta-amazon.fasta The group parameter allows you to provide a group file.  When checking sequences, only sequences from the same group as the query sequence will be used as the reference. The processors parameter allows you to specify how many processors you would like to use.  The default is 1. If the dereplicate parameter is false, then if one group finds the seqeunce to be chimeric, then all groups find it to be chimeric, default=f.The alpha parameter ....  The default is -5.54. The beta parameter ....  The default is 0.33. The cutoff parameter ....  The default is 0.50. The chimera.perseus command should be in the following format: chimera.perseus(fasta=yourFastaFile, name=yourNameFile) Example: chimera.perseus(fasta=AD.align, name=AD.names) Note: No spaces between parameter labels (i.e. fasta), '=' and parameters (i.e.yourFastaFile).
citation=Quince C, Lanzen A, Davenport RJ, Turnbaugh PJ (2011).  Removing noise from pyrosequenced amplicons.  BMC Bioinformatics  12:38.Edgar,R.C., Haas,B.J., Clemente,J.C., Quince,C. and Knight,R. (2011), UCHIME improves sensitivity and speed of chimera detection.  Bioinformatics 27:2194.http://www.mothur.org/wiki/Chimera.perseus
description=detect chimeric sequences
outputTypesNames=3
accnos=[filename],perseus.accnos
chimera=[filename],perseus.chimeras
count=[filename],perseus.pick.count_table
Boolean=1
dereplicate=F|F|none
Multiple=0
Numbers=4
processors=1|T|none
cutoff=0.5|F|none
alpha=-5.54|F|none
beta=0.33|F|none
String=0
inputGroupNames=2
CountGroup=count-group
NameCount=count-name
inputTypes=count-fasta-group-name
count=F|T|NameCount-CountGroup|NameCount|none|none
fasta=T|T|none|none|none|chimera-accnos
group=F|T|CountGroup|none|none|none
name=F|T|NameCount|NameCount|none|none
commandName=chimera.pintail
commandCategory=Sequence Processing
help=The chimera.pintail command reads a fastafile and referencefile and outputs potentially chimeric sequences.This command was created using the algorithms described in the 'At Least 1 in 20 16S rRNA Sequence Records Currently Held in the Public Repositories is Estimated To Contain Substantial Anomalies' paper by Kevin E. Ashelford 1, Nadia A. Chuzhanova 3, John C. Fry 1, Antonia J. Jones 2 and Andrew J. Weightman 1.The chimera.pintail command parameters are fasta, reference, filter, mask, processors, window, increment, conservation and quantile.The fasta parameter allows you to enter the fasta file containing your potentially chimeric sequences, and is required unless you have a valid current fasta file. You may enter multiple fasta files by separating their names with dashes. ie. fasta=abrecovery.fasta-amzon.fasta The reference parameter allows you to enter a reference file containing known non-chimeric sequences, and is required. The filter parameter allows you to specify if you would like to apply a vertical and 50% soft filter. The mask parameter allows you to specify a file containing one sequence you wish to use as a mask for the your sequences, by default no mask is applied.  You can apply an ecoli mask by typing, mask=default. The processors parameter allows you to specify how many processors you would like to use.  The default is 1. If the save parameter is set to true the reference sequences will be saved in memory, to clear them later you can use the clear.memory command. Default=f.The window parameter allows you to specify the window size for searching for chimeras, default=300. The increment parameter allows you to specify how far you move each window while finding chimeric sequences, default=25.The conservation parameter allows you to enter a frequency file containing the highest bases frequency at each place in the alignment.The quantile parameter allows you to enter a file containing quantiles for a template files sequences, if you use the filter the quantile file generated becomes unique to the fasta file you used.The chimera.pintail command should be in the following format: chimera.pintail(fasta=yourFastaFile, reference=yourTemplate) Example: chimera.pintail(fasta=AD.align, reference=silva.bacteria.fasta) Note: No spaces between parameter labels (i.e. fasta), '=' and parameters (i.e.yourFastaFile).
citation=Ashelford KE, Chuzhanova NA, Fry JC, Jones AJ, Weightman AJ (2005). At least 1 in 20 16S rRNA sequence records currently held in public repositories is estimated to contain substantial anomalies. Appl Environ Microbiol 71: 7724-36. Ashelford KE, Chuzhanova NA, Fry JC, Jones AJ, Weightman AJ (2006). New screening software shows that most recent large 16S rRNA gene clone libraries contain chimeras. Appl Environ Microbiol 72: 5734-41. http://www.mothur.org/wiki/Chimera.pintail
description=detect chimeric sequences
outputTypesNames=2
accnos=[filename],[tag],pintail.accnos-[filename],pintail.accnos
chimera=[filename],[tag],pintail.chimeras-[filename],pintail.chimeras
Boolean=2
filter=F|F|none
save=F|F|none
Multiple=0
Numbers=3
window=0|F|none
increment=25|F|none
processors=1|T|none
String=1
mask=|F|none
inputGroupNames=0
inputTypes=conservation-fasta-quantile-reference
conservation=F|F|none|none|none|none
fasta=T|T|none|none|none|chimera-accnos
quantile=F|F|none|none|none|none
reference=T|T|none|none|none|none
commandName=chimera.slayer
commandCategory=Sequence Processing
help=The chimera.slayer command reads a fastafile and referencefile and outputs potentially chimeric sequences.This command was modeled after the chimeraSlayer written by the Broad Institute.The chimera.slayer command parameters are fasta, name, group, template, processors, dereplicate, trim, ksize, window, match, mismatch, divergence. minsim, mincov, minbs, minsnp, parents, search, iters, increment, numwanted, blastlocation and realign.The fasta parameter allows you to enter the fasta file containing your potentially chimeric sequences, and is required, unless you have a valid current fasta file. The name parameter allows you to provide a name file, if you are using reference=self. The group parameter allows you to provide a group file. The group file can be used with a namesfile and reference=self. When checking sequences, only sequences from the same group as the query sequence will be used as the reference. The count parameter allows you to provide a count file. The count file reference=self. If your count file contains group information, when checking sequences, only sequences from the same group as the query sequence will be used as the reference. When you use a count file with group info and dereplicate=T, mothur will create a *.pick.count_table file containing seqeunces after chimeras are removed. You may enter multiple fasta files by separating their names with dashes. ie. fasta=abrecovery.fasta-amazon.fasta The reference parameter allows you to enter a reference file containing known non-chimeric sequences, and is required. You may also set template=self, in this case the abundant sequences will be used as potential parents. The processors parameter allows you to specify how many processors you would like to use.  The default is 1. If the dereplicate parameter is false, then if one group finds the seqeunce to be chimeric, then all groups find it to be chimeric, default=f.The trim parameter allows you to output a new fasta file containing your sequences with the chimeric ones trimmed to include only their longest piece, default=F. The split parameter allows you to check both pieces of non-chimeric sequence for chimeras, thus looking for trimeras and quadmeras. default=F. The window parameter allows you to specify the window size for searching for chimeras, default=50. The increment parameter allows you to specify how far you move each window while finding chimeric sequences, default=5.The numwanted parameter allows you to specify how many sequences you would each query sequence compared with, default=15.The ksize parameter allows you to input kmersize, default is 7, used if search is kmer. The match parameter allows you to reward matched bases in blast search, default is 5. The parents parameter allows you to select the number of potential parents to investigate from the numwanted best matches after rating them, default is 3. The mismatch parameter allows you to penalize mismatched bases in blast search, default is -4. The divergence parameter allows you to set a cutoff for chimera determination, default is 1.007. The iters parameter allows you to specify the number of bootstrap iters to do with the chimeraslayer method, default=1000.The minsim parameter allows you to specify a minimum similarity with the parent fragments, default=90. The mincov parameter allows you to specify minimum coverage by closest matches found in template. Default is 70, meaning 70%. The minbs parameter allows you to specify minimum bootstrap support for calling a sequence chimeric. Default is 90, meaning 90%. The minsnp parameter allows you to specify percent of SNPs to sample on each side of breakpoint for computing bootstrap support (default: 10) The search parameter allows you to specify search method for finding the closest parent. Choices are blast, and kmer, default blast. The realign parameter allows you to realign the query to the potential parents. Choices are true or false, default true.  The blastlocation parameter allows you to specify the location of your blast executable. By default mothur will look in ./blast/bin relative to mothur's executable.  If the save parameter is set to true the reference sequences will be saved in memory, to clear them later you can use the clear.memory command. Default=f.The chimera.slayer command should be in the following format: chimera.slayer(fasta=yourFastaFile, reference=yourTemplate, search=yourSearch) Example: chimera.slayer(fasta=AD.align, reference=core_set_aligned.imputed.fasta, search=kmer) Note: No spaces between parameter labels (i.e. fasta), '=' and parameters (i.e.yourFastaFile).
citation=Haas BJ, Gevers D, Earl A, Feldgarden M, Ward DV, Giannokous G, Ciulla D, Tabbaa D, Highlander SK, Sodergren E, Methe B, Desantis TZ, Petrosino JF, Knight R, Birren BW (2011). Chimeric 16S rRNA sequence formation and detection in Sanger and 454-pyrosequenced PCR amplicons. Genome Res  21:494.http://www.mothur.org/wiki/Chimera.slayer
description=detect chimeric sequences
outputTypesNames=4
accnos=[filename],slayer.accnos
chimera=[filename],slayer.chimeras
count=[filename],slayer.pick.count_table
fasta=[filename],slayer.fasta
Boolean=5
realign=T|F|none
trim=F|F|fasta
split=F|F|none
dereplicate=F|F|none
save=F|F|none
Multiple=1
search=kmer-blast|blast|F|F|none
Numbers=14
window=50|F|none
ksize=7|F|none
match=5.0|F|none
mismatch=-4.0|F|none
minsim=90|F|none
mincov=70|F|none
minsnp=10|F|none
minbs=90|F|none
processors=1|T|none
numwanted=15|F|none
iters=1000|F|none
divergence=1.007|F|none
parents=3|F|none
increment=5|F|none
String=1
blastlocation=|F|none
inputGroupNames=2
CountGroup=count-group
NameCount=count-name
inputTypes=count-fasta-group-name-reference
count=F|T|NameCount-CountGroup|none|none|none
fasta=T|T|none|none|none|chimera-accnos
group=F|T|CountGroup|none|none|none
name=F|T|NameCount|none|none|none
reference=T|T|none|none|none|none
commandName=chimera.uchime
commandCategory=Sequence Processing
help=The chimera.uchime command reads a fastafile and referencefile and outputs potentially chimeric sequences.This command is a wrapper for uchime written by Robert C. Edgar.The chimera.uchime command parameters are fasta, name, count, reference, processors, dereplicate, abskew, chimealns, minh, mindiv, xn, dn, xa, chunks, minchunk, idsmoothwindow, minsmoothid, maxp, skipgaps, skipgaps2, minlen, maxlen, ucl, strand and queryfact.The fasta parameter allows you to enter the fasta file containing your potentially chimeric sequences, and is required, unless you have a valid current fasta file. The name parameter allows you to provide a name file, if you are using template=self. The count parameter allows you to provide a count file, if you are using template=self. When you use a count file with group info and dereplicate=T, mothur will create a *.pick.count_table file containing seqeunces after chimeras are removed. You may enter multiple fasta files by separating their names with dashes. ie. fasta=abrecovery.fasta-amazon.fasta The group parameter allows you to provide a group file. The group file can be used with a namesfile and reference=self. When checking sequences, only sequences from the same group as the query sequence will be used as the reference. If the dereplicate parameter is false, then if one group finds the seqeunce to be chimeric, then all groups find it to be chimeric, default=f.The reference parameter allows you to enter a reference file containing known non-chimeric sequences, and is required. You may also set template=self, in this case the abundant sequences will be used as potential parents. The processors parameter allows you to specify how many processors you would like to use.  The default is 1. The abskew parameter can only be used with template=self. Minimum abundance skew. Default 1.9. Abundance skew is: min [ abund(parent1), abund(parent2) ] / abund(query).The chimealns parameter allows you to indicate you would like a file containing multiple alignments of query sequences to parents in human readable format. Alignments show columns with differences that support or contradict a chimeric model.The minh parameter - mininum score to report chimera. Default 0.3. Values from 0.1 to 5 might be reasonable. Lower values increase sensitivity but may report more false positives. If you decrease xn you may need to increase minh, and vice versa.The mindiv parameter - minimum divergence ratio, default 0.5. Div ratio is 100%% - %%identity between query sequence and the closest candidate for being a parent. If you don't care about very close chimeras, then you could increase mindiv to, say, 1.0 or 2.0, and also decrease minh, say to 0.1, to increase sensitivity. How well this works will depend on your data. Best is to tune parameters on a good benchmark.The xn parameter - weight of a no vote. Default 8.0. Decreasing this weight to around 3 or 4 may give better performance on denoised data.The dn parameter - pseudo-count prior on number of no votes. Default 1.4. Probably no good reason to change this unless you can retune to a good benchmark for your data. Reasonable values are probably in the range from 0.2 to 2.The xa parameter - weight of an abstain vote. Default 1. So far, results do not seem to be very sensitive to this parameter, but if you have a good training set might be worth trying. Reasonable values might range from 0.1 to 2.The chunks parameter is the number of chunks to extract from the query sequence when searching for parents. Default 4.The minchunk parameter is the minimum length of a chunk. Default 64.The idsmoothwindow parameter is the length of id smoothing window. Default 32.The maxp parameter - maximum number of candidate parents to consider. Default 2. In tests so far, increasing maxp gives only a very small improvement in sensivity but tends to increase the error rate quite a bit.The skipgaps parameter controls how gapped columns affect counting of diffs. If skipgaps is set to T, columns containing gaps do not found as diffs. Default = T.The skipgaps2 parameter controls how gapped columns affect counting of diffs. If skipgaps2 is set to T, if column is immediately adjacent to a column containing a gap, it is not counted as a diff. Default = T.The minlen parameter is the minimum unaligned sequence length. Defaults 10. Applies to both query and reference sequences.The maxlen parameter is the maximum unaligned sequence length. Defaults 10000. Applies to both query and reference sequences.The ucl parameter - use local-X alignments. Default is global-X or false. On tests so far, global-X is always better; this option is retained because it just might work well on some future type of data.The queryfract parameter - minimum fraction of the query sequence that must be covered by a local-X alignment. Default 0.5. Applies only when ucl is true.The chimera.uchime command should be in the following format: chimera.uchime(fasta=yourFastaFile, reference=yourTemplate) Example: chimera.uchime(fasta=AD.align, reference=silva.gold.align) Note: No spaces between parameter labels (i.e. fasta), '=' and parameters (i.e.yourFastaFile).
citation=uchime by Robert C. Edgarhttp://drive5.com/uchimeThis code was donated to the public domain.Edgar,R.C., Haas,B.J., Clemente,J.C., Quince,C. and Knight,R. (2011), UCHIME improves sensitivity and speed of chimera detection.  Bioinformatics 27:2194.http://www.mothur.org/wiki/Chimera.uchime
description=detect chimeric sequences
outputTypesNames=4
accnos=[filename],uchime.accnos
alns=[filename],uchime.alns
chimera=[filename],uchime.chimeras
count=[filename],uchime.pick.count_table
Boolean=5
chimealns=F|F|alns
dereplicate=F|F|none
skipgaps=T|F|none
skipgaps2=T|F|none
ucl=F|F|none
Multiple=0
Numbers=14
processors=1|T|none
abskew=1.9|F|none
minh=0.3|F|none
mindiv=0.5|F|none
xn=8.0|F|none
dn=1.4|F|none
xa=1|F|none
chunks=4|F|none
minchunk=64|F|none
idsmoothwindow=32|F|none
maxp=2|F|none
minlen=10|F|none
maxlen=10000|F|none
queryfract=0.5|F|none
String=1
strand=|F|none
inputGroupNames=2
CountGroup=count-group
NameCount=count-name
inputTypes=count-fasta-group-name-reference
count=F|T|NameCount-CountGroup|none|none|none
fasta=T|T|none|none|none|chimera-accnos
group=F|T|CountGroup|none|none|none
name=F|T|NameCount|none|none|none
reference=T|T|none|none|none|none
commandName=chop.seqs
commandCategory=Sequence Processing
help=The chop.seqs command reads a fasta file and outputs a .chop.fasta containing the trimmed sequences. Note: If a sequence is completely 'chopped', an accnos file will be created with the names of the sequences removed. The chop.seqs command parameters are fasta, name, group, count, numbases, countgaps and keep. fasta is required unless you have a valid current fasta file. numbases is required.The chop.seqs command should be in the following format: chop.seqs(fasta=yourFasta, numbases=yourNum, keep=yourKeep).If you provide a name, group or count file any sequences removed from the fasta file will also be removed from those files.The numbases parameter allows you to specify the number of bases you want to keep.The keep parameter allows you to specify whether you want to keep the front or the back of your sequence, default=front.The countgaps parameter allows you to specify whether you want to count gaps as bases, default=false.The short parameter allows you to specify you want to keep sequences that are too short to chop, default=false.The processors parameter allows you to specify how many processors you would like to use.  The default is 1. For example, if you ran chop.seqs with numbases=200 and short=t, if a sequence had 100 bases mothur would keep the sequence rather than eliminate it.Example chop.seqs(fasta=amazon.fasta, numbases=200, keep=front).Note: No spaces between parameter labels (i.e. fasta), '=' and parameters (i.e.yourFasta).
citation=http://www.mothur.org/wiki/Chops.seqs
description=trim sequence length
outputTypesNames=5
accnos=[filename],chop.accnos
count=[filename],chop.count_table
fasta=[filename],chop.fasta
group=[filename],chop.groups
name=[filename],chop.names
Boolean=2
countgaps=F|F|none
short=F|F|none
Multiple=1
keep=front-back|front|F|F|none
Numbers=2
processors=1|T|none
numbases=0|T|none
String=0
inputGroupNames=2
CountGroup=count-group
NameCount=count-name
inputTypes=count-fasta-group-name
count=F|T|NameCount-CountGroup|none|none|count
fasta=T|T|none|none|none|fasta
group=F|T|CountGroup|none|none|group
name=F|T|NameCount|none|none|name
commandName=classify.otu
commandCategory=Phylotype Analysis
help=The classify.otu command parameters are list, taxonomy, reftaxonomy, name, group, count, persample, cutoff, label, basis and probs.  The taxonomy and list parameters are required unless you have a valid current file.The reftaxonomy parameter allows you give the name of the reference taxonomy file used when you classified your sequences. Providing it will keep the rankIDs in the summary file static.The name parameter allows you add a names file with your taxonomy file.The group parameter allows you provide a group file to use in creating the summary file breakdown.The count parameter allows you add a count file associated with your list file. When using the count parameter mothur assumes your list file contains only uniques.The basis parameter allows you indicate what you want the summary file to represent, options are otu and sequence. Default is otu.For example consider the following basis=sequence could give Clostridiales	3	105	16	43	46, where 105 is the total number of sequences whose otu classified to Clostridiales.16 is the number of sequences in the otus from groupA, 43 is the number of sequences in the otus from groupB, and 46 is the number of sequences in the otus from groupC.Now for basis=otu could give Clostridiales	3	7	6	1	2, where 7 is the number of otus that classified to Clostridiales.6 is the number of otus containing sequences from groupA, 1 is the number of otus containing sequences from groupB, and 2 is the number of otus containing sequences from groupC.The label parameter allows you to select what distance levels you would like a output files created for, and is separated by dashes.The persample parameter allows you to find a consensus taxonomy for each group. Default=fThe default value for label is all labels in your inputfile.The cutoff parameter allows you to specify a consensus confidence threshold for your taxonomy.  The default is 51, meaning 51%. Cutoff cannot be below 51.The probs parameter shuts off the outputting of the consensus confidence results. The default is true, meaning you want the confidence to be shown.The classify.otu command should be in the following format: classify.otu(taxonomy=yourTaxonomyFile, list=yourListFile, name=yourNamesFile, label=yourLabels).Example classify.otu(taxonomy=abrecovery.silva.full.taxonomy, list=abrecovery.fn.list, label=0.10).Note: No spaces between parameter labels (i.e. list), '=' and parameters (i.e.yourListFile).
citation=Schloss PD, Westcott SL (2011). Assessing and improving methods used in OTU-based approaches for 16S rRNA gene sequence analysis. Appl Environ Microbiol 77:3219.http://www.mothur.org/wiki/Classify.otu
description=find the concensus taxonomy for each OTU
outputTypesNames=2
constaxonomy=[filename],[distance],cons.taxonomy
taxsummary=[filename],[distance],cons.tax.summary
Boolean=2
persample=F|F|none
probs=T|F|none
Multiple=1
basis=otu-sequence|otu|F|F|none
Numbers=1
cutoff=51|T|none
String=1
label=|F|none
inputGroupNames=2
CountGroup=count-group
NameCount=count-name
inputTypes=count-group-list-name-reftaxonomy-taxonomy
count=F|T|NameCount-CountGroup|none|none|none
group=F|T|CountGroup|none|none|none
list=T|T|none|none|none|none
name=F|T|NameCount|none|none|none
reftaxonomy=F|F|none|none|none|none
taxonomy=T|T|none|none|none|constaxonomy
commandName=classify.rf
commandCategory=OTU-Based Approaches
help=The classify.rf command allows you to ....The classify.rf command parameters are: shared, design, label, groups, otupersplit.The label parameter is used to analyze specific labels in your input.The groups parameter allows you to specify which of the groups in your designfile you would like analyzed.The classify.rf should be in the following format: classify.rf(shared=yourSharedFile, design=yourDesignFile)
citation=http://www.mothur.org/wiki/Classify.rf
description=implements the random forest machine learning algorithm to identify OTUs that can be used to differentiate between various groups of samples
outputTypesNames=1
summary=[filename],[distance],summary
Boolean=2
prune=T|F|none
discarderrortrees=T|F|none
Multiple=2
otupersplit=log2-squareroot|log2|F|F|none
splitcriteria=gainratio-infogain|gainratio|F|F|none
Numbers=4
numtrees=100|F|none
pruneaggressiveness=0.9|F|none
errorthreshold=0.4|F|none
stdthreshold=0.0|F|none
String=2
groups=|F|none
label=|F|none
inputGroupNames=0
inputTypes=design-shared
design=T|T|none|none|none|none
shared=T|T|none|none|none|summary
commandName=classify.seqs
commandCategory=Phylotype Analysis
help=The classify.seqs command reads a fasta file containing sequences and creates a .taxonomy file and a .tax.summary file.The classify.seqs command parameters are reference, fasta, name, group, count, search, ksize, method, taxonomy, processors, match, mismatch, gapopen, gapextend, numwanted and probs.The reference, fasta and taxonomy parameters are required. You may enter multiple fasta files by separating their names with dashes. ie. fasta=abrecovery.fasta-amzon.fasta The search parameter allows you to specify the method to find most similar template.  Your options are: suffix, kmer, blast, align and distance. The default is kmer.The name parameter allows you add a names file with your fasta file, if you enter multiple fasta files, you must enter matching names files for them.The group parameter allows you add a group file so you can have the summary totals broken up by group.The count parameter allows you add a count file so you can have the summary totals broken up by group.The method parameter allows you to specify classification method to use.  Your options are: wang, knn and zap. The default is wang.The ksize parameter allows you to specify the kmer size for finding most similar template to candidate.  The default is 8.The processors parameter allows you to specify the number of processors to use. The default is 1.If the save parameter is set to true the reference sequences will be saved in memory, to clear them later you can use the clear.memory command. Default=f.The match parameter allows you to specify the bonus for having the same base. The default is 1.0.The mistmatch parameter allows you to specify the penalty for having different bases.  The default is -1.0.The gapopen parameter allows you to specify the penalty for opening a gap in an alignment. The default is -2.0.The gapextend parameter allows you to specify the penalty for extending a gap in an alignment.  The default is -1.0.The numwanted parameter allows you to specify the number of sequence matches you want with the knn method.  The default is 10.The cutoff parameter allows you to specify a bootstrap confidence threshold for your taxonomy.  The default is 0.The probs parameter shuts off the bootstrapping results for the wang and zap method. The default is true, meaning you want the bootstrapping to be shown.The iters parameter allows you to specify how many iterations to do when calculating the bootstrap confidence score for your taxonomy with the wang method.  The default is 100.The classify.seqs command should be in the following format: classify.seqs(reference=yourTemplateFile, fasta=yourFastaFile, method=yourClassificationMethod, search=yourSearchmethod, ksize=yourKmerSize, taxonomy=yourTaxonomyFile, processors=yourProcessors) Example classify.seqs(fasta=amazon.fasta, reference=core.filtered, method=knn, search=gotoh, ksize=8, processors=2)The .taxonomy file consists of 2 columns: 1 = your sequence name, 2 = the taxonomy for your sequence. The .tax.summary is a summary of the different taxonomies represented in your fasta file. Note: No spaces between parameter labels (i.e. fasta), '=' and parameters (i.e.yourFastaFile).
citation=Wang Q, Garrity GM, Tiedje JM, Cole JR (2007). Naive Bayesian classifier for rapid assignment of rRNA sequences into the new bacterial taxonomy. Appl Environ Microbiol 73: 5261-7. [ for Bayesian classifier ] Altschul SF, Madden TL, Schaffer AA, Zhang J, Zhang Z, Miller W, Lipman DJ (1997). Gapped BLAST and PSI-BLAST: a new generation of protein database search programs. Nucleic Acids Res 25: 3389-402. [ for BLAST ] DeSantis TZ, Hugenholtz P, Larsen N, Rojas M, Brodie EL, Keller K, Huber T, Dalevi D, Hu P, Andersen GL (2006). Greengenes, a chimera-checked 16S rRNA gene database and workbench compatible with ARB. Appl Environ Microbiol 72: 5069-72. [ for kmer ] http://www.mothur.org/wiki/Classify.seqs
description=classify sequences
outputTypesNames=4
accnos=[filename],[tag],[tag2],flip.accnos
matchdist=[filename],[tag],[tag2],match.dist
taxonomy=[filename],[tag],[tag2],taxonomy
taxsummary=[filename],[tag],[tag2],tax.summary
Boolean=3
probs=T|F|none
save=F|F|none
shortcuts=T|F|none
Multiple=2
search=kmer-blast-suffix-distance-align|kmer|F|F|none
method=wang-knn-zap|wang|F|F|none
Numbers=9
ksize=8|F|none
processors=1|T|none
match=1.0|F|none
mismatch=-1.0|F|none
gapopen=-2.0|F|none
gapextend=-1.0|F|none
cutoff=0|T|none
iters=100|T|none
numwanted=10|T|none
String=0
inputGroupNames=2
CountGroup=count-group
NameCount=count-name
inputTypes=count-fasta-group-name-reference-taxonomy
count=F|T|NameCount-CountGroup|none|none|none
fasta=T|T|none|none|none|taxonomy
group=F|T|CountGroup|none|none|none
name=F|T|NameCount|none|none|none
reference=T|T|none|none|none|none
taxonomy=T|T|none|none|none|none
commandName=classify.tree
commandCategory=Phylotype Analysis
help=The classify.tree command reads a tree and taxonomy file and output the consensus taxonomy for each node on the tree. If you provide a group file, the concensus for each group will also be provided. The new tree contains labels at each internal node.  The label is the node number so you can relate the tree to the summary file.The count parameter allows you add a count file so you can have the summary totals broken up by group.The summary file lists the concensus taxonomy for the descendants of each node.The classify.tree command parameters are tree, group, name, count and taxonomy. The tree and taxonomy files are required.The cutoff parameter allows you to specify a consensus confidence threshold for your taxonomy.  The default is 51, meaning 51%. Cutoff cannot be below 51.The classify.tree command should be used in the following format: classify.tree(tree=test.tre, group=test.group, taxonomy=test.taxonomy)Note: No spaces between parameter labels (i.e. tree), '=' and parameters (i.e.yourTreefile).
citation=http://www.mothur.org/wiki/Classify.tree
description=Find the consensus taxonomy for the descendant of each tree node
outputTypesNames=2
summary=[filename],taxonomy.summary
tree=[filename],taxonomy.tre
Boolean=0
Multiple=0
Numbers=1
cutoff=51|T|none
String=0
inputGroupNames=3
=taxonomy-tree
CountGroup=count-group
NameCount=count-name
inputTypes=count-group-name-taxonomy-tree
count=F|T|NameCount-CountGroup|none|none|none
group=F|T|CountGroup|none|none|none
name=F|T|NameCount|none|none|none
taxonomy=T|T|||none|none
tree=T|T|||none|tree-summary
commandName=clear.memory
commandCategory=General
help=The clear.memory command removes saved reference data from memory.The clear.memory command should be in the following format: clear.memory().
citation=http://www.mothur.org/wiki/Clear.memory
description=remove saved references from memory
outputTypesNames=0
Boolean=0
Multiple=0
Numbers=0
String=0
inputGroupNames=0
inputTypes=
commandName=clearcut
commandCategory=Hypothesis Testing
help=The clearcut command interfaces mothur with the clearcut program written by Initiative for Bioinformatics and Evolutionary Studies (IBEST) at the University of Idaho.For more information about clearcut refer to http://bioinformatics.hungry.com/clearcut/ The clearcut command parameters are phylip, fasta, version, verbose, quiet, seed, norandom, shuffle, neighbor, expblen, expdist, ntrees, matrixout, stdout, kimura, jukes, protein, DNA. The phylip parameter allows you to enter your phylip formatted distance matrix. The fasta parameter allows you to enter your aligned fasta file, if you enter a fastafile you specify if the sequences are DNA or protein using the DNA or protein parameters. The version parameter prints out the version of clearcut you are using, default=F. The verbose parameter prints out more output from clearcut, default=F. The quiet parameter turns on silent operation mode, default=F. The seed parameter allows you to explicitly set the PRNG seed to a specific value. The norandom parameter allows you to attempt joins deterministically, default=F. The shuffle parameter allows you to randomly shuffle the distance matrix, default=F. The neighbor parameter allows you to use traditional Neighbor-Joining algorithm, default=T. The DNA parameter allows you to indicate your fasta file contains DNA sequences, default=F. The protein parameter allows you to indicate your fasta file contains protein sequences, default=F. The stdout parameter outputs your tree to STDOUT, default=F. The matrixout parameter allows you to specify a filename to output a distance matrix to. The ntrees parameter allows you to specify the number of output trees, default=1. The expblen parameter allows you to use exponential notation for branch lengths, default=F. The expdist parameter allows you to use exponential notation for distance outputs, default=F. The clearcut command should be in the following format: clearcut(phylip=yourDistanceFile) Example: clearcut(phylip=abrecovery.phylip.dist) 
citation=Sheneman L, Evans J, Foster JA (2006). Clearcut: a fast implementation of relaxed neighbor joining. Bioinformatics 22: 2823-4. http://www.mothur.org/wiki/Clearcut
description=create a tree from a fasta or phylip file
outputTypesNames=2
matrixout=[filename],
tree=[filename],tre
Boolean=13
verbose=F|F|none
quiet=F|F|none
version=F|F|none
norandom=F|F|none
shuffle=F|F|none
neighbor=T|F|none
expblen=F|F|none
expdist=F|F|none
DNA=F|F|none
protein=F|F|none
jukes=F|F|none
kimura=F|F|none
stdout=F|F|none
Multiple=0
Numbers=1
ntrees=1|F|none
String=2
seed=|F|none
matrixout=|F|none
inputGroupNames=1
FastaPhylip=fasta-phylip
inputTypes=fasta-phylip
fasta=F|T|FastaPhylip|FastaPhylip|none|tree
phylip=F|T|FastaPhylip|FastaPhylip|none|tree
commandName=cluster
commandCategory=Clustering
help=The cluster command parameter options are phylip, column, name, count, method, cuttoff, hard, precision, sim, showabund and timing. Phylip or column and name are required, unless you have a valid current file.The cluster command should be in the following format: cluster(method=yourMethod, cutoff=yourCutoff, precision=yourPrecision) The acceptable cluster methods are furthest, nearest, average and weighted.  If no method is provided then average is assumed.
citation=Schloss PD, Westcott SL (2011). Assessing and improving methods used in OTU-based approaches for 16S rRNA gene sequence analysis. Appl Environ Microbiol 77:3219.Schloss PD, Handelsman J (2005). Introducing DOTUR, a computer program for defining operational taxonomic units and estimating species richness. Appl Environ Microbiol 71: 1501-6.http://www.mothur.org/wiki/Cluster
description=cluster your sequences into OTUs using a distance matrix
outputTypesNames=3
list=[filename],[clustertag],list-[filename],[clustertag],[tag2],list
rabund=[filename],[clustertag],rabund
sabund=[filename],[clustertag],sabund
Boolean=4
showabund=T|F|none
timing=F|F|none
sim=F|F|none
hard=T|F|none
Multiple=1
method=furthest-nearest-average-weighted|average|F|T|none
Numbers=2
cutoff=10|T|none
precision=100|F|none
String=0
inputGroupNames=3
ColumnName=column-name
NameCount=count-name
PhylipColumn=column-phylip
inputTypes=column-count-name-phylip
column=F|T|PhylipColumn|PhylipColumn|ColumnName|list
count=F|T|NameCount|none|none|none
name=F|T|NameCount|none|ColumnName|rabund-sabund
phylip=F|T|PhylipColumn|PhylipColumn|none|list
commandName=cluster.classic
commandCategory=Clustering
help=The cluster.classic command clusters using the algorithm from dotur. The cluster.classic command parameter options are phylip, name, count, method, cuttoff, hard, sim, precision. Phylip is required, unless you have a valid current file.The cluster.classic command should be in the following format: cluster.classic(phylip=yourDistanceMatrix, method=yourMethod, cutoff=yourCutoff, precision=yourPrecision) The acceptable cluster methods are furthest, nearest, weighted and average.  If no method is provided then average is assumed.
citation=Schloss PD, Westcott SL (2011). Assessing and improving methods used in OTU-based approaches for 16S rRNA gene sequence analysis. Appl Environ Microbiol 77:3219.Schloss PD, Handelsman J (2005). Introducing DOTUR, a computer program for defining operational taxonomic units and estimating species richness. Appl Environ Microbiol 71: 1501-6.http://www.mothur.org/wiki/Cluster.classic
description=cluster your sequences into OTUs using DOTUR’s method
outputTypesNames=3
list=[filename],[clustertag],list-[filename],[clustertag],[tag2],list
rabund=[filename],[clustertag],rabund
sabund=[filename],[clustertag],sabund
Boolean=2
hard=T|F|none
sim=F|F|none
Multiple=1
method=furthest-nearest-average-weighted|average|F|F|none
Numbers=2
cutoff=10|T|none
precision=100|F|none
String=0
inputGroupNames=1
namecount=count-name
inputTypes=count-name-phylip
count=F|T|namecount|none|none|none
name=F|T|namecount|none|none|rabund-sabund
phylip=T|T|none|none|none|list
commandName=cluster.fragments
commandCategory=Sequence Processing
help=The cluster.fragments command groups sequences that are part of a larger sequence.The cluster.fragments command outputs a new fasta and name or count file.The cluster.fragments command parameters are fasta, name, count, diffs and percent. The fasta parameter is required, unless you have a valid current file. The names parameter allows you to give a list of seqs that are identical. This file is 2 columns, first column is name or representative sequence, second column is a list of its identical sequences separated by commas.The diffs parameter allows you to set the number of differences allowed, default=0. The percent parameter allows you to set percentage of differences allowed, default=0. percent=2 means if the number of difference is less than or equal to two percent of the length of the fragment, then cluster.You may use diffs and percent at the same time to say something like: If the number or differences is greater than 1 or more than 2% of the fragment length, don't merge. The cluster.fragments command should be in the following format: cluster.fragments(fasta=yourFastaFile, names=yourNamesFile) Example cluster.fragments(fasta=amazon.fasta).Note: No spaces between parameter labels (i.e. fasta), '=' and parameters (i.e.yourFasta).
citation=http://www.mothur.org/wiki/Cluster.fragments
description=creates a namesfile with sequences that are a fragment of a larger sequence
outputTypesNames=3
count=[filename],fragclust.count_table
fasta=[filename],fragclust.fasta
name=[filename],fragclust.names
Boolean=0
Multiple=0
Numbers=2
diffs=0|F|none
percent=0|F|none
String=0
inputGroupNames=1
namecount=count-name
inputTypes=count-fasta-name
count=F|T|namecount|none|none|count
fasta=T|T|none|none|none|fasta-name
name=F|T|namecount|none|none|name
commandName=cluster.split
commandCategory=Clustering
help=The cluster.split command parameter options are fasta, phylip, column, name, count, cutoff, precision, method, splitmethod, taxonomy, taxlevel, showabund, timing, hard, large, cluster, processors. Fasta or Phylip or column and name are required.The cluster.split command can split your files in 3 ways. Splitting by distance file, by classification, or by classification also using a fasta file. For the distance file method, you need only provide your distance file and mothur will split the file into distinct groups. For the classification method, you need to provide your distance file and taxonomy file, and set the splitmethod to classify.  You will also need to set the taxlevel you want to split by. mothur will split the sequences into distinct taxonomy groups, and split the distance file based on those groups. For the classification method using a fasta file, you need to provide your fasta file, names file and taxonomy file.  You will also need to set the taxlevel you want to split by. mothur will split the sequence into distinct taxonomy groups, and create distance files for each grouping. The phylip and column parameter allow you to enter your distance file. The fasta parameter allows you to enter your aligned fasta file. The name parameter allows you to enter your name file. The count parameter allows you to enter your count file.  A count or name file is required if your distance file is in column formatThe cluster parameter allows you to indicate whether you want to run the clustering or just split the distance matrix, default=tThe cutoff parameter allow you to set the distance you want to cluster to, default is 0.25. The precision parameter allows you specify the precision of the precision of the distances outputted, default=100, meaning 2 decimal places. The method allows you to specify what clustering algorithm you want to use, default=average, option furthest, nearest, or average. The splitmethod parameter allows you to specify how you want to split your distance file before you cluster, default=distance, options distance, classify or fasta. The taxonomy parameter allows you to enter the taxonomy file for your sequences, this is only valid if you are using splitmethod=classify. Be sure your taxonomy file does not include the probability scores. The taxlevel parameter allows you to specify the taxonomy level you want to use to split the distance file, default=3, meaning use the first taxon in each list. The large parameter allows you to indicate that your distance matrix is too large to fit in RAM.  The default value is false.The classic parameter allows you to indicate that you want to run your files with cluster.classic.  It is only valid with splitmethod=fasta. Default=f.The cluster.split command should be in the following format: cluster.split(column=youDistanceFile, name=yourNameFile, method=yourMethod, cutoff=yourCutoff, precision=yourPrecision, splitmethod=yourSplitmethod, taxonomy=yourTaxonomyfile, taxlevel=yourtaxlevel) Example: cluster.split(column=abrecovery.dist, name=abrecovery.names, method=furthest, cutoff=0.10, precision=1000, splitmethod=classify, taxonomy=abrecovery.silva.slv.taxonomy, taxlevel=5) 
citation=Schloss PD, Westcott SL (2011). Assessing and improving methods used in OTU-based approaches for 16S rRNA gene sequence analysis. Appl Environ Microbiol 77:3219. http://www.mothur.org/wiki/Cluster.split
description=splits your sequences by distance or taxonomy then clusters into OTUs
outputTypesNames=4
column=[filename],dist
list=[filename],[clustertag],list-[filename],[clustertag],[tag2],list
rabund=[filename],[clustertag],rabund
sabund=[filename],[clustertag],sabund
Boolean=6
large=F|F|none
showabund=T|F|none
cluster=T|F|none
timing=F|F|none
hard=T|F|none
classic=F|F|none
Multiple=2
splitmethod=classify-fasta-distance|distance|F|T|none
method=furthest-nearest-average-weighted|average|F|F|none
Numbers=4
taxlevel=3|T|none
processors=1|T|none
cutoff=0.25|T|none
precision=100|F|none
String=0
inputGroupNames=5
=count
ColumnName=column-name
FastaTaxName=fasta-name-taxonomy
NameCount=count-name
PhylipColumnFasta=column-fasta-phylip
inputTypes=column-count-fasta-name-phylip-taxonomy
column=F|T|PhylipColumnFasta|PhylipColumnFasta|ColumnName|list
count=F|T|NameCount|none||none
fasta=F|T|PhylipColumnFasta|PhylipColumnFasta|FastaTaxName|list
name=F|T|NameCount|none|ColumnName-FastaTaxName|rabund-sabund
phylip=F|T|PhylipColumnFasta|PhylipColumnFasta|none|list
taxonomy=F|T|none|none|FastaTaxName|none
commandName=collect.shared
commandCategory=OTU-Based Approaches
help=The collect.shared command parameters are shared, label, freq, calc and groups.  shared is required if there is no current sharedfile. The collect.shared command should be in the following format: collect.shared(label=yourLabel, freq=yourFreq, calc=yourEstimators, groups=yourGroups).Example collect.shared(label=unique-.01-.03, freq=10, groups=B-C, calc=sharedchao-sharedace-jabund-sorensonabund-jclass-sorclass-jest-sorest-thetayc-thetan).The default values for freq is 100 and calc are sharedsobs-sharedchao-sharedace-jabund-sorensonabund-jclass-sorclass-jest-sorest-thetayc-thetan.The default value for groups is all the groups in your groupfile.The freq parameter is used indicate when to output your data, by default it is set to 100. But you can set it to a percentage of the number of sequence. For example freq=0.10, means 10%. The available estimators for calc are anderberg, braycurtis, canberra, default, gower, hamming, hellinger, jabund, jclass, jest, kstest, kulczynski, kulczynskicody, lennon, manhattan, memchi2, memchord, memeuclidean, mempearson, morisitahorn, ochiai, odum, sharedace, sharedchao, sharednseqs, sharedsobs, soergel, sorabund, sorclass, sorest, spearman, speciesprofile, structchi2, structchord, structeuclidean, structkulczynski, structpearson, thetan, thetayc, whittaker,The label parameter is used to analyze specific labels in your input.The all parameter is used to specify if you want the estimate of all your groups together.  This estimate can only be made for sharedsobs and sharedchao calculators. The default is false.If you use sharedchao and run into memory issues, set all to false. The groups parameter allows you to specify which of the groups in your groupfile you would like analyzed.  You must enter at least 2 valid groups.Note: No spaces between parameter labels (i.e. list), '=' and parameters (i.e.yourListfile).
citation=Schloss PD, Handelsman J (2006). Introducing SONS, A tool that compares the membership of microbial communities. Appl Environ Microbiol 72: 6773-9. http://www.mothur.org/wiki/Collect.shared
description=generates collector's curves for calculators, which describe the similarity between communities or their shared richness
outputTypesNames=39
anderberg=[filename],anderberg
braycurtis=[filename],braycurtis
canberra=[filename],canberra
gower=[filename],gower
hamming=[filename],hamming
hellinger=[filename],hellinger
jabund=[filename],jabund
jclass=[filename],jclass
jest=[filename],jest
kstest=[filename],kstest
kulczynski=[filename],kulczynski
kulczynskicody=[filename],kulczynskicody
lennon=[filename],lennon
manhattan=[filename],manhattan
memchi2=[filename],memchi2
memchord=[filename],memchord
memeuclidean=[filename],memeuclidean
mempearson=[filename],mempearson
morisitahorn=[filename],morisitahorn
ochiai=[filename],ochiai
odum=[filename],odum
sharedace=[filename],shared.ace
sharedchao=[filename],shared.chao
sharednseqs=[filename],shared.nseqs
sharedsobs=[filename],shared.sobs
soergel=[filename],soergel
sorabund=[filename],sorabund
sorclass=[filename],sorclass
sorest=[filename],sorest
spearman=[filename],spearman
speciesprofile=[filename],speciesprofile
structchi2=[filename],structchi2
structchord=[filename],structchord
structeuclidean=[filename],structeuclidean
structkulczynski=[filename],structkulczynski
structpearson=[filename],structpearson
thetan=[filename],thetan
thetayc=[filename],thetayc
whittaker=[filename],whittaker
Boolean=1
all=F|F|none
Multiple=1
calc=sharedchao-sharedsobs-sharedace-jabund-sorabund-jclass-sorclass-jest-sorest-thetayc-thetan-kstest-whittaker-sharednseqs-ochiai-anderberg-kulczynski-kulczynskicody-lennon-morisitahorn-braycurtis-odum-canberra-structeuclidean-structchord-hellinger-manhattan-structpearson-soergel-spearman-structkulczynski-speciesprofile-structchi2-hamming-gower-memchi2-memchord-memeuclidean-mempearson|sharedsobs-sharedchao-sharedace-jabund-sorabund-jclass-sorclass-jest-sorest-thetayc-thetan|T|T|none
Numbers=1
freq=100|F|none
String=2
label=|F|none
groups=|F|none
inputGroupNames=0
inputTypes=shared
shared=T|T|none|none|none|none
commandName=collect.single
commandCategory=OTU-Based Approaches
help=The collect.single command parameters are list, sabund, rabund, shared, label, freq, calc and abund.  list, sabund, rabund or shared is required unless you have a valid current file. The collect.single command should be in the following format: The freq parameter is used indicate when to output your data, by default it is set to 100. But you can set it to a percentage of the number of sequence. For example freq=0.10, means 10%. collect.single(label=yourLabel, freq=yourFreq, calc=yourEstimators).Example collect(label=unique-.01-.03, freq=10, calc=sobs-chao-ace-jack).The default values for freq is 100, and calc are sobs-chao-ace-jack-shannon-npshannon-simpson.The available estimators for calc are ace, bergerparker, boneh, bootstrap, bstick, chao, coverage, default, efron, geometric, goodscoverage, heip, invsimpson, jack, logseries, npshannon, nseqs, qstat, shannon, shannoneven, shen, simpson, simpsoneven, smithwilson, sobs, solow,The label parameter is used to analyze specific labels in your input.Note: No spaces between parameter labels (i.e. freq), '=' and parameters (i.e.yourFreq).
citation=Schloss PD, Handelsman J (2006). Introducing SONS, A tool that compares the membership of microbial communities. Appl Environ Microbiol 72: 6773-9. http://www.mothur.org/wiki/Collect.single
description=generates collector's curves using calculators, that describe the richness, diversity, and other features of individual samples
outputTypesNames=25
ace=[filename],ace
bergerparker=[filename],bergerparker
boneh=[filename],boneh
bootstrap=[filename],bootstrap
bstick=[filename],bstick
chao=[filename],chao
coverage=[filename],coverage
efron=[filename],efron
geometric=[filename],geometric
goodscoverage=[filename],goodscoverage
heip=[filename],heip
invsimpson=[filename],invsimpson
jack=[filename],jack
logseries=[filename],logseries
npshannon=[filename],npshannon
nseqs=[filename],nseqs
qstat=[filename],qstat
shannon=[filename],shannon
shannoneven=[filename],shannoneven
shen=[filename],shen
simpson=[filename],simpson
simpsoneven=[filename],simpsoneven
smithwilson=[filename],smithwilson
sobs=[filename],sobs
solow=[filename],solow
Boolean=0
Multiple=1
calc=sobs-chao-nseqs-coverage-ace-jack-shannon-shannoneven-npshannon-heip-smithwilson-simpson-simpsoneven-invsimpson-bootstrap-geometric-qstat-logseries-bergerparker-bstick-goodscoverage-efron-boneh-solow-shen|sobs-chao-ace-jack-shannon-npshannon-simpson|T|T|none
Numbers=3
freq=100|F|none
abund=10|F|none
size=0|F|none
String=1
label=|F|none
inputGroupNames=1
LRSS=list-rabund-sabund-shared
inputTypes=list-rabund-sabund-shared
list=F|T|LRSS|LRSS|none|none
rabund=F|T|LRSS|LRSS|none|none
sabund=F|T|LRSS|LRSS|none|none
shared=F|T|LRSS|LRSS|none|none
commandName=consensus.seqs
commandCategory=Sequence Processing
help=The consensus.seqs command can be used in 2 ways: create a consensus sequence from a fastafile, or with a listfile create a consensus sequence for each otu. Sequences must be aligned.The consensus.seqs command parameters are fasta, list, name, count, cutoff and label.The fasta parameter allows you to enter the fasta file containing your sequences, and is required, unless you have a valid current fasta file. The list parameter allows you to enter a your list file. The name parameter allows you to enter a names file associated with the fasta file. The label parameter allows you to select what distance levels you would like output files for, and are separated by dashes.The cutoff parameter allows you set a percentage of sequences that support the base. For example: cutoff=97 would only return a sequence that only showed ambiguities for bases that were not supported by at least 97% of sequences.The consensus.seqs command should be in the following format: consensus.seqs(fasta=yourFastaFile, list=yourListFile) Example: consensus.seqs(fasta=abrecovery.align, list=abrecovery.fn.list) Note: No spaces between parameter labels (i.e. fasta), '=' and parameters (i.e.yourFastaFile).
citation=http://www.mothur.org/wiki/Consensus.seqs
description=create a consensus sequence for each OTU or for a fasta file
outputTypesNames=4
count=[filename],cons.count_table-[filename],[tag],cons.count_table
fasta=[filename],cons.fasta-[filename],[tag],cons.fasta
name=[filename],cons.names-[filename],[tag],cons.names
summary=[filename],cons.summary-[filename],[tag],cons.summary
Boolean=0
Multiple=0
Numbers=1
cutoff=100|F|none
String=1
label=|F|none
inputGroupNames=1
namecount=count-name
inputTypes=count-fasta-list-name
count=F|T|namecount|none|none|count
fasta=T|T|none|none|none|fasta-name
list=F|T|none|none|none|fasta-name
name=F|T|namecount|none|none|name
commandName=Cooccurrence
commandCategory=Hypothesis Testing
help=The cooccurrence command calculates four metrics and tests their significance to assess whether presence-absence patterns are different than what one would expect by chance.The cooccurrence command parameters are shared, metric, matrixmodel, iters, label and groups.The matrixmodel parameter options are sim1, sim2, sim3, sim4, sim5, sim6, sim7, sim8 and sim9. Default=sim2The metric parameter options are cscore, checker, combo and vratio. Default=cscoreThe label parameter is used to analyze specific labels in your input.The groups parameter allows you to specify which of the groups you would like analyzed.The cooccurrence command should be in the following format: cooccurrence(shared=yourSharedFile) Example cooccurrence(shared=final.an.shared).Note: No spaces between parameter labels (i.e. shared), '=' and parameters (i.e.yourShared).
citation=Ulrich W & Gotelli NJ (2010).  Null model analysis of species associations using abundance data.  Ecology  91:3384.http://www.mothur.org/wiki/Cooccurrence
description=calculates four metrics and tests their significance to assess whether presence-absence patterns are different than what one would expect by chance.
outputTypesNames=1
summary=[filename],cooccurence.summary
Boolean=0
Multiple=2
metric=cscore-checker-combo-vratio|cscore|F|F|none
matrixmodel=sim1-sim2-sim3-sim4-sim5-sim6-sim7-sim8-sim9|sim2|F|F|none
Numbers=1
iters=1000|F|none
String=2
label=|F|none
groups=|F|none
inputGroupNames=0
inputTypes=shared
shared=T|T|none|none|none|summary
commandName=corr.axes
commandCategory=Hypothesis Testing
help=The corr.axes command reads a shared, relabund or metadata file as well as an axes file and calculates the correlation coefficient.The corr.axes command parameters are shared, relabund, axes, metadata, groups, method, numaxes and label.  The shared, relabund or metadata and axes parameters are required.  If shared is given the relative abundance is calculated.The groups parameter allows you to specify which of the groups you would like included. The group names are separated by dashes.The label parameter allows you to select what distance level you would like used, if none is given the first distance is used.The method parameter allows you to select what method you would like to use. Options are pearson, spearman and kendall. Default=pearson.The numaxes parameter allows you to select the number of axes you would like to use. Default=3.The corr.axes command should be in the following format: corr.axes(axes=yourPcoaFile, shared=yourSharedFile, method=yourMethod).Example corr.axes(axes=genus.pool.thetayc.genus.lt.pcoa, shared=genus.pool.shared, method=kendall).The corr.axes command outputs a .corr.axes file.Note: No spaces between parameter labels (i.e. groups), '=' and parameters (i.e.yourGroups).
citation=McCune B, Grace JB, Urban DL (2002). Analysis of ecological communities. MjM Software Design: Gleneden Beach, OR. Legendre P, Legendre L (1998). Numerical Ecology. Elsevier: New York. http://www.mothur.org/wiki/Corr.axes
description=calculate the correlation coefficient for each column in a shared/relabund file to the axes displayed in a pcoa file
outputTypesNames=1
corraxes=[filename],[tag],corr.axes
Boolean=0
Multiple=1
method=pearson-spearman-kendall|pearson|F|F|none
Numbers=1
numaxes=3|F|none
String=2
label=|F|none
groups=|F|none
inputGroupNames=1
SharedRelMeta=metadata-relabund-shared
inputTypes=axes-metadata-relabund-shared
axes=T|T|none|none|none|corraxes
metadata=F|F|SharedRelMeta|SharedRelMeta|none|none
relabund=F|T|SharedRelMeta|SharedRelMeta|none|none
shared=F|T|SharedRelMeta|SharedRelMeta|none|none
commandName=count.groups
commandCategory=Sequence Processing
help=The count.groups command counts sequences from a specific group or set of groups from the following file types: group, count or shared file.The count.groups command parameters are accnos, group, shared and groups. You must provide a group or shared file.The accnos parameter allows you to provide a file containing the list of groups.The groups parameter allows you to specify which of the groups in your groupfile you would like.  You can separate group names with dashes.The count.groups command should be in the following format: count.groups(accnos=yourAccnos, group=yourGroupFile).Example count.groups(accnos=amazon.accnos, group=amazon.groups).or count.groups(groups=pasture, group=amazon.groups).Note: No spaces between parameter labels (i.e. group), '=' and parameters (i.e.yourGroupFile).
citation=http://www.mothur.org/wiki/Count.groups
description=counts the number of sequences in each group
outputTypesNames=1
summary=[filename],count.summary
Boolean=0
Multiple=0
Numbers=0
String=1
groups=|F|none
inputGroupNames=1
sharedGroup=count-group-shared
inputTypes=accnos-count-group-shared
accnos=F|F|none|none|none|none
count=F|T|sharedGroup|sharedGroup|none|summary
group=F|T|sharedGroup|sharedGroup|none|summary
shared=F|T|sharedGroup|sharedGroup|none|summary
commandName=count.seqs
commandCategory=Sequence Processing
help=The count.seqs aka. make.table command reads a name file and outputs a .count_table file.  You may also provide a group file to get the counts broken down by group.The groups parameter allows you to indicate which groups you want to include in the counts, by default all groups in your groupfile are used.The large parameter indicates the name and group files are too large to fit in RAM.When you use the groups parameter and a sequence does not represent any sequences from the groups you specify it is not included in the .count.summary file.The processors parameter allows you to specify the number of processors to use. The default is 1.The count.seqs command should be in the following format: count.seqs(name=yourNameFile).Example count.seqs(name=amazon.names) or make.table(name=amazon.names).Note: No spaces between parameter labels (i.e. name), '=' and parameters (i.e.yourNameFile).
citation=http://www.mothur.org/wiki/Count.seqs
description=counts the number of sequences represented by each unique sequence in a namesfile
outputTypesNames=1
count=[filename],count_table
Boolean=1
large=F|F|none
Multiple=0
Numbers=1
processors=1|T|none
String=1
groups=|F|none
inputGroupNames=0
inputTypes=group-name
group=F|T|none|none|none|none
name=T|T|none|none|none|count
commandName=create.database
commandCategory=OTU-Based Approaches
help=The create.database command reads a list file or a shared file, *.cons.taxonomy, *.rep.fasta, *.rep.names and optional groupfile, or count file and creates a database file.The create.database command parameters are repfasta, list, shared, repname, contaxonomy, group, count and label. List, repfasta, repnames or count, and contaxonomy are required.The repfasta file is fasta file outputted by get.oturep(fasta=yourFastaFile, list=yourListfile, column=yourDistFile, name=yourNameFile).The repname file is the name file outputted by get.oturep(fasta=yourFastaFile, list=yourListfile, column=yourDistFile, name=yourNameFile).The count file is the count file outputted by get.oturep(fasta=yourFastaFile, list=yourListfile, column=yourDistFile, count=yourCountFile). If it includes group info, mothur will give you the abundance breakdown by group. The contaxonomy file is the taxonomy file outputted by classify.otu(list=yourListfile, taxonomy=yourTaxonomyFile, name=yourNameFile).The group file is optional and will just give you the abundance breakdown by group.The label parameter allows you to specify a label to be used from your listfile.NOTE: Make SURE the repfasta, repnames and contaxonomy are for the same label as the listfile.The create.database command should be in the following format: create.database(repfasta=yourFastaFileFromGetOTURep, repname=yourNameFileFromGetOTURep, contaxonomy=yourConTaxFileFromClassifyOTU, list=yourListFile) Example: create.database(repfasta=final.an.0.03.rep.fasta, repname=final.an.0.03.rep.names, list=final.an.list, label=0.03, contaxonomy=final.an.0.03.cons.taxonomy) Note: No spaces between parameter labels (i.e. repfasta), '=' and parameters (i.e.yourFastaFileFromGetOTURep).
citation=http://www.mothur.org/wiki/Create.database
description=creates database file that includes, abundances across groups, representative sequences, and taxonomy for each OTU
outputTypesNames=1
database=[filename],database
Boolean=0
Multiple=0
Numbers=0
String=1
label=|F|none
inputGroupNames=3
CountGroup=count-group
ListShared=list-shared
NameCount=count-repname
inputTypes=contaxonomy-count-group-list-repfasta-repname-shared
contaxonomy=T|T|none|none|none|none
count=F|T|NameCount-CountGroup|NameCount|none|none
group=F|T|CountGroup|none|none|none
list=F|T|ListShared|ListShared|none|none
repfasta=T|T|none|none|none|database
repname=F|T|NameCount|NameCount|none|none
shared=F|T|ListShared|ListShared|none|none
commandName=degap.seqs
commandCategory=Sequence Processing
help=The degap.seqs command reads a fastafile and removes all gap characters.The degap.seqs command parameter is fasta.The fasta parameter allows you to enter the fasta file containing your sequences, and is required unless you have a valid current fasta file. You may enter multiple fasta files by separating their names with dashes. ie. fasta=abrecovery.fasta-amzon.fasta The degap.seqs command should be in the following format: degap.seqs(fasta=yourFastaFile) Example: degap.seqs(fasta=abrecovery.align) Note: No spaces between parameter labels (i.e. fasta), '=' and parameters (i.e.yourFastaFile).
citation=http://www.mothur.org/wiki/Degap.seqs
description=removes gap characters from sequences
outputTypesNames=1
fasta=[filename],ng.fasta
Boolean=0
Multiple=0
Numbers=0
String=0
inputGroupNames=0
inputTypes=fasta
fasta=T|T|none|none|none|fasta
commandName=deunique.seqs
commandCategory=Sequence Processing
help=The deunique.seqs command reads a fastafile and namefile, and creates a fastafile containing all the sequences.The deunique.seqs command parameters are fasta and name, both are required, unless you have valid current name and fasta files.The deunique.seqs command should be in the following format: deunique.seqs(fasta=yourFastaFile, name=yourNameFile) Example deunique.seqs(fasta=abrecovery.unique.fasta, name=abrecovery.names).Note: No spaces between parameter labels (i.e. fasta), '=' and parameters (i.e.yourFasta).
citation=http://www.mothur.org/wiki/Deunique.seqs
description=reverse of the unique.seqs command, and creates a fasta file from a fasta and name file
outputTypesNames=1
fasta=[filename],redundant.fasta
Boolean=0
Multiple=0
Numbers=0
String=0
inputGroupNames=0
inputTypes=fasta-name
fasta=T|T|none|none|none|fasta
name=T|T|none|none|none|none
commandName=deunique.tree
commandCategory=Hypothesis Testing
help=The deunique.tree command parameters are tree and name.  Both parameters are required unless you have valid current files.The deunique.tree command should be in the following format: deunique.tree(tree=yourTreeFile, name=yourNameFile).Example deunique.tree(tree=abrecovery.tree, name=abrecovery.names).Note: No spaces between parameter labels (i.e. tree), '=' and parameters (i.e.yourTreeFile).
citation=http://www.mothur.org/wiki/Deunique.tree
description=add the redundant sequence names back into a tree of unique sequences
outputTypesNames=1
tree=[filename],deunique.tre
Boolean=0
Multiple=0
Numbers=0
String=0
inputGroupNames=0
inputTypes=name-tree
name=T|T|none|none|none|none
tree=T|T|none|none|none|tree
commandName=dist.seqs
commandCategory=Sequence Processing
help=The dist.seqs command reads a file containing sequences and creates a distance file.The dist.seqs command parameters are fasta, oldfasta, column, calc, countends, output, compress, cutoff and processors.  The fasta parameter is required, unless you have a valid current fasta file.The oldfasta and column parameters allow you to append the distances calculated to the column file.The calc parameter allows you to specify the method of calculating the distances.  Your options are: nogaps, onegap or eachgap. The default is onegap.The countends parameter allows you to specify whether to include terminal gaps in distance.  Your options are: T or F. The default is T.The cutoff parameter allows you to specify maximum distance to keep. The default is 1.0.The output parameter allows you to specify format of your distance matrix. Options are column, lt, and square. The default is column.The processors parameter allows you to specify number of processors to use.  The default is 1.The compress parameter allows you to indicate that you want the resulting distance file compressed.  The default is false.The dist.seqs command should be in the following format: dist.seqs(fasta=yourFastaFile, calc=yourCalc, countends=yourEnds, cutoff= yourCutOff, processors=yourProcessors) Example dist.seqs(fasta=amazon.fasta, calc=eachgap, countends=F, cutoff= 2.0, processors=3).Note: No spaces between parameter labels (i.e. calc), '=' and parameters (i.e.yourCalc).
citation=Schloss PD (2010). The effects of alignment quality, distance calculation method, sequence filtering, and region on the analysis of 16S rRNA gene-based studies. PLoS Comput Biol 6: e1000844. http://www.mothur.org/wiki/Dist.seqs
description=calculate the pairwaise distances between aligned sequences
outputTypesNames=2
column=[filename],dist
phylip=[filename],[outputtag],dist
Boolean=2
countends=T|F|none
compress=F|F|none
Multiple=2
output=column-lt-square-phylip|column|F|T|phylip-column
calc=nogaps-eachgap-onegap|onegap|F|F|none
Numbers=2
processors=1|T|none
cutoff=1.0|T|none
String=0
inputGroupNames=1
OldFastaColumn=column-oldfasta
inputTypes=column-fasta-oldfasta
column=F|F|none|none|OldFastaColumn|column
fasta=T|T|none|none|none|phylip-column
oldfasta=F|F|none|none|OldFastaColumn|none
commandName=dist.shared
commandCategory=OTU-Based Approaches
help=The dist.shared command parameters are shared, groups, calc, output, processors, subsample, iters, mode, and label.  shared is a required, unless you have a valid current file.The groups parameter allows you to specify which of the groups in your groupfile you would like included used.The group names are separated by dashes. The label parameter allows you to select what distance levels you would like distance matrices created for, and is also separated by dashes.The iters parameter allows you to choose the number of times you would like to run the subsample.The subsample parameter allows you to enter the size pergroup of the sample or you can set subsample=T and mothur will use the size of your smallest group.The dist.shared command should be in the following format: dist.shared(groups=yourGroups, calc=yourCalcs, label=yourLabels).The output parameter allows you to specify format of your distance matrix. Options are lt, column and square. The default is lt.The mode parameter allows you to specify if you want the average or the median values reported when subsampling. Options are average, and median. The default is average.Example dist.shared(groups=A-B-C, calc=jabund-sorabund).The default value for groups is all the groups in your groupfile.The default value for calc is jclass and thetayc.The available estimators for calc are anderberg, braycurtis, canberra, gower, hamming, hellinger, jabund, jclass, jest, kstest, kulczynski, kulczynskicody, lennon, manhattan, memchi2, memchord, memeuclidean, mempearson, morisitahorn, ochiai, odum, sharedace, sharedchao, sharednseqs, sharedsobs, soergel, sorabund, sorclass, sorest, spearman, speciesprofile, structchi2, structchord, structeuclidean, structkulczynski, structpearson, thetan, thetayc, whittaker,The dist.shared command outputs a .dist file for each calculator you specify at each distance you choose.Note: No spaces between parameter labels (i.e. groups), '=' and parameters (i.e.yourGroups).
citation=http://www.mothur.org/wiki/Dist.shared
description=generate a distance matrix that describes the dissimilarity among multiple groups
outputTypesNames=1
phylip=[filename],[calc],[distance],[outputtag],dist-[filename],[calc],[distance],[outputtag],[tag2],dist
Boolean=0
Multiple=3
calc=sharedsobs-sharedchao-sharedace-jabund-sorabund-jclass-sorclass-jest-sorest-thetayc-thetan-kstest-sharednseqs-ochiai-anderberg-kulczynski-kulczynskicody-lennon-morisitahorn-braycurtis-whittaker-odum-canberra-structeuclidean-structchord-hellinger-manhattan-structpearson-soergel-spearman-structkulczynski-speciesprofile-hamming-structchi2-gower-memchi2-memchord-memeuclidean-mempearson|jclass-thetayc|T|T|none
output=lt-square-column|lt|F|F|none
mode=average-median|average|F|F|none
Numbers=2
processors=1|T|none
iters=1000|F|none
String=3
label=|F|none
subsample=|F|none
groups=|F|none
inputGroupNames=0
inputTypes=shared
shared=T|T|none|none|none|phylip
commandName=fastq.info
commandCategory=Sequence Processing
help=The fastq.info command reads a fastq file and creates a fasta and quality file.The fastq.info command parameters are fastq, fasta, qfile and format; fastq is required.The fastq.info command should be in the following format: fastq.info(fastaq=yourFastaQFile).The format parameter is used to indicate whether your sequences are sanger, solexa, illumina1.8+ or illumina, default=sanger.The fasta parameter allows you to indicate whether you want a fasta file generated. Default=T.The qfile parameter allows you to indicate whether you want a quality file generated. Default=T.The pacbio parameter allows you to indicate .... When set to true, quality scores of 0 will results in a corresponding base of N. Default=F.Example fastq.info(fastaq=test.fastaq).Note: No spaces between parameter labels (i.e. fastq), '=' and yourFastQFile.
citation=http://www.mothur.org/wiki/Parse.fastq
description=reads a fastq file and creates a fasta and quality file
outputTypesNames=2
fasta=[filename],fasta
qfile=[filename],qual
Boolean=3
fasta=T|F|fasta
qfile=T|F|qfile
pacbio=F|F|none
Multiple=1
format=sanger-illumina-solexa-illumina1.8+|sanger|F|T|none
Numbers=0
String=0
inputGroupNames=0
inputTypes=fastq
fastq=T|T|none|none|none|none
commandName=filter.seqs
commandCategory=Sequence Processing
help=The filter.seqs command reads a file containing sequences and creates a .filter and .filter.fasta file.The filter.seqs command parameters are fasta, trump, soft, hard, processors and vertical. The fasta parameter is required, unless you have a valid current fasta file. You may enter several fasta files to build the filter from and filter, by separating their names with -'s.For example: fasta=abrecovery.fasta-amazon.fasta The trump option will remove a column if the trump character is found at that position in any sequence of the alignment. Default=*, meaning no trump. A soft mask removes any column where the dominant base (i.e. A, T, G, C, or U) does not occur in at least a designated percentage of sequences. Default=0.The hard parameter allows you to enter a file containing the filter you want to use.The vertical parameter removes columns where all sequences contain a gap character. The default is T.The processors parameter allows you to specify the number of processors to use. The default is 1.The filter.seqs command should be in the following format: filter.seqs(fasta=yourFastaFile, trump=yourTrump) Example filter.seqs(fasta=abrecovery.fasta, trump=.).Note: No spaces between parameter labels (i.e. fasta), '=' and parameters (i.e.yourFasta).
citation=http://www.mothur.org/wiki/Filter.seqs
description=removes columns from alignments based on a criteria defined by the user
outputTypesNames=2
fasta=[filename],filter.fasta
filter=[filename],filter
Boolean=1
vertical=T|T|none
Multiple=0
Numbers=2
soft=0|F|none
processors=1|T|none
String=1
trump=*|T|none
inputGroupNames=0
inputTypes=fasta-hard
fasta=T|T|none|none|none|fasta-filter
hard=F|F|none|none|none|none
commandName=filter.shared
commandCategory=OTU-Based Approaches
help=The filter.shared command is used to remove OTUs based on various critieria.The filter.shared command parameters are shared, minpercent, minabund, mintotal, minnumsamples, minpercentsamples, rarepercent, makerare, keepties, groups and label.  You must provide a shared file.The groups parameter allows you to specify which of the groups you would like included. The group names are separated by dashes.The label parameter allows you to select what distance levels you would like, and are also separated by dashes.The minabund parameter allows you indicate the minimum abundance required for each sample in a given OTU.  If any samples abundance falls below the minimum, the OTU is removed. Default=0The minpercent parameter allows you indicate the minimum relative abundance of an OTU. For example, if the OTUs total abundance across all samples is 8, and the total abundance across all OTUs is 1000, and minpercent=1. The OTU's relative abundance is 0.008, the minimum is 0.01, so the OTU will be removed. Default=0.The rarepercent parameter allows you indicate the percentage of otus to remove.  The OTUs chosen to be removed are the rarest.  For example if you have 1000 OTUs, rarepercent=20 would remove the 200 OTUs with the lowest abundance. Default=0.The keepties parameter is used with the rarepercent parameter.  It allows you indicate you want to keep the OTUs with the same abundance as the first 'not rare' OTU. For example if you have 10 OTUs, rarepercent=20 abundances of 20, 18, 15, 15, 10, 5, 3, 3, 3, 1. keepties=t, would remove the 10th OTU, but keep the 9th because its abundance ties the 8th OTU. keepties=f would remove OTUs 9 and 10.  Default=TThe minnumsamples parameter allows you indicate the minimum number of samples present in an OTU. If the number of samples present falls below the minimum, the OTU is removed. Default=0.The minpercentsamples parameter allows you indicate the minimum percent of sample present in an OTU. For example, if the total number of samples is 10, the number present is 3, and the minpercentsamples=50. The OTU's precent of samples is 0.333, the minimum is 0.50, so the OTU will be removed. Default=0.The mintotal parameter allows you indicate the minimum abundance required for a given OTU.  If abundance across all samples falls below the minimum, the OTU is removed. Default=0.The makerare parameter allows you indicate you want the abundances of any removed OTUs to be saved and a new "rare" OTU created with its abundances equal to the sum of the OTUs removed.  This will preserve the number of reads in your dataset. Default=TThe filter.shared command should be in the following format: filter.shared(shared=yourSharedFile, minabund=yourMinAbund, groups=yourGroups, label=yourLabels).Example filter.shared(shared=final.an.shared, minabund=10).The default value for groups is all the groups in your sharedfile, and all labels in your inputfile will be used.The filter.shared command outputs a .filter.shared file.Note: No spaces between parameter labels (i.e. groups), '=' and parameters (i.e.yourGroups).
citation=http://www.mothur.org/wiki/Filter.shared
description=remove OTUs based on various criteria
outputTypesNames=1
shared=[filename],[distance],filter,[extension]
Boolean=2
keepties=T|T|none
makerare=T|T|none
Multiple=0
Numbers=6
minpercent=-1|T|none
rarepercent=-1|T|none
minabund=-1|T|none
mintotal=-1|T|none
minnumsamples=-1|T|none
minpercentsamples=-1|T|none
String=2
label=|F|none
groups=|F|none
inputGroupNames=0
inputTypes=shared
shared=T|T|none|none|none|shared
commandName=get.communitytype
commandCategory=OTU-Based Approaches
help=The get.communitytype command parameters are shared, label, groups, minpartitions, maxpartitions, optimizegap and processors. The shared file is required. The label parameter is used to analyze specific labels in your input. labels are separated by dashes.The groups parameter allows you to specify which of the groups in your shared file you would like analyzed.  Group names are separated by dashes.The minpartitions parameter is used to .... Default=5.The maxpartitions parameter is used to .... Default=10.The optimizegap parameter is used to .... Default=3.The processors parameter allows you to specify number of processors to use.  The default is 1.The get.communitytype command should be in the following format: get.communitytype(shared=yourSharedFile).
citation=Holmes I, Harris K, Quince C (2012) Dirichlet Multinomial Mixtures: Generative Models for Microbial Metagenomics. PLoS ONE 7(2): e30126. doi:10.1371/journal.pone.0030126 http://www.mothur.org/wiki/get.communitytype
description=Assigns samples to bins using a Dirichlet multinomial mixture model
outputTypesNames=6
design=[filename],[distance],mix.design
fit=[filename],[distance],mix.fit
matrix=[filename],[distance],[tag],mix.posterior
parameters=[filename],[distance],mix.parameters
relabund=[filename],[distance],[tag],mix.relabund
summary=[filename],[distance],mix.summary
Boolean=0
Multiple=0
Numbers=4
minpartitions=5|T|none
maxpartitions=100|T|none
optimizegap=3|T|none
processors=1|T|none
String=2
groups=|F|none
label=|F|none
inputGroupNames=0
inputTypes=shared
shared=T|T|none|none|none|outputType
commandName=get.coremicrobiome
commandCategory=OTU-Based Approaches
help=The get.coremicrobiome determines the fraction of OTUs that are found in varying numbers of samples for different minimum relative abundances.The get.coremicrobiome parameters are: shared, relabund, groups, label, output, abundance and samples. Shared or relabund is required.The label parameter is used to analyze specific labels in your input.The groups parameter allows you to specify which of the groups you would like analyzed.The output parameter is used to specify whether you would like the fraction of OTU's or OTU count outputted. Options are fraction or count. Default=fraction.The abundance parameter allows you to specify an abundance you would like the OTU names outputted for. Must be an integer between 0 and 100, indicating the relative abundance. The samples parameter allows you to specify the minimum number of samples you would like the OTU names outputted for. Must be an interger between 1 and number of samples in your file.The new command should be in the following format: get.coremicrobiome(shared=yourSharedFile)get.coremicrobiom(shared=final.an.shared, abund=30)
citation=http://www.mothur.org/wiki/Get.coremicrobiome
description=determines the fraction of OTUs that are found in varying numbers of samples for different minimum relative abundances
outputTypesNames=1
coremicrobiome=[filename],[tag],core.microbiome
Boolean=0
Multiple=1
output=fraction-count|fraction|F|F|none
Numbers=2
abundance=-1|F|none
samples=-1|F|none
String=2
groups=|F|none
label=|F|none
inputGroupNames=1
SharedRel=relabund-shared
inputTypes=relabund-shared
relabund=F|T|SharedRel|SharedRel|none|coremicrobiom
shared=F|T|SharedRel|SharedRel|none|coremicrobiom
commandName=get.current
commandCategory=General
help=The get.current command outputs the current files saved by mothur.The get.current command has one parameter: clear.The clear paramter is used to indicate which file types you would like to clear values for, multiple types can be separated by dashes.The get.current command should be in the following format: get.current() or get.current(clear=fasta-name-accnos)
citation=http://www.mothur.org/wiki/Get.current
description=get current files saved by mothur
outputTypesNames=0
Boolean=0
Multiple=0
Numbers=0
String=1
clear=|F|none
inputGroupNames=0
inputTypes=
commandName=get.dists
commandCategory=General
help=The get.dists command selects distances from a phylip or column file related to groups or sequences listed in an accnos file.The get.dists command parameters are accnos, phylip and column.The get.dists command should be in the following format: get.dists(accnos=yourAccnos, phylip=yourPhylip).Example get.dists(accnos=final.accnos, phylip=final.an.thetayc.0.03.lt.ave.dist).Note: No spaces between parameter labels (i.e. accnos), '=' and parameters (i.e.final.accnos).
citation=http://www.mothur.org/wiki/Get.dists
description=gets distances from a phylip or column file related to groups or sequences listed in an accnos file
outputTypesNames=2
column=[filename],pick,[extension]
phylip=[filename],pick,[extension]
Boolean=0
Multiple=0
Numbers=0
String=0
inputGroupNames=1
PhylipColumn=column-phylip
inputTypes=accnos-column-phylip
accnos=T|T|none|none|none|none
column=F|T|none|PhylipColumn|none|column
phylip=F|T|none|PhylipColumn|none|phylip
commandName=get.group
commandCategory=OTU-Based Approaches
help=The get.group command parameter is shared and it's required if you have no valid current file.You may not use any parameters with the get.group command.The get.group command should be in the following format: get.group()Example get.group().
citation=http://www.mothur.org/wiki/Get.group
description=outputs group names
outputTypesNames=0
Boolean=0
Multiple=0
Numbers=0
String=0
inputGroupNames=0
inputTypes=shared
shared=T|T|none|none|none|none
commandName=get.groups
commandCategory=OTU-Based Approaches
help=The get.groups command selects sequences from a specfic group or set of groups from the following file types: fasta, name, group, list, taxonomy, design or shared file.It outputs a file containing the sequences in the those specified groups, or a sharedfile containing only those groups.The get.groups command parameters are accnos, fasta, name, group, list, taxonomy, shared, design and groups. The group or count parameter is required, unless you have a current group or count file, or are using a shared file.You must also provide an accnos containing the list of groups to get or set the groups parameter to the groups you wish to select.The groups parameter allows you to specify which of the groups in your groupfile you would like.  You can separate group names with dashes.The get.groups command should be in the following format: get.groups(accnos=yourAccnos, fasta=yourFasta, group=yourGroupFile).Example get.groups(accnos=amazon.accnos, fasta=amazon.fasta, group=amazon.groups).or get.groups(groups=pasture, fasta=amazon.fasta, group=amazon.groups).Note: No spaces between parameter labels (i.e. fasta), '=' and parameters (i.e.yourFasta).
citation=http://www.mothur.org/wiki/Get.groups
description=gets sequences from a list, fasta, name, group, shared, design or taxonomy file from a given group or set of groups
outputTypesNames=8
count=[filename],pick,[extension]
design=[filename],pick,[extension]
fasta=[filename],pick,[extension]
group=[filename],pick,[extension]
list=[filename],pick,[extension]
name=[filename],pick,[extension]
shared=[filename],[tag],pick,[extension]
taxonomy=[filename],pick,[extension]
Boolean=0
Multiple=0
Numbers=0
String=1
groups=|F|none
inputGroupNames=4
CountGroup=count-group
FNGLT=design-fasta-group-list-taxonomy
NameCount=count-name
sharedGroup=design-group-shared
inputTypes=accnos-count-design-fasta-group-list-name-shared-taxonomy
accnos=F|F|none|none|none|none
count=F|T|NameCount-CountGroup|none|none|count
design=F|T|none|sharedGroup|FNGLT|design
fasta=F|T|none|none|FNGLT|fasta
group=F|T|CountGroup|sharedGroup|FNGLT|group
list=F|T|none|none|FNGLT|list
name=F|T|NameCount|none|none|name
shared=F|T|none|sharedGroup|none|shared
taxonomy=F|T|none|none|FNGLT|taxonomy
commandName=get.label
commandCategory=OTU-Based Approaches
help=The get.label command parameters are list, sabund and rabund file. The get.label command should be in the following format: get.label()Example get.label().
citation=http://www.mothur.org/wiki/Get.label
description=outputs labels
outputTypesNames=0
Boolean=0
Multiple=0
Numbers=0
String=0
inputGroupNames=1
LRSS=list-rabund-sabund
inputTypes=list-rabund-sabund
list=F|T|LRSS|LRSS|none|none
rabund=F|T|LRSS|LRSS|none|none
sabund=F|T|LRSS|LRSS|none|none
commandName=get.lineage
commandCategory=Phylotype Analysis
help=The get.lineage command reads a taxonomy or constaxonomy file and any of the following file types: fasta, name, group, count, list, shared or alignreport file. The constaxonomy can only be used with a shared or list file.It outputs a file containing only the sequences from the taxonomy file that are from the taxon requested.The get.lineage command parameters are taxon, fasta, name, group, count, list, shared, taxonomy, alignreport, label and dups.  You must provide taxonomy or constaxonomy unless you have a valid current taxonomy file.The dups parameter allows you to add the entire line from a name file if you add any name from the line. default=false. The taxon parameter allows you to select the taxons you would like to get and is required.You may enter your taxons with confidence scores, doing so will get only those sequences that belong to the taxonomy and whose cofidence scores is above the scores you give.If they belong to the taxonomy and have confidences below those you provide the sequence will not be selected.The label parameter is used to analyze specific labels in your input. The get.lineage command should be in the following format: get.lineage(taxonomy=yourTaxonomyFile, taxon=yourTaxons).Example get.lineage(taxonomy=amazon.silva.taxonomy, taxon=Bacteria;Firmicutes;Bacilli;Lactobacillales;).Note: If you are running mothur in script mode you must wrap the taxon in ' characters so mothur will ignore the ; in the taxon.Example get.lineage(taxonomy=amazon.silva.taxonomy, taxon='Bacteria;Firmicutes;Bacilli;Lactobacillales;').Note: No spaces between parameter labels (i.e. fasta), '=' and parameters (i.e.yourFasta).
citation=http://www.mothur.org/wiki/Get.lineage
description=gets sequences from a list, fasta, name, group, alignreport or taxonomy file from a given taxonomy or set of taxonomies
outputTypesNames=9
alignreport=[filename],pick.align.report
constaxonomy=[filename],pick,[extension]
count=[filename],pick,[extension]
fasta=[filename],pick,[extension]
group=[filename],pick,[extension]
list=[filename],pick,[extension]-[filename],[distance],pick,[extension]
name=[filename],pick,[extension]
shared=[filename],[distance],pick,[extension]
taxonomy=[filename],pick,[extension]
Boolean=1
dups=T|F|none
Multiple=0
Numbers=0
String=2
label=|F|none
taxon=|T|none
inputGroupNames=4
CountGroup=count-group
FNGLT=alignreport-constaxonomy-count-fasta-group-list-name-shared-taxonomy
NameCount=count-name
tax=constaxonomy-taxonomy
inputTypes=alignreport-constaxonomy-count-fasta-group-list-name-shared-taxonomy
alignreport=F|F|none|FNGLT|none|alignreport
constaxonomy=F|T|tax|FNGLT|none|constaxonomy
count=F|T|NameCount-CountGroup|FNGLT|none|count
fasta=F|T|none|FNGLT|none|fasta
group=F|T|CountGroup|FNGLT|none|group
list=F|T|none|FNGLT|none|list
name=F|T|NameCount|FNGLT|none|name
shared=F|T|none|FNGLT|none|shared
taxonomy=F|T|tax|FNGLT|none|taxonomy
commandName=get.otulabels
commandCategory=OTU-Based Approaches
help=The get.otulabels command can be used to select specific otus with the output from classify.otu, otu.association, or corr.axes commands.  It can also be used to select a set of otus from a shared or list file.The get.otulabels parameters are: constaxonomy, otucorr, corraxes, shared, list, label and accnos.The constaxonomy parameter is used to input the results of the classify.otu command.The otucorr parameter is used to input the results of the otu.association command.The corraxes parameter is used to input the results of the corr.axes command.The label parameter is used to analyze specific labels in your input. The get.otulabels commmand should be in the following format: get.otulabels(accnos=yourListOfOTULabels, corraxes=yourCorrAxesFile)
citation=http://www.mothur.org/wiki/Get.otulabels
description=Can be used with output from classify.otu, otu.association, or corr.axes to select specific otus.
outputTypesNames=5
constaxonomy=[filename],pick,[extension]
corraxes=[filename],pick,[extension]
list=[filename],[distance],pick,[extension]
otucorr=[filename],pick,[extension]
shared=[filename],[distance],pick,[extension]
Boolean=0
Multiple=0
Numbers=0
String=1
label=|F|none
inputGroupNames=1
FNGLT=constaxonomy-corraxes-list-otucorr-shared
inputTypes=accnos-constaxonomy-corraxes-list-otucorr-shared
accnos=T|T|none|none|none|none
constaxonomy=F|T|none|FNGLT|none|constaxonomy
corraxes=F|T|none|FNGLT|none|corraxes
list=F|T|none|FNGLT|none|list
otucorr=F|T|none|FNGLT|none|otucorr
shared=F|T|none|FNGLT|none|shared
commandName=get.otulist
commandCategory=OTU-Based Approaches
help=The get.otulist command parameters are list, sort and label.  list is required, unless you have a valid current list file.The label parameter allows you to select what distance levels you would like a output files created for, and are separated by dashes.The sort parameter allows you to select how you want the output displayed. Options are otu and name.If otu is selected the output will be otu number followed by the list of names in that otu.If name is selected the output will be a sequence name followed by its otu number.The get.otulist command should be in the following format: get.otulist(list=yourlistFile, label=yourLabels).Example get.otulist(list=amazon.fn.list, label=0.10).The default value for label is all lines in your inputfile.The get.otulist command outputs a .otu file for each distance you specify listing the bin number and the names of the sequences in that bin.Note: No spaces between parameter labels (i.e. list), '=' and parameters (i.e.yourListFile).
citation=http://www.mothur.org/wiki/Get.otulist
description=lists each OTU number and the sequence contained in that OTU
outputTypesNames=1
otu=[filename],[tag],otu
Boolean=0
Multiple=1
sort=name-otu|otu|F|F|none
Numbers=0
String=1
label=|F|none
inputGroupNames=0
inputTypes=list
list=T|T|none|none|none|otu
commandName=get.oturep
commandCategory=OTU-Based Approaches
help=The get.oturep command parameters are phylip, column, list, fasta, name, group, count, large, weighted, cutoff, precision, groups, sorted, method and label.  The list parameter is required, as well as phylip or column and name if you are using method=distance. If method=abundance a name or count file is required.The label parameter allows you to select what distance levels you would like a output files created for, and is separated by dashes.The phylip or column parameter is required for method=distance, but only one may be used.  If you use a column file the name or count filename is required. The method parameter allows you to select the method of selecting the representative sequence. Choices are distance and abundance.  The distance method finds the sequence with the smallest maximum distance to the other sequences. If tie occurs the sequence with smallest average distance is selected.  The abundance method chooses the most abundant sequence in the OTU as the representative.If you do not provide a cutoff value 10.00 is assumed. If you do not provide a precision value then 100 is assumed.The get.oturep command should be in the following format: get.oturep(phylip=yourDistanceMatrix, fasta=yourFastaFile, list=yourListFile, name=yourNamesFile, group=yourGroupFile, label=yourLabels).Example get.oturep(phylip=amazon.dist, fasta=amazon.fasta, list=amazon.fn.list, group=amazon.groups).The default value for label is all labels in your inputfile.The sorted parameter allows you to indicate you want the output sorted. You can sort by sequence name, bin number, bin size or group. The default is no sorting, but your options are name, number, size, or group.The large parameter allows you to indicate that your distance matrix is too large to fit in RAM.  The default value is false.The weighted parameter allows you to indicate that want to find the weighted representative. You must provide a namesfile to set weighted to true.  The default value is false.The representative is found by selecting the sequence that has the smallest total distance to all other sequences in the OTU. If a tie occurs the smallest average distance is used.For weighted = false, mothur assumes the distance file contains only unique sequences, the list file may contain all sequences, but only the uniques are considered to become the representative. If your distance file contains all the sequences it would become weighted=true.For weighted = true, mothur assumes the distance file contains only unique sequences, the list file must contain all sequences, all sequences are considered to become the representative, but unique name will be used in the output for consistency.If your distance file contains all the sequence and you do not provide a name file, the weighted representative will be given, unless your listfile is unique. If you provide a namefile, then you can select weighted or unweighted.The group parameter allows you provide a group file.The groups parameter allows you to indicate that you want representative sequences for each group specified for each OTU, group name should be separated by dashes. ex. groups=A-B-C.The get.oturep command outputs a .fastarep and .rep.names file for each distance you specify, selecting one OTU representative for each bin.If you provide a groupfile, then it also appends the names of the groups present in that bin.Note: No spaces between parameter labels (i.e. fasta), '=' and parameters (i.e.yourFastaFile).
citation=http://www.mothur.org/wiki/Get.oturep
description=gets a representative sequence for each OTU
outputTypesNames=3
count=[filename],[tag],rep.count_table-[filename],[tag],[group],rep.count_table
fasta=[filename],[tag],rep.fasta-[filename],[tag],[group],rep.fasta
name=[filename],[tag],rep.names-[filename],[tag],[group],rep.names
Boolean=2
weighted=F|F|none
large=F|F|none
Multiple=2
sorted=none-name-bin-size-group|none|F|F|none
method=distance-abundance|distance|F|F|none
Numbers=2
cutoff=10|F|none
precision=100|F|none
String=2
label=|F|none
groups=|F|none
inputGroupNames=4
ColumnName=column-count-name
CountGroup=count-group
NameCount=count-name
PhylipColumn=column-phylip
inputTypes=column-count-fasta-group-list-name-phylip
column=F|T|PhylipColumn|PhylipColumn|ColumnName|none
count=F|T|NameCount-CountGroup|none|ColumnName|count
fasta=F|T|none|none|none|fasta
group=F|T|CountGroup|none|none|none
list=T|T|none|none|none|name
name=F|T|NameCount|none|ColumnName|none
phylip=F|T|PhylipColumn|PhylipColumn|none|none
commandName=get.otus
commandCategory=OTU-Based Approaches
help=The get.otus command selects otus containing sequences from a specfic group or set of groups.It outputs a new list file containing the otus containing sequences from in the those specified groups.The get.otus command parameters are accnos, group, list, label and groups. The group and list parameters are required, unless you have valid current files.You must also provide an accnos containing the list of groups to get or set the groups parameter to the groups you wish to select.The groups parameter allows you to specify which of the groups in your groupfile you would like.  You can separate group names with dashes.The label parameter allows you to specify which distance you want to process.The get.otus command should be in the following format: get.otus(accnos=yourAccnos, list=yourListFile, group=yourGroupFile, label=yourLabel).Example get.otus(accnos=amazon.accnos, list=amazon.fn.list, group=amazon.groups, label=0.03).or get.otus(groups=pasture, list=amazon.fn.list, amazon.groups, label=0.03).Note: No spaces between parameter labels (i.e. list), '=' and parameters (i.e.yourListFile).
citation=http://www.mothur.org/wiki/Get.otus
description=outputs a new list file containing the otus containing sequences from the groups specified
outputTypesNames=2
group=[filename],[tag],pick,[extension]
list=[filename],[tag],pick,[extension]
Boolean=0
Multiple=0
Numbers=0
String=2
groups=|F|none
label=|F|none
inputGroupNames=0
inputTypes=accnos-group-list
accnos=F|F|none|none|none|none
group=T|T|none|none|none|group
list=T|T|none|none|none|list
commandName=get.rabund
commandCategory=OTU-Based Approaches
help=The get.rabund command parameters are list, sabund, count, label and sorted.  list or sabund parameters are required, unless you have valid current files.The count parameter allows you to provide a count file associated with your list file. If you clustered with a countfile the list file only contains the unique sequences and you will want to add the redundant counts into the rabund file, providing the count file allows you to do so.The label parameter allows you to select what distance levels you would like included in your .rabund file, and are separated by dashes.The sorted parameters allows you to print the rabund results sorted by abundance or not.  The default is sorted.The get.rabund command should be in the following format: get.rabund(label=yourLabels, sorted=yourSorted).Example get.rabund(sorted=F).The default value for label is all labels in your inputfile.The get.rabund command outputs a .rabund file containing the lines you selected.Note: No spaces between parameter labels (i.e. label), '=' and parameters (i.e.yourLabels).
citation=http://www.mothur.org/wiki/Get.rabund
description=creates a rabund file
outputTypesNames=1
rabund=[filename],rabund
Boolean=1
sorted=T|F|none
Multiple=0
Numbers=0
String=1
label=|F|none
inputGroupNames=1
LRSS=list-sabund
inputTypes=count-list-sabund
count=F|F|none|none|none|none
list=F|T|LRSS|LRSS|none|rabund
sabund=F|T|LRSS|LRSS|none|rabund
commandName=get.relabund
commandCategory=OTU-Based Approaches
help=The get.relabund command parameters are shared, groups, scale and label.  shared is required, unless you have a valid current file.The groups parameter allows you to specify which of the groups in your groupfile you would like included. The group names are separated by dashes.The label parameter allows you to select what distance levels you would like, and are also separated by dashes.The scale parameter allows you to select what scale you would like to use. Choices are totalgroup, totalotu, averagegroup, averageotu, default is totalgroup.The get.relabund command should be in the following format: get.relabund(groups=yourGroups, label=yourLabels).Example get.relabund(groups=A-B-C, scale=averagegroup).The default value for groups is all the groups in your groupfile, and all labels in your inputfile will be used.The get.relabund command outputs a .relabund file.Note: No spaces between parameter labels (i.e. groups), '=' and parameters (i.e.yourGroups).
citation=http://www.mothur.org/wiki/Get.relabund
description=calculates the relative abundance of each OTU in a sample
outputTypesNames=1
relabund=[filename],relabund
Boolean=0
Multiple=1
scale=totalgroup-totalotu-averagegroup-averageotu|totalgroup|F|F|none
Numbers=0
String=2
groups=|F|none
label=|F|none
inputGroupNames=0
inputTypes=shared
shared=T|T|none|none|none|relabund
commandName=get.sabund
commandCategory=OTU-Based Approaches
help=The get.sabund command parameters is list, rabund, count and label.  list or rabund is required unless a valid current file exists.The count parameter allows you to provide a count file associated with your list file. If you clustered with a countfile the list file only contains the unique sequences and you will want to add the redundant counts into the sabund file, providing the count file allows you to do so.The label parameter allows you to select what distance levels you would like included in your .sabund file, and are separated by dashes.The get.sabund command should be in the following format: get.sabund(label=yourLabels).Example get.sabund().The default value for label is all labels in your inputfile.The get.sabund command outputs a .sabund file containing the labels you selected.Note: No spaces between parameter labels (i.e. label), '=' and parameters (i.e.yourLabel).
citation=http://www.mothur.org/wiki/Get.sabund
description=creates a sabund file
outputTypesNames=1
sabund=[filename],sabund
Boolean=0
Multiple=0
Numbers=0
String=1
label=|F|none
inputGroupNames=1
LRSS=list-rabund
inputTypes=count-list-rabund
count=F|F|none|none|none|none
list=F|T|LRSS|LRSS|none|sabund
rabund=F|T|LRSS|LRSS|none|sabund
commandName=get.seqs
commandCategory=Sequence Processing
help=The get.seqs command reads an .accnos file and any of the following file types: fasta, name, group, count, list, taxonomy, quality or alignreport file.It outputs a file containing only the sequences in the .accnos file.The get.seqs command parameters are accnos, fasta, name, group, list, taxonomy, qfile, alignreport and dups.  You must provide accnos unless you have a valid current accnos file, and at least one of the other parameters.The dups parameter allows you to add the entire line from a name file if you add any name from the line. default=true. The get.seqs command should be in the following format: get.seqs(accnos=yourAccnos, fasta=yourFasta).Example get.seqs(accnos=amazon.accnos, fasta=amazon.fasta).Note: No spaces between parameter labels (i.e. fasta), '=' and parameters (i.e.yourFasta).
citation=http://www.mothur.org/wiki/Get.seqs
description=gets sequences from a list, fasta, name, group, alignreport, quality or taxonomy file
outputTypesNames=9
accnosreport=[filename],pick.accnos.report
alignreport=[filename],pick.align.report
count=[filename],pick,[extension]
fasta=[filename],pick,[extension]
group=[filename],pick,[extension]
list=[filename],pick,[extension]
name=[filename],pick,[extension]
qfile=[filename],pick,[extension]
taxonomy=[filename],pick,[extension]
Boolean=1
dups=T|F|none
Multiple=0
Numbers=0
String=0
inputGroupNames=3
CountGroup=count-group
FNGLT=alignreport-count-fasta-group-list-name-qfile-taxonomy
NameCount=count-name
inputTypes=accnos-accnos2-alignreport-count-fasta-group-list-name-qfile-taxonomy
accnos=T|T|none|none|none|none
accnos2=F|F|none|none|none|none
alignreport=F|F|none|FNGLT|none|alignreport
count=F|T|NameCount-CountGroup|FNGLT|none|count
fasta=F|T|none|FNGLT|none|fasta
group=F|T|CountGroup|FNGLT|none|group
list=F|T|none|FNGLT|none|list
name=F|T|NameCount|FNGLT|none|name
qfile=F|F|none|FNGLT|none|qfile
taxonomy=F|T|none|FNGLT|none|taxonomy
commandName=get.sharedseqs
commandCategory=OTU-Based Approaches
help=The get.sharedseqs command parameters are list, group, shared, label, uniquegroups, sharedgroups, output and fasta.  The list and group or shared parameters are required, unless you have valid current files.The label parameter allows you to select what distance levels you would like output files for, and are separated by dashes.The uniquegroups and sharedgroups parameters allow you to select groups you would like to know the shared info for, and are separated by dashes.If you enter your groups under the uniquegroups parameter mothur will return the otus that contain ONLY sequences from those groups.If you enter your groups under the sharedgroups parameter mothur will return the otus that contain sequences from those groups and may also contain sequences from other groups.If you do not enter any groups then the get.sharedseqs command will return sequences that are unique to all groups in your group or shared file.The fasta parameter allows you to input a fasta file and outputs a fasta file for each distance level containing only the sequences that are in OTUs shared by the groups specified. It can only be used with a list and group file not the shared file input.The output parameter allows you to output the list of names without the group and bin number added. With this option you can use the names file as an input in get.seqs and remove.seqs commands. To do this enter output=accnos. The get.sharedseqs command outputs a .names file for each distance level containing a list of sequences in the OTUs shared by the groups specified.The get.sharedseqs command should be in the following format: get.sharedseqs(list=yourListFile, group=yourGroupFile, label=yourLabels, uniquegroups=yourGroups, fasta=yourFastafile, output=yourOutput).Example get.sharedseqs(list=amazon.fn.list, label=unique-0.01, group=amazon.groups, uniquegroups=forest-pasture, fasta=amazon.fasta, output=accnos).The output to the screen is the distance and the number of otus at that distance for the groups you specified.The default value for label is all labels in your inputfile. The default for groups is all groups in your file.Note: No spaces between parameter labels (i.e. label), '=' and parameters (i.e.yourLabel).
citation=http://www.mothur.org/wiki/Get.sharedseqs
description=identifies sequences that are either unique or shared by specific groups
outputTypesNames=3
accnos=[filename],[distance],[group],accnos
fasta=[filename],[distance],[group],shared.fasta
sharedseqs=[filename],[distance],[group],shared.seqs
Boolean=0
Multiple=1
output=accnos-default|default|F|F|none
Numbers=0
String=3
label=|F|none
uniquegroups=|T|none
sharedgroups=|T|none
inputGroupNames=3
groupList=group-list
sharedFasta=fasta-shared
sharedList=list-shared
inputTypes=fasta-group-list-shared
fasta=F|F|sharedFasta|none|none|fasta
group=F|T|none|none|groupList|none
list=F|T|sharedList|sharedList|groupList|sharedseq
shared=F|T|sharedList-sharedFasta|sharedList|none|sharedseq
commandName=hcluster
commandCategory=Clustering
help=The hcluster command parameter options are cutoff, precision, method, phylip, column, name, showabund, timing and sorted. Phylip or column and name are required, unless you have valid current files.The phylip and column parameter allow you to enter your distance file, and sorted indicates whether your column distance file is already sorted. The name parameter allows you to enter your name file and is required if your distance file is in column format. The hcluster command should be in the following format: hcluster(column=youDistanceFile, name=yourNameFile, method=yourMethod, cutoff=yourCutoff, precision=yourPrecision) The acceptable hcluster methods are furthest, nearest, weighted and average.
citation=Sun Y, Cai Y, Liu L, Yu F, Farrell ML, Mckendree W, Farmerie W (2009). ESPRIT: estimating species richness using large collections of 16S rRNA pyrosequences. Nucleic Acids Res 37: e76. http://www.mothur.org/wiki/Hcluster
description=cluster your sequences into OTUs using a distance matrix
outputTypesNames=3
list=[filename],[clustertag],list
rabund=[filename],[clustertag],rabund
sabund=[filename],[clustertag],sabund
Boolean=4
hard=T|F|none
sorted=F|F|none
showabund=T|F|none
timing=F|F|none
Multiple=1
method=furthest-nearest-average-weighted|average|F|F|none
Numbers=2
cutoff=10|T|none
precision=100|F|none
String=0
inputGroupNames=2
ColumnName=column-name
PhylipColumn=column-phylip
inputTypes=column-name-phylip
column=F|T|PhylipColumn|PhylipColumn|ColumnName|list-rabund-sabund
name=F|T|none|none|ColumnName|none
phylip=F|T|PhylipColumn|PhylipColumn|none|list-rabund-sabund
commandName=heatmap.bin
commandCategory=OTU-Based Approaches
help=The heatmap.bin command parameters are shared, relabund, list, rabund, sabund, groups, sorted, scale, numotu, fontsize and label.  shared, relabund, list, rabund or sabund is required unless you have a valid current file.The groups parameter allows you to specify which of the groups in your groupfile you would like included in your heatmap.The sorted parameter allows you to order the otus displayed, default=shared, meaning display the shared otus first. Other options for sorted are none, meaning the exact representation of your otus, topotu, meaning the otus with the greatest abundance when totaled across groups, topgroup, meaning the top otus for each group. The scale parameter allows you to choose the range of color your bin information will be displayed with.The numotu parameter allows you to display only the top N otus, by default all the otus are displayed. You could choose to look at the top 10, by setting numotu=10. The default for sorted is topotu when numotu is used.The group names are separated by dashes. The label parameter allows you to select what distance levels you would like a heatmap created for, and are also separated by dashes.The fontsize parameter allows you to adjust the font size of the picture created, default=24.The heatmap.bin command should be in the following format: heatmap.bin(groups=yourGroups, sorted=yourSorted, label=yourLabels).Example heatmap.bin(groups=A-B-C, sorted=none, scale=log10).The default value for groups is all the groups in your groupfile, and all labels in your inputfile will be used.The default value for scale is log10; your other options are log2 and linear.The heatmap.bin command outputs a .svg file for each label you specify.Note: No spaces between parameter labels (i.e. groups), '=' and parameters (i.e.yourGroups).
citation=http://www.mothur.org/wiki/Heatmap.bin
description=generate a heatmap where the color represents the relative abundanceof an OTU
outputTypesNames=1
svg=[filename],svg
Boolean=0
Multiple=2
scale=log10-log2-linear|log10|F|F|none
sorted=none-shared-topotu-topgroup|shared|F|F|none
Numbers=2
numotu=0|F|none
fontsize=24|F|none
String=2
groups=|F|none
label=|F|none
inputGroupNames=1
LRSS=list-rabund-relabund-sabund-shared
inputTypes=list-rabund-relabund-sabund-shared
list=F|T|LRSS|LRSS|none|svg
rabund=F|F|LRSS|LRSS|none|svg
relabund=F|F|LRSS|LRSS|none|svg
sabund=F|F|LRSS|LRSS|none|svg
shared=F|T|LRSS|LRSS|none|svg
commandName=heatmap.sim
commandCategory=OTU-Based Approaches
help=The heatmap.sim command parameters are shared, phylip, column, name, count, groups, calc, fontsize and label.  shared or phylip or column and name are required unless valid current files exist.There are two ways to use the heatmap.sim command. The first is with a shared file, and you may use the groups, label and calc parameter. The groups parameter allows you to specify which of the groups in your groupfile you would like included in your heatmap.The group names are separated by dashes. The label parameter allows you to select what distance levels you would like a heatmap created for, and is also separated by dashes.The fontsize parameter allows you to adjust the font size of the picture created, default=24.The heatmap.sim command should be in the following format: heatmap.sim(groups=yourGroups, calc=yourCalc, label=yourLabels).Example heatmap.sim(groups=A-B-C, calc=jabund).The default value for groups is all the groups in your groupfile, and all labels in your inputfile will be used.The available estimators for calc are braycurtis, jabund, jclass, jest, morisitahorn, sorabund, sorclass, sorest, thetan, thetayc,The default value for calc is jclass-thetayc.The heatmap.sim command outputs a .svg file for each calculator you choose at each label you specify.The second way to use the heatmap.sim command is with a distance file representing the distance bewteen your groups. Using the command this way, the phylip or column parameter are required, and only one may be used.  If you use a column file the name filename is required. The heatmap.sim command should be in the following format: heatmap.sim(phylip=yourDistanceFile).Example heatmap.sim(phylip=amazonGroups.dist).Note: No spaces between parameter labels (i.e. groups), '=' and parameters (i.e.yourGroups).
citation=http://www.mothur.org/wiki/Heatmap.sim
description=generate a heatmap indicating the pairwise distance between multiple samples using a variety of calculators
outputTypesNames=1
svg=[filename],svg
Boolean=0
Multiple=1
calc=jabund-sorabund-jclass-sorclass-jest-sorest-thetayc-thetan-morisitahorn-braycurtis|jest-thetayc|T|F|none
Numbers=1
fontsize=24|F|none
String=2
groups=|F|none
label=|F|none
inputGroupNames=3
ColumnName=column
PhylipColumnShared=column-phylip-shared
namecount=count-name
inputTypes=column-count-name-phylip-shared
column=F|F|PhylipColumnShared|PhylipColumnShared|ColumnName|svg
count=F|F|namecount|none|none|none
name=F|F|namecount|none|none|none
phylip=F|F|PhylipColumnShared|PhylipColumnShared|none|svg
shared=F|T|PhylipColumnShared|PhylipColumnShared|none|svg
commandName=homova
commandCategory=Hypothesis Testing
help=Referenced: Stewart CN, Excoffier L (1996). Assessing population genetic structure and variability with RAPD data: Application to Vaccinium macrocarpon (American Cranberry). J Evol Biol 9: 153-71.The homova command outputs a .homova file. The homova command parameters are phylip, iters, sets and alpha.  The phylip and design parameters are required, unless valid current files exist.The design parameter allows you to assign your samples to groups when you are running homova. It is required. The design file looks like the group file.  It is a 2 column tab delimited file, where the first column is the sample name and the second column is the group the sample belongs to.The sets parameter allows you to specify which of the sets in your designfile you would like to analyze. The set names are separated by dashes. THe default is all sets in the designfile.The iters parameter allows you to set number of randomization for the P value.  The default is 1000. The homova command should be in the following format: homova(phylip=file.dist, design=file.design).Note: No spaces between parameter labels (i.e. iters), '=' and parameters (i.e. 1000).
citation=Stewart CN, Excoffier L (1996). Assessing population genetic structure and variability with RAPD data: Application to Vaccinium macrocarpon (American Cranberry). J Evol Biol 9: 153-71. http://www.mothur.org/wiki/Homova
description=homova
outputTypesNames=1
homova=[filename],homova
Boolean=0
Multiple=0
Numbers=2
iters=1000|F|none
alpha=0.05|F|none
String=1
sets=|F|none
inputGroupNames=0
inputTypes=design-phylip
design=T|T|none|none|none|homova
phylip=T|T|none|none|none|homova
commandName=indicator
commandCategory=Hypothesis Testing
help=The indicator command can be run in 3 ways: with a shared or relabund file and a design file, or with a shared or relabund file and a tree file, or with a shared or relabund file, tree file and design file. The indicator command outputs a .indicator.summary file and a .indicator.tre if a tree is given. The new tree contains labels at each internal node.  The label is the node number so you can relate the tree to the summary file.The summary file lists the indicator value for each OTU for each node.The indicator command parameters are tree, groups, shared, relabund, design and label. The design parameter allows you to relate the tree to the shared or relabund file, if your tree contains the grouping names, or if no tree is provided to group your groups into groupings.The groups parameter allows you to specify which of the groups in your shared or relabund you would like analyzed, or if you provide a design file the groups in your design file.  The groups may be entered separated by dashes.The label parameter indicates at what distance your tree relates to the shared or relabund.The processors parameter allows you to specify how many processors you would like to use.  The default is 1. The iters parameter allows you to set number of randomization for the P value.  The default is 1000.The indicator command should be used in the following format: indicator(tree=test.tre, shared=test.shared, label=0.03)Note: No spaces between parameter labels (i.e. tree), '=' and parameters (i.e.yourTreefile).
citation=Dufrene M, Legendre P (1997). Species assemblages and indicator species: The need for a flexible asymmetrical approach. Ecol Monogr 67: 345-66. McCune B, Grace JB, Urban DL (2002). Analysis of ecological communities. MjM Software Design: Gleneden Beach, OR. Legendre P, Legendre L (1998). Numerical Ecology. Elsevier: New York. http://www.mothur.org/wiki/Indicator
description=calculate the indicator value for each OTU
outputTypesNames=2
summary=[filename],indicator.summary
tree=[filename],indicator.tre
Boolean=0
Multiple=0
Numbers=2
iters=1000|F|none
processors=1|F|none
String=2
groups=|F|none
label=|F|none
inputGroupNames=2
SharedRel=relabund-shared
TreeDesign=design-tree
inputTypes=design-relabund-shared-tree
design=F|T|TreeDesign|TreeDesign|none|summary
relabund=F|F|SharedRel|SharedRel|none|summary
shared=F|T|SharedRel|SharedRel|none|summary
tree=F|T|TreeDesign|TreeDesign|none|tree-summary
commandName=kruskal.wallis
commandCategory=Hypothesis Testing
help=The kruskal.wallis command allows you to ....The kruskal.wallis command parameters are: shared, design, class, label and classes.The class parameter is used to indicate the which category you would like used for the Kruskal Wallis analysis. If none is provided first category is used.The label parameter is used to indicate which distances in the shared file you would like to use. labels are separated by dashes.The kruskal.wallis command should be in the following format: kruskal.wallis(shared=final.an.shared, design=final.design, class=treatment).
citation=http://www.mothur.org/wiki/Kruskal.wallis
description=Non-parametric method for testing whether samples originate from the same distribution.
outputTypesNames=1
kruskall-wallis=[filename],[distance],kruskall_wallis
Boolean=0
Multiple=0
Numbers=0
String=2
class=|F|none
label=|F|none
inputGroupNames=0
inputTypes=design-shared
design=T|T|none|none|none|none
shared=T|T|none|none|none|summary
commandName=lefse
commandCategory=OTU-Based Approaches
help=The lefse command allows you to ....The lefse command parameters are: shared, design, class, subclass, label, walpha, aalpha, lda, wilc, iters, curv, fboots, strict, minc, multiclass and norm.The class parameter is used to indicate the which category you would like used for the Kruskal Wallis analysis. If none is provided first category is used.The subclass parameter is used to indicate the .....If none is provided, second category is used, or if only one category subclass is ignored. The aalpha parameter is used to set the alpha value for the Krukal Wallis Anova test Default=0.05. The walpha parameter is used to set the alpha value for the Wilcoxon test. Default=0.05. The lda parameter is used to set the threshold on the absolute value of the logarithmic LDA score. Default=2.0. The wilc parameter is used to indicate whether to perform the Wilcoxon test. Default=T. The iters parameter is used to set the number of bootstrap iteration for LDA. Default=30. The curv parameter is used to set whether perform the wilcoxon testing the Curtis's approach [BETA VERSION] Default=F. The norm parameter is used to multiply relative abundances by 1000000. Recommended when very low values are present. Default=T. The fboots parameter is used to set the subsampling fraction value for each bootstrap iteration. Default=0.67. The strict parameter is used to set the multiple testing correction options. 0 no correction (more strict, default), 1 correction for independent comparisons, 2 correction for independent comparison. Options = 0,1,2. Default=0. The minc parameter is used to minimum number of samples per subclass for performing wilcoxon test. Default=10. The multiclass parameter is used to (for multiclass tasks) set whether the test is performed in a one-against-one ( onevone - more strict!) or in a one-against-all setting ( onevall - less strict). Default=onevall. The label parameter is used to indicate which distances in the shared file you would like to use. labels are separated by dashes.The lefse command should be in the following format: lefse(shared=final.an.shared, design=final.design, class=treatment, subclass=age).
citation=Segata, N., J. Izard, L. Waldron, D. Gevers, L. Miropolsky, W. S. Garrett, and C. Huttenhower. 2011. Metagenomic biomarker discovery and explanation. Genome Biol 12:R60, http://www.mothur.org/wiki/Lefse
description=brief description
outputTypesNames=1
summary=[filename],[distance],lefse_summary
Boolean=3
wilc=T|F|none
norm=T|F|none
curv=F|F|none
Multiple=2
strict=0-1-2|0|F|F|none
multiclass=onevone-onevall|onevall|F|F|none
Numbers=6
aalpha=0.05|F|none
walpha=0.05|F|none
lda=2.0|F|none
iters=30|F|none
fboots=0.67|F|none
minc=10|F|none
String=3
class=|F|none
subclass=|F|none
label=|F|none
inputGroupNames=0
inputTypes=design-shared
design=T|T|none|none|none|none
shared=T|T|none|none|none|summary
commandName=libshuff
commandCategory=Hypothesis Testing
help=The libshuff command parameters are phylip, group, sim, groups, iters, step, form and cutoff.  phylip and group parameters are required, unless you have valid current files.The groups parameter allows you to specify which of the groups in your groupfile you would like analyzed.  You must enter at least 2 valid groups.The group names are separated by dashes.  The iters parameter allows you to specify how many random matrices you would like compared to your matrix.The step parameter allows you to specify change in distance you would like between each output if you are using the discrete form.The form parameter allows you to specify if you would like to analyze your matrix using the discrete or integral form. Your options are integral or discrete.The libshuff command should be in the following format: libshuff(groups=yourGroups, iters=yourIters, cutOff=yourCutOff, form=yourForm, step=yourStep).Example libshuff(groups=A-B-C, iters=500, form=discrete, step=0.01, cutOff=2.0).The default value for groups is all the groups in your groupfile, iters is 10000, cutoff is 1.0, form is integral and step is 0.01.The libshuff command output two files: .coverage and .slsummary their descriptions are in the manual.Note: No spaces between parameter labels (i.e. iters), '=' and parameters (i.e.yourIters).
citation=Singleton DR, Furlong MA, Rathbun SL, Whitman WB (2001). Quantitative comparisons of 16S rRNA gene sequence libraries from environmental samples. Appl Environ Microbiol 67: 4374-6. Schloss PD, Larget BR, Handelsman J (2004). Integration of microbial ecology and statistics: a test to compare gene libraries. Appl Environ Microbiol 70: 5485-92. http://www.mothur.org/wiki/Libshuff
description=a generic test that describes whether two or more communities have the same structure using the Cramer-von Mises test statistic
outputTypesNames=2
coverage=[filename],libshuff.coverage
libshuffsummary=[filename],libshuff.summary
Boolean=1
sim=F|F|none
Multiple=1
form=discrete-integral|integral|F|F|none
Numbers=3
iters=10000|F|none
step=0.01|F|none
cutoff=1.0|F|none
String=1
groups=|F|none
inputGroupNames=0
inputTypes=group-phylip
group=T|T|none|none|none|none
phylip=T|T|none|none|none|coverage-libshuffsummary
commandName=list.otulabels
commandCategory=OTU-Based Approaches
help=The list.otulabels lists otu labels from shared, relabund or list file. The results can be used by the get.otulabels to select specific otus with the output from classify.otu, otu.association, or corr.axes.The list.otulabels parameters are: shared, relabund, label and groups.The label parameter is used to analyze specific labels in your input.The groups parameter allows you to specify which of the groups you would like analyzed.The list.otulabels commmand should be in the following format: list.otulabels(shared=yourSharedFile, groups=yourGroup1-yourGroup2)
citation=http://www.mothur.org/wiki/List.otulabels
description=lists otu labels from shared or relabund file. Can be used by get.otulabels with output from classify.otu, otu.association, or corr.axes to select specific otus.
outputTypesNames=1
otulabels=[filename],[distance],otulabels
Boolean=0
Multiple=0
Numbers=0
String=2
groups=|F|none
label=|F|none
inputGroupNames=1
SharedRel=list-relabund-shared
inputTypes=list-relabund-shared
list=F|F|SharedRel|SharedRel|none|otulabels
relabund=F|F|SharedRel|SharedRel|none|otulabels
shared=F|T|SharedRel|SharedRel|none|otulabels
commandName=list.seqs
commandCategory=Sequence Processing
help=The list.seqs command reads a fasta, name, group, count, list, taxonomy or alignreport file and outputs a .accnos file containing sequence names.The list.seqs command parameters are fasta, name, group, count, list, taxonomy and alignreport.  You must provide one of these parameters.The list.seqs command should be in the following format: list.seqs(fasta=yourFasta).Example list.seqs(fasta=amazon.fasta).Note: No spaces between parameter labels (i.e. fasta), '=' and parameters (i.e.yourFasta).
citation=http://www.mothur.org/wiki/List.seqs
description=lists sequences from a list, fasta, name, group, alignreport or taxonomy file
outputTypesNames=1
accnos=[filename],accnos
Boolean=0
Multiple=0
Numbers=0
String=0
inputGroupNames=1
FNGLT=alignreport-count-fasta-group-list-name-taxonomy
inputTypes=alignreport-count-fasta-group-list-name-taxonomy
alignreport=F|F|FNGLT|FNGLT|none|accnos
count=F|T|FNGLT|FNGLT|none|accnos
fasta=F|T|FNGLT|FNGLT|none|accnos
group=F|T|FNGLT|FNGLT|none|accnos
list=F|T|FNGLT|FNGLT|none|accnos
name=F|T|FNGLT|FNGLT|none|accnos
taxonomy=F|T|FNGLT|FNGLT|none|accnos
commandName=load.logfile
commandCategory=General
help=The load.logfile command extracts the current file names from a logfile.The load.logfile parameter is logfile, and it is required.The load.logfile command should be in the following format: load.logfile(logfile=yourLogFile)
citation=http://www.mothur.org/wiki/Load.logfile
description=extracts current files from a logfile
outputTypesNames=0
Boolean=0
Multiple=0
Numbers=0
String=0
inputGroupNames=0
inputTypes=logfile
logfile=T|T|none|none|none|none
commandName=make.biom
commandCategory=General
help=The make.biom command parameters are shared, contaxonomy, metadata, groups, matrixtype and label.  shared is required, unless you have a valid current file.The groups parameter allows you to specify which of the groups in your groupfile you would like included. The group names are separated by dashes.The label parameter allows you to select what distance levels you would like, and are also separated by dashes.The matrixtype parameter allows you to select what type you would like to make. Choices are sparse and dense, default is sparse.The contaxonomy file is the taxonomy file outputted by classify.otu(list=yourListfile, taxonomy=yourTaxonomyFile). Be SURE that the you are the constaxonomy file distance matches the shared file distance.  ie, for *.0.03.cons.taxonomy set label=0.03. Mothur is smart enough to handle shared files that have been subsampled. It is used to assign taxonomy information to the metadata of rows.The metadata parameter is used to provide experimental parameters to the columns.  Things like 'sample1 gut human_gut'. The make.biom command should be in the following format: make.biom(shared=yourShared, groups=yourGroups, label=yourLabels).Example make.biom(shared=abrecovery.an.shared, groups=A-B-C).The default value for groups is all the groups in your groupfile, and all labels in your inputfile will be used.The make.biom command outputs a .biom file.Note: No spaces between parameter labels (i.e. groups), '=' and parameters (i.e.yourGroups).
citation=http://biom-format.org/documentation/biom_format.html, http://www.mothur.org/wiki/Make.biom
description=creates a biom file
outputTypesNames=1
biom=[filename],[distance],biom
Boolean=0
Multiple=1
matrixtype=sparse-dense|sparse|F|F|none
Numbers=0
String=2
groups=|F|none
label=|F|none
inputGroupNames=0
inputTypes=constaxonomy-metadata-shared
constaxonomy=F|F|none|none|none|none
metadata=F|F|none|none|none|none
shared=T|T|none|none|none|biom
commandName=make.contigs
commandCategory=Sequence Processing
help=The make.contigs command reads a file, forward fastq file and a reverse fastq file or forward fasta and reverse fasta files and outputs new fasta. If an oligos file is provided barcodes and primers will be trimmed, and a group file will be created.If a forward index or reverse index file is provided barcodes be trimmed, and a group file will be created. The oligos parameter is required if an index file is given.The make.contigs command parameters are file, ffastq, rfastq, ffasta, rfasta, fqfile, rqfile, oligos, findex, rindex, format, tdiffs, bdiffs, pdiffs, align, match, mismatch, gapopen, gapextend, insert, deltaq, allfiles and processors.The ffastq and rfastq, file, or ffasta and rfasta parameters are required.The file parameter is 2, 3 or 4 column file containing the forward fastq files in the first column and their matching reverse fastq files in the second column, or a groupName then forward fastq file and reverse fastq file, or forward fastq file then reverse fastq then forward index and reverse index file.  If you only have one index file add 'none' for the other one.  Mothur will process each pair and create a combined fasta and report file with all the sequences.The ffastq and rfastq parameters are used to provide a forward fastq and reverse fastq file to process.  If you provide one, you must provide the other.The ffasta and rfasta parameters are used to provide a forward fasta and reverse fasta file to process.  If you provide one, you must provide the other.The fqfile and rqfile parameters are used to provide a forward quality and reverse quality files to process with the ffasta and rfasta parameters.  If you provide one, you must provide the other.The format parameter is used to indicate whether your sequences are sanger, solexa, illumina1.8+ or illumina, default=illumina1.8+.The findex and rindex parameters are used to provide a forward index and reverse index files to process.  The align parameter allows you to specify the alignment method to use.  Your options are: gotoh and needleman. The default is needleman.The tdiffs parameter is used to specify the total number of differences allowed in the sequence. The default is pdiffs + bdiffs + sdiffs + ldiffs.The bdiffs parameter is used to specify the number of differences allowed in the barcode. The default is 0.The pdiffs parameter is used to specify the number of differences allowed in the primer. The default is 0.The match parameter allows you to specify the bonus for having the same base. The default is 1.0.The mistmatch parameter allows you to specify the penalty for having different bases.  The default is -1.0.The deltaq parameter allows you to specify the delta allowed between quality scores of a mismatched base.  For example in the overlap, if deltaq=5 and in the alignment seqA, pos 200 has a quality score of 30 and the same position in seqB has a quality score of 20, you take the base from seqA (30-20 >= 5).  If the quality score in seqB is 28 then the base in the consensus will be an N (30-28<5) The default is 6.The gapopen parameter allows you to specify the penalty for opening a gap in an alignment. The default is -2.0.The gapextend parameter allows you to specify the penalty for extending a gap in an alignment.  The default is -1.0.The insert parameter allows you to set a quality scores threshold. In the case where we are trying to decide whether to keep a base or remove it because the base is compared to a gap in the other fragment, if the base has a quality score equal to or below the threshold we eliminate it. Default=20.The processors parameter allows you to specify how many processors you would like to use.  The default is 1. The allfiles parameter will create separate group and fasta file for each grouping. The default is F.The trimoverlap parameter allows you to trim the sequences to only the overlapping section. The default is F.The make.contigs command should be in the following format: make.contigs(ffastq=yourForwardFastqFile, rfastq=yourReverseFastqFile, align=yourAlignmentMethod) Note: No spaces between parameter labels (i.e. ffastq), '=' and parameters (i.e.yourForwardFastqFile).
citation=http://www.mothur.org/wiki/Make.contigs
description=description
outputTypesNames=3
fasta=[filename],[tag],contigs.fasta
group=[filename],[tag],contigs.groups
report=[filename],[tag],contigs.report
Boolean=2
allfiles=F|F|none
trimoverlap=F|F|none
Multiple=2
align=needleman-gotoh|needleman|F|F|none
format=sanger-illumina-solexa-illumina1.8+|illumina1.8+|F|T|none
Numbers=10
pdiffs=0|T|none
bdiffs=0|T|none
tdiffs=0|F|none
match=1.0|F|none
mismatch=-1.0|F|none
gapopen=-2.0|F|none
gapextend=-1.0|F|none
insert=20|F|none
deltaq=6|F|none
processors=1|T|none
String=0
inputGroupNames=4
FastaFastqFile=ffasta-ffastq-file
fastaGroup=ffasta
fastqGroup=ffastq-rfastq
qfileGroup=fqfile-rqfile
inputTypes=ffasta-ffastq-file-findex-fqfile-oligos-rfasta-rfastq-rindex-rqfile
ffasta=F|T|FastaFastqFile|FastaFastqFile|fastaGroup|fasta
ffastq=F|T|FastaFastqFile|FastaFastqFile|fastqGroup|fasta-qfile
file=F|T|FastaFastqFile|FastaFastqFile|none|fasta-qfile
findex=F|T|none|none|none|none
fqfile=F|T|none|none|qfileGroup|none
oligos=F|T|none|none|none|group
rfasta=F|T|none|none|none|fastaGroup
rfastq=F|T|none|none|fastqGroup|fasta-qfile
rindex=F|T|none|none|none|none
rqfile=F|T|none|none|qfileGroup|none
commandName=make.fastq
commandCategory=Sequence Processing
help=The make.fastq command reads a fasta and quality file and creates a fastq file.The make.fastq command parameters are fasta, qfile and format.  fasta and qfile are required.The format parameter is used to indicate whether your sequences are sanger, illumina1.8+ or illumina, default=sanger.The make.fastq command should be in the following format: make.fastq(qfile=yourQualityFile, fasta=yourFasta).Example make.fastq(fasta=amazon.fasta, qfile=amazon.qual).Note: No spaces between parameter labels (i.e. fasta), '=' and parameters (i.e.yourFasta).
citation=http://www.mothur.org/wiki/Make.fastq
description=creates a fastq file from a fasta and quality file
outputTypesNames=1
fastq=[filename],fastq
Boolean=0
Multiple=1
format=sanger-illumina-illumina1.8+|sanger|F|F|none
Numbers=0
String=0
inputGroupNames=0
inputTypes=fasta-qfile
fasta=T|T|none|none|none|fastq
qfile=T|T|none|none|none|fastq
commandName=make.group
commandCategory=General
help=The make.group command reads a fasta file or series of fasta files and creates a groupfile.The make.group command parameters are fasta, groups and output. Fasta and group are required.The output parameter allows you to specify the name of groupfile created. The make.group command should be in the following format: make.group(fasta=yourFastaFiles, groups=yourGroups). Example make.group(fasta=seqs1.fasta-seq2.fasta-seqs3.fasta, groups=A-B-C)Note: No spaces between parameter labels (i.e. fasta), '=' and parameters (i.e.yourFastaFiles).
citation=http://www.mothur.org/wiki/Make.group
description=creates a group file
outputTypesNames=1
group=[filename],groups
Boolean=0
Multiple=0
Numbers=0
String=2
groups=|T|none
output=|F|none
inputGroupNames=0
inputTypes=fasta
fasta=T|T|none|none|none|group
commandName=make.lefse
commandCategory=General
help=The make.lefse command allows you to create a lefse formatted input file from mothur's output files.The make.lefse command parameters are: shared, relabund, constaxonomy, design, scale, groups and label.  The shared or relabund are required.The shared parameter is used to input your shared file, http://www.wiki.mothur.org/wiki/Shared_file.The relabund parameter is used to input your relabund file, http://www.wiki.mothur.org/wiki/Relabund_file.The design parameter is used to input your design file, http://www.wiki.mothur.org/wiki/Design_File.The constaxonomy parameter is used to input your taxonomy file. http://www.wiki.mothur.org/wiki/Constaxonomy_file. The contaxonomy file is the taxonomy file outputted by classify.otu(list=yourListfile, taxonomy=yourTaxonomyFile). Be SURE that the you are the constaxonomy file distance matches the shared file distance.  ie, for *.0.03.cons.taxonomy set label=0.03. Mothur is smart enough to handle shared files that have been subsampled. The scale parameter allows you to select what scale you would like to use to convert your shared file abundances to relative abundances. Choices are totalgroup, totalotu, averagegroup, averageotu, default is totalgroup.The label parameter allows you to select what distance level you would like used, if none is given the first distance is used.The make.lefse command should be in the following format: make.lefse(shared=yourSharedFile)make.lefse(shared=final.an.shared)
citation=http://huttenhower.sph.harvard.edu/galaxy/root?tool_id=lefse_upload http://www.mothur.org/wiki/Make.lefse
description=creates LEfSe input file
outputTypesNames=1
lefse=[filename],[distance],lefse
Boolean=0
Multiple=1
scale=totalgroup-totalotu-averagegroup-averageotu|totalgroup|F|F|none
Numbers=0
String=2
groups=|F|none
label=|F|none
inputGroupNames=1
SharedRel=relabund-shared
inputTypes=constaxonomy-design-relabund-shared
constaxonomy=F|F|none|none|none|none
design=F|T|none|none|none|none
relabund=F|T|SharedRel|SharedRel|none|lefse
shared=F|T|SharedRel|SharedRel|none|lefse
commandName=make.lookup
commandCategory=Sequence Processing
help=The make.lookup command allows you to create custom lookup files for use with shhh.flows.The make.lookup command parameters are: reference, flow, error, barcode, key, threshold and order.The reference file needs to be in the same direction as the flow data and it must start with the forward primer sequence. It is required.The flow parameter is used to provide the flow data. It is required.The error parameter is used to provide the error summary. It is required.The barcode parameter is used to provide the barcode sequence. Default=AACCGTGTC.The key parameter is used to provide the key sequence. Default=TCAG.The threshold parameter is ....Default=10000.The order parameter options are A, B or I.  Default=A. A = TACG and B = TACGTACGTACGATGTAGTCGAGCATCATCTGACGCAGTACGTGCATGATCTCAGTCAGCAGCTATGTCAGTGCATGCAGTGACTGATCGTCATCAGCTAGCATCGACTGCATAGATCGCATGACGATCGCATATCGTCAGTGCATGTAGTCGAGCATCATCTGACGCAGTACGTGCATGATCTCAGTCAGCAGCTATGTCAGTGCATGCATAGATCGCATGACGATCGCATATCGTCAGTGCAGTGACTGATCGTCATCAGCTAGCATCGACTGCATGTAGTCGAGCATCATCTGACGCAGTACGTGCATAGATCGCATGACGATCGCATATCGTCAGTGCATGATCTCAGTCAGCAGCTATGTCAGTGCATGCAGTGACTGATCGTCATCAGCTAGCATCGACTGCATGTAGTCGAGCATCATCTGACGCAGTACGTGCAGTGACTGATCGTCATCAGCTAGCATCGACTGCATAGATCGCATGACGATCGCATATCGTCAGTGCATGATCTCAGTCAGCAGCTATGTCAGTGCATGCATGTAGTCGAGCATCATCTGACGCAGTACGTGCATAGATCGCATGACGATCGCATATCGTCAGTGCAGTGACTGATCGTCATCAGCTAGCATCGACTGCATGATCTCAGTCAGCAGCTATGTCAGTGCATGCAGTGACTGATCGTCATCAGCTAGCATCGACTGCATAGATCGCATGACGATCGCATATCGTCAGTGCATGATCTCAGTCAGCAGCTATGTCAGTGCATGCATGTAGTCGAGCATCATCTGACGCAGTACGTGCATAGATCGCATGACGATCGCATATCGTCAGTGCATGATCTCAGTCAGCAGCTATGTCAGTGCATGCAGTGACTGATCGTCATCAGCTAGCATCGACTGCATGTAGTCGAGCATCATCTGACGCAGTACGTGCATGATCTCAGTCAGCAGCTATGTCAGTGCATGCATAGATCGCATGACGATCGCATATCGTCAGTGCATGTAGTCGAGCATCATCTGACGCAGTACGTGCAGTGACTGATCGTCATCAGCTAGCATCGACTGCATAGATCGCATGACGATCGCATATCGTCAGTGCATGTAGTCGAGCATCATCTGACGCAGTACGTGCATGATCTCAGTCAGCAGCTATGTCAGTGCATGCAGTGACTGATCGTCATCAGCTAGCATCGACTGCATGATCTCAGTCAGCAGCTATGTCAGTGCATGCAGTGACTGATCGTCATCAGCTAGCATCGACTGCATAGATCGCATGACGATCGCATATCGTCAGTGCATGTAGTCGAGCATCATCTGACGCAGTACGTGCATGATCTCAGTCAGCAGCTATGTCAGTGCATGCATGTAGTCGAGCATCATCTGACGCAGTACGTGCAGTGACTGATCGTCATCAGCTAGCATCGACTGCATAGATCGCATGACGATCGCATATCGTCAGTGCAGTGACTGATCGTCATCAGCTAGCATCGACTGCATGTAGTCGAGCATCATCTGACGCAGTACGTGCATAGATCGCATGACGATCGCATATCGTCAGTGCATGATCTCAGTCAGCAGCTATGTCAGTGCATGCAGTGACTGATCGTCATCAGCTAGCATCGACTGCATGTAGTCGAGCATCATCTGACGCAGTACGTGCATGATCTCAGTCAGCAGCTATGTCAGTGCATGCATAGATCGCATGACGATCGCATATCGTCAGTGCAGTGACTGATCGTCATCAGCTAGCATCGACTGCATGATCTCAGTCAGCAGC and I = TACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGC.The make.lookup should be in the following format: make.lookup(reference=HMP_MOCK.v53.fasta, flow=H3YD4Z101.mock3.flow_450.flow, error=H3YD4Z101.mock3.flow_450.error.summary, barcode=AACCTGGC)new(...)
citation=Quince, C., A. Lanzén, T. P. Curtis, R. J. Davenport, N. Hall, I. M. Head, L. F. Read, and W. T. Sloan. 2009. Accurate determination of microbial diversity from 454 pyrosequencing data. Nat Methods 6:639-41. http://www.mothur.org/wiki/Make.lookup
description=Creates a lookup file for use with shhh.flows using user-supplied mock community data and flow grams
outputTypesNames=1
lookup=[filename],lookup
Boolean=0
Multiple=1
order=A-B-I|A|F|T|none
Numbers=1
threshold=10000|F|none
String=2
barcode=AACCGTGTC|F|none
key=TCAG|F|none
inputGroupNames=0
inputTypes=error-flow-reference
error=T|T|none|none|none|none
flow=T|T|none|none|none|lookup
reference=T|T|none|none|none|none
commandName=make.shared
commandCategory=OTU-Based Approaches
help=The make.shared command reads a list and group file or a biom file and creates a shared file. If a list and group are provided a rabund file is created for each group.The make.shared command parameters are list, group, biom, groups, count and label. list and group or count are required unless a current file is available or you provide a biom file.The count parameter allows you to provide a count file containing the group info for the list file.The groups parameter allows you to indicate which groups you want to include, group names should be separated by dashes. ex. groups=A-B-C. Default is all groups in your groupfile.The label parameter is only valid with the list and group option and allows you to indicate which labels you want to include, label names should be separated by dashes. Default is all labels in your list file.
citation=http://www.mothur.org/wiki/Make.shared
description=make a shared file from a list and group file
outputTypesNames=3
group=[filename],[group],groups
rabund=[filename],[group],rabund
shared=[filename],shared
Boolean=0
Multiple=0
Numbers=0
String=2
label=|F|none
groups=|F|group
inputGroupNames=3
BiomListGroup=biom-list
GroupCount=count-group
ListGroup=group-list
inputTypes=biom-count-group-list
biom=F|F|BiomListGroup|BiomListGroup|none|shared
count=F|F|none|GroupCount|none|none
group=F|T|none|GroupCount|ListGroup|none
list=F|T|BiomListGroup|BiomListGroup|ListGroup|shared
commandName=count.seqs
commandCategory=Sequence Processing
help=The count.seqs aka. make.table command reads a name file and outputs a .count_table file.  You may also provide a group file to get the counts broken down by group.The groups parameter allows you to indicate which groups you want to include in the counts, by default all groups in your groupfile are used.The large parameter indicates the name and group files are too large to fit in RAM.When you use the groups parameter and a sequence does not represent any sequences from the groups you specify it is not included in the .count.summary file.The processors parameter allows you to specify the number of processors to use. The default is 1.The count.seqs command should be in the following format: count.seqs(name=yourNameFile).Example count.seqs(name=amazon.names) or make.table(name=amazon.names).Note: No spaces between parameter labels (i.e. name), '=' and parameters (i.e.yourNameFile).
citation=http://www.mothur.org/wiki/Count.seqs
description=counts the number of sequences represented by each unique sequence in a namesfile
outputTypesNames=1
count=[filename],count_table
Boolean=1
large=F|F|none
Multiple=0
Numbers=1
processors=1|T|none
String=1
groups=|F|none
inputGroupNames=0
inputTypes=group-name
group=F|T|none|none|none|none
name=T|T|none|none|none|count
commandName=mantel
commandCategory=Hypothesis Testing
help=Sokal, R. R., & Rohlf, F. J. (1995). Biometry, 3rd edn. New York: Freeman.The mantel command reads two distance matrices and calculates the mantel correlation coefficient.The mantel command parameters are phylip1, phylip2, iters and method.  The phylip1 and phylip2 parameters are required.  Matrices must be the same size and contain the same names.The method parameter allows you to select what method you would like to use. Options are pearson, spearman and kendall. Default=pearson.The iters parameter allows you to set number of randomization for the P value.  The default is 1000. The mantel command should be in the following format: mantel(phylip1=veg.dist, phylip2=env.dist).The mantel command outputs a .mantel file.Note: No spaces between parameter labels (i.e. phylip1), '=' and parameters (i.e. veg.dist).
citation=McCune B, Grace JB, Urban DL (2002). Analysis of ecological communities. MjM Software Design: Gleneden Beach, OR. Legendre P, Legendre L (1998). Numerical Ecology. Elsevier: New York. http://www.mothur.org/wiki/Mantel
description=Mantel’s test for correlation between matrices
outputTypesNames=1
mantel=[filename],mantel
Boolean=0
Multiple=1
method=pearson-spearman-kendall|pearson|F|F|none
Numbers=1
iters=1000|F|none
String=0
inputGroupNames=0
inputTypes=phylip1-phylip2
phylip1=T|T|none|none|none|mantel
phylip2=T|T|none|none|none|mantel
commandName=merge.files
commandCategory=General
help=The merge.file command takes a list of files separated by dashes and merges them into one file.The merge.file command parameters are input and output.Example merge.file(input=small.fasta-large.fasta, output=all.fasta).Note: No spaces between parameter labels (i.e. output), '=' and parameters (i.e.yourOutputFileName).
citation=http://www.mothur.org/wiki/Merge.files
description=appends files creating one file
outputTypesNames=1
merge=
Boolean=0
Multiple=0
Numbers=0
String=2
input=|T|none
output=|T|none
inputGroupNames=0
inputTypes=
commandName=merge.groups
commandCategory=General
help=The merge.groups command reads a shared or group file and a design file and merges the groups that are in the same grouping in the design file.The merge.groups command outputs a .shared file. The merge.groups command parameters are shared, group, groups, label and design.  The design parameter is required.The design parameter allows you to assign your groups to sets. It is required. The design file looks like the group file.  It is a 2 column tab delimited file, where the first column is the group name and the second column is the set the group belongs to.The groups parameter allows you to specify which of the groups in your shared or group file you would like included. The group names are separated by dashes.The label parameter allows you to select what distance levels you would like, and are also separated by dashes.The merge.groups command should be in the following format: merge.groups(design=yourDesignFile, shared=yourSharedFile).Example merge.groups(design=temp.design, groups=A-B-C, shared=temp.shared).The default value for groups is all the groups in your sharedfile, and all labels in your inputfile will be used.Note: No spaces between parameter labels (i.e. groups), '=' and parameters (i.e.yourGroups).
citation=http://www.mothur.org/wiki/Merge.groups
description=reads shared file and a design file and merges the groups in the shared file that are in the same grouping in the design file
outputTypesNames=2
group=[filename],merge,[extension]
shared=[filename],merge,[extension]
Boolean=0
Multiple=0
Numbers=0
String=2
label=|F|none
groups=|F|none
inputGroupNames=1
sharedGroup=group-shared
inputTypes=design-group-shared
design=T|T|none|none|none|none
group=F|T|none|sharedGroup|none|group
shared=F|T|none|sharedGroup|none|shared
commandName=merge.taxsummary
commandCategory=Phylotype Analysis
help=The merge.taxsummary command takes a list of tax.summary files separated by dashes and merges them into one file.The merge.taxsummary command parameters are input and output.Example merge.taxsummary(input=small.tax.summary-large.tax.summary, output=all.tax.summary).Note: No spaces between parameter labels (i.e. output), '=' and parameters (i.e.yourOutputFileName).
citation=http://www.mothur.org/wiki/Merge.taxsummary
description=merges tax summary files creating one file
outputTypesNames=1
taxsummary=
Boolean=0
Multiple=0
Numbers=0
String=2
input=|T|none
output=|T|none
inputGroupNames=0
inputTypes=
commandName=metastats
commandCategory=OTU-Based Approaches
help=This command is based on the Metastats program, White, J.R., Nagarajan, N. & Pop, M. Statistical methods for detecting differentially abundant features in clinical metagenomic samples. PLoS Comput Biol 5, e1000352 (2009).The metastats command outputs a .metastats file. The metastats command parameters are shared, iters, threshold, groups, label, design, sets and processors.  The shared and design parameters are required, unless you have valid current files.The design parameter allows you to assign your groups to sets when you are running metastat. mothur will run all pairwise comparisons of the sets. It is required. The design file looks like the group file.  It is a 2 column tab delimited file, where the first column is the group name and the second column is the set the group belongs to.The sets parameter allows you to specify which of the sets in your designfile you would like to analyze. The set names are separated by dashes. THe default is all sets in the designfile.The iters parameter allows you to set number of bootstrap permutations for estimating null distribution of t statistic.  The default is 1000. The threshold parameter allows you to set the significance level to reject null hypotheses (default 0.05).The groups parameter allows you to specify which of the groups in your groupfile you would like included. The group names are separated by dashes.The label parameter allows you to select what distance levels you would like, and are also separated by dashes.The processors parameter allows you to specify how many processors you would like to use.  The default is 1. The metastats command should be in the following format: metastats(design=yourDesignFile).Example metastats(design=temp.design, groups=A-B-C).The default value for groups is all the groups in your groupfile, and all labels in your inputfile will be used.Note: No spaces between parameter labels (i.e. groups), '=' and parameters (i.e.yourGroups).
citation=White JR, Nagarajan N, Pop M (2009). Statistical methods for detecting differentially abundant features in clinical metagenomic samples. PLoS Comput Biol 5: e1000352. http://www.mothur.org/wiki/Metastats
description=detects differentially abundant features in clinical metagenomic samples
outputTypesNames=1
metastats=[filename],[distance],[group],metastats
Boolean=0
Multiple=0
Numbers=3
processors=1|T|none
iters=1000|F|none
threshold=0.05|F|none
String=3
label=|F|none
groups=|F|none
sets=|F|none
inputGroupNames=0
inputTypes=design-shared
design=T|T|none|none|none|none
shared=T|T|none|none|none|metastats
commandName=mgcluster
commandCategory=Clustering
help=The mgcluster command parameter options are blast, name, cutoff, precision, hard,  method, merge, min, length, penalty, adjust and hcluster. The blast parameter is required.The mgcluster command reads a blast and name file and clusters the sequences into OPF units similiar to the OTUs.This command outputs a .list, .rabund and .sabund file that can be used with mothur other commands to estimate richness.The cutoff parameter is used to specify the maximum distance you would like to cluster to. The default is 0.70.The precision parameter's default value is 100. The acceptable mgcluster methods are furthest, nearest and average.  If no method is provided then average is assumed.The min parameter allows you to specify is you want the minimum or maximum blast score ratio used in calculating the distance. The default is true, meaning you want the minimum.The length parameter is used to specify the minimum overlap required.  The default is 5.The adjust parameter is used to handle missing distances.  If you set a cutoff, adjust=f by default.  If not, adjust=t by default. Adjust=f, means ignore missing distances and adjust cutoff as needed with the average neighbor method.  Adjust=t, will treat missing distances as 1.0. You can also set the value the missing distances should be set to, adjust=0.5 would give missing distances a value of 0.5.The penalty parameter is used to adjust the error rate.  The default is 0.10.The merge parameter allows you to shut off merging based on overlaps and just cluster.  By default merge is true, meaning you want to merge.The hcluster parameter allows you to use the hcluster algorithm when clustering.  This may be neccessary if your file is too large to fit into RAM. The default is false.The mgcluster command should be in the following format: mgcluster(blast=yourBlastfile, name=yourNameFile, cutoff=yourCutOff).Note: No spaces between parameter labels (i.e. balst), '=' and parameters (i.e.yourBlastfile).
citation=Schloss PD, Handelsman J (2008). A statistical toolbox for metagenomics. BMC Bioinformatics 9: 34. http://www.mothur.org/wiki/Mgcluster
description=cluster your sequences into OTUs using a blast file
outputTypesNames=3
list=[filename],[clustertag],list-[filename],[clustertag],[tag2],list
rabund=[filename],[clustertag],rabund
sabund=[filename],[clustertag],sabund
Boolean=4
hard=T|F|none
min=T|F|none
merge=T|F|none
hcluster=F|F|none
Multiple=1
method=furthest-nearest-average|average|F|F|none
Numbers=4
length=5|F|none
penalty=0.10|F|none
cutoff=0.70|T|none
precision=100|F|none
String=1
adjust=F|F|none
inputGroupNames=2
ColumnName=name
NameCount=count-name
inputTypes=blast-count-name
blast=T|T|none|none|none|list
count=F|T|NameCount|none|none|none
name=F|T|NameCount|none|ColumnName|rabund-sabund
commandName=nmds
commandCategory=Hypothesis Testing
help=The nmds command is modelled after the nmds code written in R by Sarah Goslee, using Non-metric multidimensional scaling function using the majorization algorithm from Borg & Groenen 1997, Modern Multidimensional Scaling.The nmds command parameters are phylip, axes, mindim, maxdim, maxiters, iters and epsilon.The phylip parameter allows you to enter your distance file.The axes parameter allows you to enter a file containing a starting configuration.The maxdim parameter allows you to select the maximum dimensions to use. Default=2The mindim parameter allows you to select the minimum dimensions to use. Default=2The maxiters parameter allows you to select the maximum number of iters to try with each random configuration. Default=500The iters parameter allows you to select the number of random configuration to try. Default=10The epsilon parameter allows you to select set an acceptable stopping point. Default=1e-12.Example nmds(phylip=yourDistanceFile).Note: No spaces between parameter labels (i.e. phylip), '=' and parameters (i.e.yourDistanceFile).
citation=Borg, Groenen (1997). Non-metric multidimensional scaling function using the majorization algorithm, in Modern Multidimensional Scaling. Ed. T.F. Cox and M.A.A. Cox. Chapman and Hall. http://www.mothur.org/wiki/Nmds
description=nmds
outputTypesNames=3
iters=[filename],nmds.iters
nmds=[filename],nmds.axes
stress=[filename],nmds.stress
Boolean=0
Multiple=0
Numbers=5
maxdim=2|F|none
mindim=2|F|none
iters=10|F|none
maxiters=500|F|none
epsilon=0.000000000001|F|none
String=0
inputGroupNames=0
inputTypes=axes-phylip
axes=F|T|none|none|none|none
phylip=T|T|none|none|none|nmds-stress
commandName=normalize.shared
commandCategory=OTU-Based Approaches
help=The normalize.shared command parameters are shared, relabund, groups, method, norm, makerelabund and label.  shared or relabund is required, unless you have a valid current file.The groups parameter allows you to specify which of the groups in your groupfile you would like included. The group names are separated by dashes.The label parameter allows you to select what distance levels you would like, and are also separated by dashes.The method parameter allows you to select what method you would like to use to normalize. The options are totalgroup and zscore. We hope to add more ways to normalize in the future, suggestions are welcome!The makerelabund parameter allows you to convert a shared file to a relabund file before you normalize. default=f.The norm parameter allows you to number you would like to normalize to. By default this is set to the number of sequences in your smallest group.The normalize.shared command should be in the following format: normalize.shared(groups=yourGroups, label=yourLabels).Example normalize.shared(groups=A-B-C, scale=totalgroup).The default value for groups is all the groups in your groupfile, and all labels in your inputfile will be used.The normalize.shared command outputs a .norm.shared file.Note: No spaces between parameter labels (i.e. groups), '=' and parameters (i.e.yourGroups).
citation=http://www.mothur.org/wiki/Normalize.shared
description=normalize samples in a shared or relabund file
outputTypesNames=1
shared=[filename],[distance],norm.shared
Boolean=1
makerelabund=F|F|none
Multiple=1
method=totalgroup-zscore|totalgroup|F|T|none
Numbers=1
norm=0|F|none
String=2
groups=|F|none
label=|F|none
inputGroupNames=1
LRSS=relabund-shared
inputTypes=relabund-shared
relabund=F|T|LRSS|LRSS|none|shared
shared=F|T|LRSS|LRSS|none|shared
commandName=otu.association
commandCategory=Hypothesis Testing
help=The otu.association command reads a shared or relabund file and calculates the correlation coefficients between otus.If you provide a metadata file, mothur will calculate te correlation bewteen the metadata and the otus.The otu.association command parameters are shared, relabund, metadata, groups, method, cutoff and label.  The shared or relabund parameter is required.The groups parameter allows you to specify which of the groups you would like included. The group names are separated by dashes.The label parameter allows you to select what distances level you would like used, and are also separated by dashes.The cutoff parameter allows you to set a pvalue at which the otu will be reported.The method parameter allows you to select what method you would like to use. Options are pearson, spearman and kendall. Default=pearson.The otu.association command should be in the following format: otu.association(shared=yourSharedFile, method=yourMethod).Example otu.association(shared=genus.pool.shared, method=kendall).The otu.association command outputs a .otu.corr file.Note: No spaces between parameter labels (i.e. groups), '=' and parameters (i.e.yourGroups).
citation=http://www.mothur.org/wiki/Otu.association
description=calculate the correlation coefficient for the otus in a shared/relabund file
outputTypesNames=1
otucorr=[filename],[distance],[tag],otu.corr
Boolean=0
Multiple=1
method=pearson-spearman-kendall|pearson|F|T|none
Numbers=1
cutoff=10|T|none
String=2
label=|F|none
groups=|F|none
inputGroupNames=1
SharedRelMeta=relabund-shared
inputTypes=metadata-relabund-shared
metadata=F|F|none|none|none|none
relabund=F|F|SharedRelMeta|SharedRelMeta|none|otucorr
shared=F|T|SharedRelMeta|SharedRelMeta|none|otucorr
commandName=otu.hierarchy
commandCategory=OTU-Based Approaches
help=The otu.hierarchy command is used to see how otus relate at two distances. The otu.hierarchy command parameters are list, label and output.  list and label parameters are required. The output parameter allows you to output the names of the sequence in the OTUs or the OTU numbers. Options are name and number, default is name. The otu.hierarchy command should be in the following format: otu.hierarchy(list=yourListFile, label=yourLabels).Example otu.hierarchy(list=amazon.fn.list, label=0.01-0.03).The otu.hierarchy command outputs a .otu.hierarchy file which is described on the wiki.Note: No spaces between parameter labels (i.e. list), '=' and parameters (i.e.yourListFile).
citation=http://www.mothur.org/wiki/Otu.hierarchy
description=relates OTUs at different distances
outputTypesNames=1
otuheirarchy=[filename],[distance1],[tag],[distance2],otu.hierarchy
Boolean=0
Multiple=1
output=name-number|name|F|F|none
Numbers=0
String=1
label=|F|none
inputGroupNames=0
inputTypes=list
list=T|T|none|none|none|otuheirarchy
commandName=pairwise.seqs
commandCategory=Sequence Processing
help=The pairwise.seqs command reads a fasta file and creates distance matrix.The pairwise.seqs command parameters are fasta, align, match, mismatch, gapopen, gapextend, calc, output, cutoff and processors.The fasta parameter is required. You may enter multiple fasta files by separating their names with dashes. ie. fasta=abrecovery.fasta-amzon.fasta The align parameter allows you to specify the alignment method to use.  Your options are: gotoh, needleman, blast and noalign. The default is needleman.The match parameter allows you to specify the bonus for having the same base. The default is 1.0.The mistmatch parameter allows you to specify the penalty for having different bases.  The default is -1.0.The gapopen parameter allows you to specify the penalty for opening a gap in an alignment. The default is -2.0.The gapextend parameter allows you to specify the penalty for extending a gap in an alignment.  The default is -1.0.The calc parameter allows you to specify the method of calculating the distances.  Your options are: nogaps, onegap or eachgap. The default is onegap.The countends parameter allows you to specify whether to include terminal gaps in distance.  Your options are: T or F. The default is T.The cutoff parameter allows you to specify maximum distance to keep. The default is 1.0.The output parameter allows you to specify format of your distance matrix. Options are column, lt, and square. The default is column.The compress parameter allows you to indicate that you want the resulting distance file compressed.  The default is false.The pairwise.seqs command should be in the following format: pairwise.seqs(fasta=yourfastaFile, align=yourAlignmentMethod) Example pairwise.seqs(fasta=candidate.fasta, align=blast)Note: No spaces between parameter labels (i.e. fasta), '=' and parameters (i.e.yourFastaFile).
citation=Needleman SB, Wunsch CD (1970). A general method applicable to the search for similarities in the amino acid sequence of two proteins. J Mol Biol 48: 443-53. [ for needleman ]Gotoh O (1982). An improved algorithm for matching biological sequences. J Mol Biol 162: 705-8. [ for gotoh ] http://www.mothur.org/wiki/Pairwise.seqs
description=calculates pairwise distances from an unaligned fasta file
outputTypesNames=2
column=[filename],dist
phylip=[filename],[outputtag],dist
Boolean=2
countends=T|F|none
compress=F|F|none
Multiple=3
align=needleman-gotoh-blast-noalign|needleman|F|F|none
output=column-lt-square-phylip|column|F|T|phylip-column
calc=nogaps-eachgap-onegap|onegap|F|F|none
Numbers=6
match=1.0|F|none
mismatch=-1.0|F|none
gapopen=-2.0|F|none
gapextend=-1.0|F|none
processors=1|T|none
cutoff=1.0|T|none
String=0
inputGroupNames=0
inputTypes=fasta
fasta=T|T|none|none|none|phylip-column
commandName=parse.list
commandCategory=OTU-Based Approaches
help=The parse.list command reads a list and group or count file and generates a list file for each group in the group or count file. The parse.list command parameters are list, group, count and label.The list and group or count parameters are required.If a count file is provided, mothur assumes the list file contains only unique names.If a group file is provided, mothur assumes the list file contains all names.The label parameter is used to read specific labels in your input you want to use.The parse.list command should be used in the following format: parse.list(list=yourListFile, group=yourGroupFile, label=yourLabels).Example: parse.list(list=abrecovery.fn.list, group=abrecovery.groups, label=0.03).Note: No spaces between parameter labels (i.e. list), '=' and parameters (i.e.yourListfile).
citation=http://www.mothur.org/wiki/Parse.list
description=parses a list file by group
outputTypesNames=1
list=[filename],[group],list
Boolean=0
Multiple=0
Numbers=0
String=1
label=|F|none
inputGroupNames=1
CountGroup=count-group
inputTypes=count-group-list
count=F|T|CountGroup|CountGroup|none|none
group=F|T|CountGroup|CountGroup|none|none
list=T|T|none|none|none|list
commandName=parsimony
commandCategory=Hypothesis Testing
help=The parsimony command parameters are tree, group, name, count, random, groups, processors and iters.  tree parameter is required unless you have valid current tree file or are using random.The groups parameter allows you to specify which of the groups in your groupfile you would like analyzed.  You must enter at least 1 valid group.The group names are separated by dashes.  The iters parameter allows you to specify how many random trees you would like compared to your tree.The parsimony command should be in the following format: parsimony(random=yourOutputFilename, groups=yourGroups, iters=yourIters).The processors parameter allows you to specify the number of processors to use. The default is 1.Example parsimony(random=out, iters=500).The default value for random is  (meaning you want to use the trees in your inputfile, randomtree=out means you just want the random distribution of trees outputted to out.rd_parsimony),and iters is 1000.  The parsimony command output two files: .parsimony and .psummary their descriptions are in the manual.Note: No spaces between parameter labels (i.e. random), '=' and parameters (i.e.yourOutputFilename).
citation=Slatkin M, Maddison WP (1989). A cladistic measure of gene flow inferred from the phylogenies of alleles. Genetics 123: 603-13. Slatkin M, Maddison WP (1990). Detecting isolation by distance using phylogenies of genes. Genetics 126: 249-60. Martin AP (2002). Phylogenetic approaches for describing and comparing the diversity of microbial communities. Appl Environ Microbiol 68: 3673-82. Schloss PD, Handelsman J (2006). Introducing TreeClimber, a test to compare microbial community structure. Appl Environ Microbiol 72: 2379-84.http://www.mothur.org/wiki/Parsimony
description=generic test that describes whether two or more communities have the same structure
outputTypesNames=2
parsimony=[filename],parsimony
psummary=[filename],psummary
Boolean=0
Multiple=0
Numbers=2
iters=1000|F|none
processors=1|T|none
String=2
groups=|F|none
random=|F|none
inputGroupNames=2
CountGroup=count-group
NameCount=count-name
inputTypes=count-group-name-tree
count=F|T|NameCount-CountGroup|none|none|none
group=F|T|CountGroup|none|none|none
name=F|T|NameCount|none|none|none
tree=T|T|none|none|none|parsimony-psummary
commandName=pca
commandCategory=Hypothesis Testing
help=The pca command parameters are shared, relabund, label, groups and metric.  shared or relabund is required unless you have a valid current file.The label parameter is used to analyze specific labels in your input. Default is the first label in your shared or relabund file. Multiple labels may be separated by dashes.The groups parameter allows you to specify which groups you would like analyzed. Groupnames are separated by dashes.The metric parameter allows you to indicate if would like the pearson correlation coefficient calculated. Default=TrueExample pca(groups=yourGroups).Example pca(groups=A-B-C).Note: No spaces between parameter labels (i.e. groups), '=' and parameters (i.e.yourGroups).
citation=McCune B, Grace JB, Urban DL (2002). Analysis of ecological communities. MjM Software Design: Gleneden Beach, OR. Legendre P, Legendre L (1998). Numerical Ecology. Elsevier: New York. http://www.mothur.org/wiki/Pca
description=pca
outputTypesNames=2
loadings=[filename],[distance],pca.loadings
pca=[filename],[distance],pca.axes
Boolean=1
metric=T|F|none
Multiple=0
Numbers=0
String=2
groups=|F|none
label=|F|none
inputGroupNames=1
LRSS=relabund-shared
inputTypes=relabund-shared
relabund=F|T|LRSS|LRSS|none|pca-loadings
shared=F|T|LRSS|LRSS|none|pca-loadings
commandName=pcoa
commandCategory=Hypothesis Testing
help=The pcoa command parameters are phylip and metricThe phylip parameter allows you to enter your distance file.The metric parameter allows indicate you if would like the pearson correlation coefficient calculated. Default=TrueExample pcoa(phylip=yourDistanceFile).Note: No spaces between parameter labels (i.e. phylip), '=' and parameters (i.e.yourDistanceFile).
citation=McCune B, Grace JB, Urban DL (2002). Analysis of ecological communities. MjM Software Design: Gleneden Beach, OR. Legendre P, Legendre L (1998). Numerical Ecology. Elsevier: New York. http://www.mothur.org/wiki/Pcoa
description=pcoa
outputTypesNames=2
loadings=[filename],pcoa.loadings
pcoa=[filename],pcoa.axes
Boolean=1
metric=T|F|none
Multiple=0
Numbers=0
String=0
inputGroupNames=0
inputTypes=phylip
phylip=T|T|none|none|none|pcoa-loadings
commandName=pcr.seqs
commandCategory=Sequence Processing
help=The pcr.seqs command reads a fasta file.The pcr.seqs command parameters are fasta, oligos, name, group, count, taxonomy, ecoli, start, end, nomatch, pdiffs, processors, keepprimer and keepdots.The ecoli parameter is used to provide a fasta file containing a single reference sequence (e.g. for e. coli) this must be aligned. Mothur will trim to the start and end positions of the reference sequence.The start parameter allows you to provide a starting position to trim to.The end parameter allows you to provide a ending position to trim from.The nomatch parameter allows you to decide what to do with sequences where the primer is not found. Default=reject, meaning remove from fasta file.  if nomatch=true, then do nothing to sequence.The processors parameter allows you to use multiple processors.The keepprimer parameter allows you to keep the primer, default=false.The keepdots parameter allows you to keep the leading and trailing .'s, default=true.The pdiffs parameter is used to specify the number of differences allowed in the primer. The default is 0.Note: No spaces between parameter labels (i.e. fasta), '=' and parameters (i.e.yourFasta).For more details please check out the wiki http://www.mothur.org/wiki/Pcr.seqs .
citation=http://www.mothur.org/wiki/Pcr.seqs
description=pcr.seqs
outputTypesNames=6
accnos=[filename],bad.accnos
count=[filename],pcr,[extension]
fasta=[filename],pcr,[extension]-[filename],[tag],pcr,[extension]
group=[filename],pcr,[extension]
name=[filename],pcr,[extension]
taxonomy=[filename],pcr,[extension]
Boolean=2
keepprimer=F|F|none
keepdots=T|F|none
Multiple=1
nomatch=reject-keep|reject|F|F|none
Numbers=4
start=-1|F|none
end=-1|F|none
pdiffs=0|T|none
processors=1|T|none
String=0
inputGroupNames=3
CountGroup=count-group
NameCount=count-name
ecolioligos=ecoli-oligos
inputTypes=count-ecoli-fasta-group-name-oligos-taxonomy
count=F|T|NameCount-CountGroup|none|none|count
ecoli=F|F|ecolioligos|none|none|none
fasta=T|T|none|none|none|fasta
group=F|T|CountGroup|none|none|group
name=F|T|NameCount|none|none|name
oligos=F|T|ecolioligos|none|none|none
taxonomy=F|T|none|none|none|taxonomy
commandName=phylo.diversity
commandCategory=Hypothesis Testing
help=The phylo.diversity command parameters are tree, group, name, count, groups, iters, freq, processors, scale, rarefy, collect and summary.  tree and group are required, unless you have valid current files.The groups parameter allows you to specify which of the groups in your groupfile you would like analyzed. The group names are separated by dashes. By default all groups are used.The iters parameter allows you to specify the number of randomizations to preform, by default iters=1000, if you set rarefy to true.The freq parameter is used indicate when to output your data, by default it is set to 100. But you can set it to a percentage of the number of sequence. For example freq=0.10, means 10%. The scale parameter is used indicate that you want your output scaled to the number of sequences sampled, default = false. The rarefy parameter allows you to create a rarefaction curve. The default is false.The collect parameter allows you to create a collectors curve. The default is false.The summary parameter allows you to create a .summary file. The default is true.The processors parameter allows you to specify the number of processors to use. The default is 1.The phylo.diversity command should be in the following format: phylo.diversity(groups=yourGroups, rarefy=yourRarefy, iters=yourIters).Example phylo.diversity(groups=A-B-C, rarefy=T, iters=500).The phylo.diversity command output two files: .phylo.diversity and if rarefy=T, .rarefaction.Note: No spaces between parameter labels (i.e. groups), '=' and parameters (i.e.yourGroups).
citation=Faith DP (1994). Phylogenetic pattern and the quantification of organismal biodiversity. Philos Trans R Soc Lond B Biol Sci 345: 45-58. http://www.mothur.org/wiki/Phylo.diversity
description=phylo.diversity
outputTypesNames=3
phylodiv=[filename],[tag],phylodiv
rarefy=[filename],[tag],phylodiv.rarefaction
summary=[filename],[tag],phylodiv.summary
Boolean=4
rarefy=F|F|rarefy
summary=T|F|summary
collect=F|F|none
scale=F|F|none
Multiple=0
Numbers=3
iters=1000|F|none
freq=100|F|none
processors=1|T|none
String=1
groups=|F|none
inputGroupNames=2
CountGroup=count-group
NameCount=count-name
inputTypes=count-group-name-tree
count=F|T|NameCount-CountGroup|none|none|none
group=F|T|CountGroup|none|none|none
name=F|T|NameCount|none|none|none
tree=T|T|none|none|none|phylodiv
commandName=phylotype
commandCategory=Clustering
help=The phylotype command reads a taxonomy file and outputs a .list, .rabund and .sabund file. The phylotype command parameter options are taxonomy, name, count, cutoff and label. The taxonomy parameter is required.The cutoff parameter allows you to specify the level you want to stop at.  The default is the highest level in your taxonomy file. For example: taxonomy = Bacteria;Bacteroidetes-Chlorobi;Bacteroidetes; - cutoff=2, would truncate the taxonomy to Bacteria;Bacteroidetes-Chlorobi; For the cutoff parameter levels count up from the root of the phylotree. This enables you to look at the grouping down to a specific resolution, say the genus level.The label parameter allows you to specify which level you would like, and are separated by dashes.  The default all levels in your taxonomy file. For the label parameter, levels count down from the root to keep the output similiar to mothur's other commands which report information from finer resolution to coarser resolutions.The phylotype command should be in the following format: phylotype(taxonomy=yourTaxonomyFile, cutoff=yourCutoff, label=yourLabels) Eaxample: phylotype(taxonomy=amazon.taxonomy, cutoff=5, label=1-3-5).
citation=http://www.mothur.org/wiki/Phylotype
description=cluster your sequences into OTUs based on their classifications
outputTypesNames=3
list=[filename],[clustertag],list-[filename],[clustertag],[tag2],list
rabund=[filename],[clustertag],rabund
sabund=[filename],[clustertag],sabund
Boolean=0
Multiple=0
Numbers=1
cutoff=-1|T|none
String=1
label=|F|none
inputGroupNames=2
ColumnName=name
NameCount=count-name
inputTypes=count-name-taxonomy
count=F|T|NameCount|none|none|none
name=F|T|NameCount|none|ColumnName|rabund-sabund
taxonomy=T|T|none|none|none|list-rabund-sabund
commandName=pre.cluster
commandCategory=Sequence Processing
help=The pre.cluster command groups sequences that are within a given number of base mismatches.The pre.cluster command outputs a new fasta and name file.The pre.cluster command parameters are fasta, name, group, count, topdown, processors and diffs. The fasta parameter is required. The name parameter allows you to give a list of seqs that are identical. This file is 2 columns, first column is name or representative sequence, second column is a list of its identical sequences separated by commas.The group parameter allows you to provide a group file so you can cluster by group. The count parameter allows you to provide a count file so you can cluster by group. The diffs parameter allows you to specify maximum number of mismatched bases allowed between sequences in a grouping. The default is 1.The topdown parameter allows you to specify whether to cluster from largest abundance to smallest or smallest to largest.  Default=T, meaning largest to smallest.The pre.cluster command should be in the following format: pre.cluster(fasta=yourFastaFile, names=yourNamesFile, diffs=yourMaxDiffs) Example pre.cluster(fasta=amazon.fasta, diffs=2).Note: No spaces between parameter labels (i.e. fasta), '=' and parameters (i.e.yourFasta).
citation=Schloss PD, Gevers D, Westcott SL (2011).  Reducing the effects of PCR amplification and sequencing artifacts on 16S rRNA-based studies.  PLoS ONE.  6:e27310.http://www.mothur.org/wiki/Pre.cluster
description=implements a pseudo-single linkage algorithm with the goal of removing sequences that are likely due to pyrosequencing errors
outputTypesNames=4
count=[filename],precluster.count_table
fasta=[filename],precluster,[extension]
map=[filename],precluster.map
name=[filename],precluster.names
Boolean=1
topdown=T|F|none
Multiple=0
Numbers=2
diffs=1|T|none
processors=1|T|none
String=0
inputGroupNames=2
CountGroup=count-group
NameCount=count-name
inputTypes=count-fasta-group-name
count=F|T|NameCount-CountGroup|none|none|count
fasta=T|T|none|none|none|fasta-name
group=F|T|CountGroup|none|none|none
name=F|T|NameCount|none|none|name
commandName=primer.design
commandCategory=OTU-Based Approaches
help=The primer.design allows you to identify sequence fragments that are specific to particular OTUs.The primer.design command parameters are: list, fasta, name, count, otunumber, cutoff, length, pdiffs, mintm, maxtm, processors and label.The list parameter allows you to provide a list file and is required.The fasta parameter allows you to provide a fasta file and is required.The name parameter allows you to provide a name file associated with your fasta file.The count parameter allows you to provide a count file associated with your fasta file.The label parameter is used to indicate the label you want to use from your list file.The otunumber parameter is used to indicate the otu you want to use from your list file. It is required.The pdiffs parameter is used to specify the number of differences allowed in the primer. The default is 0.The length parameter is used to indicate the length of the primer. The default is 18.The mintm parameter is used to indicate minimum melting temperature.The maxtm parameter is used to indicate maximum melting temperature.The processors parameter allows you to indicate the number of processors you want to use. Default=1.The cutoff parameter allows you set a percentage of sequences that support the base. For example: cutoff=97 would only return a sequence that only showed ambiguities for bases that were not supported by at least 97% of sequences.The primer.desing command should be in the following format: primer.design(list=yourListFile, fasta=yourFastaFile, name=yourNameFile)primer.design(list=final.an.list, fasta=final.fasta, name=final.names, label=0.03)
citation=http://www.mothur.org/wiki/Primer.design
description=identify sequence fragments that are specific to particular OTUs
outputTypesNames=3
fasta=[filename],[distance],otu.cons.fasta
list=[filename],pick,[extension]
summary=[filename],[distance],primer.summary
Boolean=0
Multiple=0
Numbers=7
length=18|F|none
mintm=-1|F|none
maxtm=-1|F|none
processors=1|F|none
otunumber=-1|T|none
pdiffs=0|T|none
cutoff=100|F|none
String=1
label=|F|none
inputGroupNames=1
NameCount=count-name
inputTypes=count-fasta-list-name
count=F|T|NameCount|none|none|none
fasta=T|T|none|none|none|none
list=T|T|none|none|none|summary-list
name=F|T|NameCount|none|none|none
commandName=rarefaction.shared
commandCategory=OTU-Based Approaches
help=The rarefaction.shared command parameters are shared, design, label, iters, groups, sets, jumble, groupmode and calc.  shared is required if there is no current sharedfile. The design parameter allows you to assign your groups to sets. If provided mothur will run rarefaction.shared on a per set basis. The sets parameter allows you to specify which of the sets in your designfile you would like to analyze. The set names are separated by dashes. THe default is all sets in the designfile.The rarefaction command should be in the following format: rarefaction.shared(label=yourLabel, iters=yourIters, calc=yourEstimators, jumble=yourJumble, groups=yourGroups).The freq parameter is used indicate when to output your data, by default it is set to 100. But you can set it to a percentage of the number of sequence. For example freq=0.10, means 10%. Example rarefaction.shared(label=unique-0.01-0.03,  iters=10000, groups=B-C, jumble=T, calc=sharedobserved).The default values for iters is 1000, freq is 100, and calc is sharedobserved which calculates the shared rarefaction curve for the observed richness.The subsampleiters parameter allows you to choose the number of times you would like to run the subsample.The subsample parameter allows you to enter the size pergroup of the sample or you can set subsample=T and mothur will use the size of your smallest group.The default value for groups is all the groups in your groupfile, and jumble is true.The available estimators for calc are default, sharednseqs, sharedobserved,The label parameter is used to analyze specific labels in your input.The groups parameter allows you to specify which of the groups in your groupfile you would like analyzed.  You must enter at least 2 valid groups.Note: No spaces between parameter labels (i.e. freq), '=' and parameters (i.e.yourFreq).
citation=Magurran AE (2004). Measuring biological diversity. Blackwell Pub.: Malden, Ma. http://www.mothur.org/wiki/Rarefaction.shared
description=generate inter-sample rarefaction curves using a re-sampling without replacement approach
outputTypesNames=2
sharedr_nseqs=[filename],shared.r_nseqs
sharedrarefaction=[filename],shared.rarefaction
Boolean=2
jumble=T|F|none
groupmode=T|F|none
Multiple=1
calc=sharednseqs-sharedobserved|sharedobserved|T|T|none
Numbers=3
freq=100|F|none
iters=1000|F|none
subsampleiters=1000|F|none
String=4
label=|F|none
subsample=|F|none
groups=|F|none
sets=|F|none
inputGroupNames=0
inputTypes=design-shared
design=F|F|none|none|none|none
shared=T|T|none|none|none|none
commandName=rarefaction.single
commandCategory=OTU-Based Approaches
help=The rarefaction.single command parameters are list, sabund, rabund, shared, label, iters, freq, calc, processors, groupmode and abund.  list, sabund, rabund or shared is required unless you have a valid current file. The freq parameter is used indicate when to output your data, by default it is set to 100. But you can set it to a percentage of the number of sequence. For example freq=0.10, means 10%. The processors parameter allows you to specify the number of processors to use. The default is 1.The rarefaction.single command should be in the following format: rarefaction.single(label=yourLabel, iters=yourIters, freq=yourFreq, calc=yourEstimators).Example rarefaction.single(label=unique-.01-.03, iters=10000, freq=10, calc=sobs-rchao-race-rjack-rbootstrap-rshannon-rnpshannon-rsimpson).The default values for iters is 1000, freq is 100, and calc is rarefaction which calculates the rarefaction curve for the observed richness.If you are running rarefaction.single with a shared file and would like your results collated in one file, set groupmode=t. (Default=true).The label parameter is used to analyze specific labels in your input.Note: No spaces between parameter labels (i.e. freq), '=' and parameters (i.e.yourFreq).
citation=Magurran AE (2004). Measuring biological diversity. Blackwell Pub.: Malden, Ma. http://www.mothur.org/wiki/Rarefaction.single
description=generate intra-sample rarefaction curves using a re-sampling without replacement approach
outputTypesNames=15
r_ace=[filename],r_ace
r_bootstrap=[filename],r_bootstrap
r_chao=[filename],r_chao
r_coverage=[filename],r_coverage
r_heip=[filename],r_heip
r_invsimpson=[filename],r_invsimpson
r_jack=[filename],r_jack
r_npshannon=[filename],r_npshannon
r_nseqs=[filename],r_nseqs
r_shannon=[filename],r_shannon
r_shannoneven=[filename],r_shannoneven
r_simpson=[filename],r_simpson
r_simpsoneven=[filename],r_simpsoneven
r_smithwilson=[filename],r_smithwilson
rarefaction=[filename],rarefaction
Boolean=1
groupmode=T|F|none
Multiple=1
calc=sobs-chao-nseqs-coverage-ace-jack-shannon-shannoneven-npshannon-heip-smithwilson-simpson-simpsoneven-invsimpson-bootstrap|sobs|T|T|none
Numbers=4
freq=100|F|none
iters=1000|F|none
abund=10|F|none
processors=1|T|none
String=1
label=|F|none
inputGroupNames=1
LRSS=list-rabund-sabund-shared
inputTypes=list-rabund-sabund-shared
list=F|T|LRSS|LRSS|none|none
rabund=F|F|LRSS|LRSS|none|none
sabund=F|F|LRSS|LRSS|none|none
shared=F|T|LRSS|LRSS|none|none
commandName=remove.dists
commandCategory=General
help=The remove.dists command removes distances from a phylip or column file related to groups or sequences listed in an accnos file.The remove.dists command parameters are accnos, phylip and column.The remove.dists command should be in the following format: get.dists(accnos=yourAccnos, phylip=yourPhylip).Example remove.dists(accnos=final.accnos, phylip=final.an.thetayc.0.03.lt.ave.dist).Note: No spaces between parameter labels (i.e. accnos), '=' and parameters (i.e.final.accnos).
citation=http://www.mothur.org/wiki/Remove.dists
description=removes distances from a phylip or column file related to groups or sequences listed in an accnos file
outputTypesNames=2
column=[filename],pick,[extension]
phylip=[filename],pick,[extension]
Boolean=0
Multiple=0
Numbers=0
String=0
inputGroupNames=1
PhylipColumn=column-phylip
inputTypes=accnos-column-phylip
accnos=T|T|none|none|none|none
column=F|T|none|PhylipColumn|none|column
phylip=F|T|none|PhylipColumn|none|phylip
commandName=remove.groups
commandCategory=OTU-Based Approaches
help=The remove.groups command removes sequences from a specfic group or set of groups from the following file types: fasta, name, group, count, list, taxonomy, design or sharedfile.It outputs a file containing the sequences NOT in the those specified groups, or with a sharedfile eliminates the groups you selected.The remove.groups command parameters are accnos, fasta, name, group, list, taxonomy, shared, design and groups. The group or count parameter is required, unless you have a current group or count file or are using a sharedfile.You must also provide an accnos containing the list of groups to remove or set the groups parameter to the groups you wish to remove.The groups parameter allows you to specify which of the groups in your groupfile you would like removed.  You can separate group names with dashes.The remove.groups command should be in the following format: remove.groups(accnos=yourAccnos, fasta=yourFasta, group=yourGroupFile).Example remove.groups(accnos=amazon.accnos, fasta=amazon.fasta, group=amazon.groups).or remove.groups(groups=pasture, fasta=amazon.fasta, amazon.groups).Note: No spaces between parameter labels (i.e. fasta), '=' and parameters (i.e.yourFasta).
citation=http://www.mothur.org/wiki/Remove.groups
description=removes sequences from a list, fasta, name, group, shared, design or taxonomy file from a given group or set of groups
outputTypesNames=8
count=[filename],pick,[extension]
design=[filename],pick,[extension]
fasta=[filename],pick,[extension]
group=[filename],pick,[extension]
list=[filename],pick,[extension]
name=[filename],pick,[extension]
shared=[filename],[tag],pick,[extension]
taxonomy=[filename],pick,[extension]
Boolean=0
Multiple=0
Numbers=0
String=1
groups=|F|none
inputGroupNames=4
CountGroup=count-group
FNGLT=design-fasta-group-list-taxonomy
NameCount=count-name
sharedGroup=design-group-shared
inputTypes=accnos-count-design-fasta-group-list-name-shared-taxonomy
accnos=F|F|none|none|none|none
count=F|T|NameCount-CountGroup|none|none|count
design=F|F|none|sharedGroup|FNGLT|design
fasta=F|T|none|none|FNGLT|fasta
group=F|T|CountGroup|sharedGroup|FNGLT|group
list=F|T|none|none|FNGLT|list
name=F|T|NameCount|none|none|name
shared=F|T|none|sharedGroup|none|shared
taxonomy=F|T|none|none|FNGLT|taxonomy
commandName=remove.lineage
commandCategory=Phylotype Analysis
help=The remove.lineage command reads a taxonomy or constaxonomy file and any of the following file types: fasta, name, group, count, list, shared or alignreport file. The constaxonomy can only be used with a shared or list file.It outputs a file containing only the sequences or OTUS from the taxonomy file that are not from the taxon you requested to be removed.The remove.lineage command parameters are taxon, fasta, name, group, count, list, shared, taxonomy, alignreport, label and dups.  You must provide taxonomy or constaxonomy unless you have a valid current taxonomy file.The dups parameter allows you to add the entire line from a name file if you add any name from the line. default=false. The taxon parameter allows you to select the taxons you would like to remove, and is required.You may enter your taxons with confidence scores, doing so will remove only those sequences that belong to the taxonomy and whose cofidence scores fall below the scores you give.If they belong to the taxonomy and have confidences above those you provide the sequence will not be removed.The label parameter is used to analyze specific labels in your input. The remove.lineage command should be in the following format: remove.lineage(taxonomy=yourTaxonomyFile, taxon=yourTaxons).Example remove.lineage(taxonomy=amazon.silva.taxonomy, taxon=Bacteria;Firmicutes;Bacilli;Lactobacillales;).Note: If you are running mothur in script mode you must wrap the taxon in ' characters so mothur will ignore the ; in the taxon.Example remove.lineage(taxonomy=amazon.silva.taxonomy, taxon='Bacteria;Firmicutes;Bacilli;Lactobacillales;').Note: No spaces between parameter labels (i.e. fasta), '=' and parameters (i.e.yourFasta).
citation=http://www.mothur.org/wiki/Remove.lineage
description=removes sequences from a list, fasta, name, group, alignreport or taxonomy file from a given taxonomy or set of taxonomies
outputTypesNames=9
alignreport=[filename],pick.align.report
constaxonomy=[filename],pick,[extension]
count=[filename],pick,[extension]
fasta=[filename],pick,[extension]
group=[filename],pick,[extension]
list=[filename],pick,[extension]-[filename],[distance],pick,[extension]
name=[filename],pick,[extension]
shared=[filename],[distance],pick,[extension]
taxonomy=[filename],pick,[extension]
Boolean=1
dups=T|F|none
Multiple=0
Numbers=0
String=2
label=|F|none
taxon=|T|none
inputGroupNames=4
CountGroup=count-group
FNGLT=alignreport-constaxonomy-count-fasta-group-list-name-shared-taxonomy
NameCount=count-name
tax=constaxonomy-taxonomy
inputTypes=alignreport-constaxonomy-count-fasta-group-list-name-shared-taxonomy
alignreport=F|F|none|FNGLT|none|alignreport
constaxonomy=F|T|tax|FNGLT|none|constaxonomy
count=F|T|NameCount-CountGroup|FNGLT|none|count
fasta=F|T|none|FNGLT|none|fasta
group=F|T|CountGroup|FNGLT|none|group
list=F|T|none|FNGLT|none|list
name=F|T|NameCount|FNGLT|none|name
shared=F|T|none|FNGLT|none|shared
taxonomy=F|T|tax|FNGLT|none|taxonomy
commandName=remove.otulabels
commandCategory=OTU-Based Approaches
help=The remove.otulabels command can be used to remove specific otus with the output from classify.otu, otu.association, or corr.axes. It can also be used to select a set of otus from a shared or list file.The remove.otulabels parameters are: constaxonomy, otucorr, corraxes, shared, list, label and accnos.The constaxonomy parameter is input the results of the classify.otu command.The otucorr parameter is input the results of the otu.association command.The corraxes parameter is input the results of the corr.axes command.The label parameter is used to analyze specific labels in your input. The remove.otulabels commmand should be in the following format: remove.otulabels(accnos=yourListOfOTULabels, corraxes=yourCorrAxesFile)
citation=http://www.mothur.org/wiki/Get.otulabels
description=Can be used with output from classify.otu, otu.association, or corr.axes to remove specific otus.
outputTypesNames=5
constaxonomy=[filename],pick,[extension]
corraxes=[filename],pick,[extension]
list=[filename],[distance],pick,[extension]
otucorr=[filename],pick,[extension]
shared=[filename],[distance],pick,[extension]
Boolean=0
Multiple=0
Numbers=0
String=1
label=|F|none
inputGroupNames=1
FNGLT=constaxonomy-corraxes-list-otucorr-shared
inputTypes=accnos-constaxonomy-corraxes-list-otucorr-shared
accnos=T|T|none|none|none|none
constaxonomy=F|F|none|FNGLT|none|constaxonomy
corraxes=F|F|none|FNGLT|none|corraxes
list=F|T|none|FNGLT|none|list
otucorr=F|F|none|FNGLT|none|otucorr
shared=F|T|none|FNGLT|none|shared
commandName=remove.otus
commandCategory=OTU-Based Approaches
help=The remove.otus command removes otus containing sequences from a specfic group or set of groups.It outputs a new list file containing the otus containing sequences NOT from in the those specified groups.The remove.otus command parameters are accnos, group, list, label and groups. The group and list parameters are required, unless you have valid current files.You must also provide an accnos containing the list of groups to get or set the groups parameter to the groups you wish to select.The groups parameter allows you to specify which of the groups in your groupfile you would like.  You can separate group names with dashes.The label parameter allows you to specify which distance you want to process.The remove.otus command should be in the following format: remove.otus(accnos=yourAccnos, list=yourListFile, group=yourGroupFile, label=yourLabel).Example remove.otus(accnos=amazon.accnos, list=amazon.fn.list, group=amazon.groups, label=0.03).or remove.otus(groups=pasture, list=amazon.fn.list, amazon.groups, label=0.03).Note: No spaces between parameter labels (i.e. list), '=' and parameters (i.e.yourListFile).
citation=http://www.mothur.org/wiki/Remove.otus
description=outputs a new list file containing the otus NOT containing sequences from the groups specified
outputTypesNames=2
group=[filename],[tag],pick,[extension]
list=[filename],[tag],pick,[extension]
Boolean=0
Multiple=0
Numbers=0
String=2
groups=|F|none
label=|F|none
inputGroupNames=0
inputTypes=accnos-group-list
accnos=F|F|none|none|none|none
group=T|T|none|none|none|group
list=T|T|none|none|none|list
commandName=remove.rare
commandCategory=OTU-Based Approaches
help=The remove.rare command parameters are list, rabund, sabund, shared, group, count, label, groups, bygroup and nseqs.The remove.rare command reads one of the following file types: list, rabund, sabund or shared file. It outputs a new file after removing the rare otus.The groups parameter allows you to specify which of the groups you would like analyzed.  Default=all. You may separate group names with dashes.The label parameter is used to analyze specific labels in your input. default=all. You may separate label names with dashes.The bygroup parameter is only valid with the shared file. default=f, meaning remove any OTU that has nseqs or fewer sequences across all groups.bygroups=T means remove any OTU that has nseqs or fewer sequences in each group (if groupA has 1 sequence and group B has 100 sequences in OTUZ and nseqs=1, then set the groupA count for OTUZ to 0 and keep groupB's count at 100.) The nseqs parameter allows you to set the cutoff for an otu to be deemed rare. It is required.The remove.rare command should be in the following format: remove.rare(shared=yourSharedFile, nseqs=yourRareCutoff).Example remove.rare(shared=amazon.fn.shared, nseqs=2).Note: No spaces between parameter labels (i.e. shared), '=' and parameters (i.e.yourSharedFile).
citation=http://www.mothur.org/wiki/Remove.rare
description=removes rare sequences from a sabund, rabund, shared or list and group file
outputTypesNames=6
count=[filename],pick,[extension]
group=[filename],pick,[extension]
list=[filename],pick,[extension]
rabund=[filename],pick,[extension]
sabund=[filename],pick,[extension]
shared=[filename],[tag],pick,[extension]
Boolean=1
bygroup=f|F|none
Multiple=0
Numbers=1
nseqs=0|T|none
String=2
groups=|F|none
label=|F|none
inputGroupNames=2
CountGroup=count-group
atleast=list-rabund-sabund-shared
inputTypes=count-group-list-rabund-sabund-shared
count=F|F|CountGroup|none|none|count
group=F|F|CountGroup|none|none|group
list=F|T|none|atleast|none|list
rabund=F|T|none|atleast|none|rabund
sabund=F|T|none|atleast|none|sabund
shared=F|T|none|atleast|none|shared
commandName=remove.seqs
commandCategory=Sequence Processing
help=The remove.seqs command reads an .accnos file and at least one of the following file types: fasta, name, group, count, list, taxonomy, quality or alignreport file.It outputs a file containing the sequences NOT in the .accnos file.The remove.seqs command parameters are accnos, fasta, name, group, count, list, taxonomy, qfile, alignreport and dups.  You must provide accnos and at least one of the file parameters.The dups parameter allows you to remove the entire line from a name file if you remove any name from the line. default=true. The remove.seqs command should be in the following format: remove.seqs(accnos=yourAccnos, fasta=yourFasta).Example remove.seqs(accnos=amazon.accnos, fasta=amazon.fasta).Note: No spaces between parameter labels (i.e. fasta), '=' and parameters (i.e.yourFasta).
citation=http://www.mothur.org/wiki/Remove.seqs
description=removes sequences from a list, fasta, name, group, alignreport, quality or taxonomy file
outputTypesNames=8
alignreport=[filename],pick.align.report
count=[filename],pick,[extension]
fasta=[filename],pick,[extension]
group=[filename],pick,[extension]
list=[filename],pick,[extension]
name=[filename],pick,[extension]
qfile=[filename],pick,[extension]
taxonomy=[filename],pick,[extension]
Boolean=1
dups=T|F|none
Multiple=0
Numbers=0
String=0
inputGroupNames=3
CountGroup=count-group
FNGLT=alignreport-count-fasta-group-list-name-qfile-taxonomy
NameCount=count-name
inputTypes=accnos-alignreport-count-fasta-group-list-name-qfile-taxonomy
accnos=T|T|none|none|none|none
alignreport=F|F|none|FNGLT|none|alignreport
count=F|T|NameCount-CountGroup|FNGLT|none|count
fasta=F|T|none|FNGLT|none|fasta
group=F|T|CountGroup|FNGLT|none|group
list=F|T|none|FNGLT|none|list
name=F|T|NameCount|FNGLT|none|name
qfile=F|F|none|FNGLT|none|qfile
taxonomy=F|T|none|FNGLT|none|taxonomy
commandName=rename.seqs
commandCategory=Sequence Processing
help=The rename.seqs command reads a fastafile and groupfile with an optional namefile, and creates files with the sequence names concatenated with the group. For example if a line in the group file is 'seq1   group1', the new sequence name will be seq1_group1.The rename.seqs command parameters are fasta, name and group. Fasta and group are required, unless a current file is available for both.The rename.seqs command should be in the following format: rename.seqs(fasta=yourFastaFile, group=yourGroupFile) Example rename.seqs(fasta=abrecovery.unique.fasta, group=abrecovery.group).Note: No spaces between parameter labels (i.e. fasta), '=' and parameters (i.e.yourFasta).
citation=http://www.mothur.org/wiki/Rename.seqs
description=rename sequences
outputTypesNames=3
fasta=[filename],renamed,[extension]
group=[filename],renamed,[extension]
name=[filename],renamed,[extension]
Boolean=0
Multiple=0
Numbers=0
String=0
inputGroupNames=2
CountGroup=group
NameCount=name
inputTypes=fasta-group-name
fasta=T|T|none|none|none|fasta
group=T|T|CountGroup|none|none|group
name=F|T|NameCount|none|none|name
commandName=reverse.seqs
commandCategory=Sequence Processing
help=The reverse.seqs command reads a fastafile and outputs a fasta file containing the reverse compliment.The reverse.seqs command parameters fasta or qfile are required.The reverse.seqs command should be in the following format: reverse.seqs(fasta=yourFastaFile) 
citation=http://www.mothur.org/wiki/Reverse.seqs
description=outputs a fasta file containing the reverse-complements
outputTypesNames=2
fasta=[filename],rc,[extension]
qfile=[filename],rc,[extension]
Boolean=0
Multiple=0
Numbers=0
String=0
inputGroupNames=1
fastaQual=fasta-qfile
inputTypes=fasta-qfile
fasta=F|T|none|fastaQual|none|fasta
qfile=F|T|none|fastaQual|none|qfile
commandName=screen.seqs
commandCategory=Sequence Processing
help=The screen.seqs command reads a fastafile and screens sequences.The screen.seqs command parameters are fasta, start, end, maxambig, maxhomop, minlength, maxlength, name, group, count, qfile, alignreport, contigsreport, summary, taxonomy, optimize, criteria and processors.The fasta parameter is required.The contigsreport parameter allows you to use the contigsreport file to determine if a sequence is good. Screening parameters include: minoverlap, ostart, oend and mismatches. The alignreport parameter allows you to use the alignreport file to determine if a sequence is good. Screening parameters include: minsim, minscore and maxinsert. The summary parameter allows you to use the summary file from summary.seqs to save time processing.The taxonomy parameter allows you to remove bad seqs from taxonomy files.The start parameter is used to set a position the "good" sequences must start by. The default is -1.The end parameter is used to set a position the "good" sequences must end after. The default is -1.The maxambig parameter allows you to set the maximum number of ambigious bases allowed. The default is -1.The maxhomop parameter allows you to set a maximum homopolymer length. The minlength parameter allows you to set and minimum sequence length. The maxn parameter allows you to set and maximum number of N's allowed in a sequence. The minoverlap parameter allows you to set and minimum overlap. The default is -1. The ostart parameter is used to set an overlap position the "good" sequences must start by. The default is -1. The oend parameter is used to set an overlap position the "good" sequences must end after. The default is -1.The mismatches parameter allows you to set and maximum mismatches in the contigs.report. The minsim parameter allows you to set the minimum similarity to template sequences during alignment. Found in column 'SimBtwnQuery&Template' in align.report file.The minscore parameter allows you to set the minimum search score during alignment. Found in column 'SearchScore' in align.report file.The maxinsert parameter allows you to set the maximum number of insertions during alignment. Found in column 'LongestInsert' in align.report file.The processors parameter allows you to specify the number of processors to use while running the command. The default is 1.The optimize and criteria parameters allow you set the start, end, maxabig, maxhomop, minlength and maxlength parameters relative to your set of sequences .For example optimize=start-end, criteria=90, would set the start and end values to the position 90% of your sequences started and ended.The name parameter allows you to provide a namesfile, and the group parameter allows you to provide a groupfile.The screen.seqs command should be in the following format: screen.seqs(fasta=yourFastaFile, name=youNameFile, group=yourGroupFIle, start=yourStart, end=yourEnd, maxambig=yourMaxambig,  maxhomop=yourMaxhomop, minlength=youMinlength, maxlength=yourMaxlength)  Example screen.seqs(fasta=abrecovery.fasta, name=abrecovery.names, group=abrecovery.groups, start=..., end=..., maxambig=..., maxhomop=..., minlength=..., maxlength=...).Note: No spaces between parameter labels (i.e. fasta), '=' and parameters (i.e.yourFasta).
citation=http://www.mothur.org/wiki/Screen.seqs
description=enables you to keep sequences that fulfill certain user defined criteria
outputTypesNames=10
accnos=[filename],bad.accnos
alignreport=[filename],good.align.report
contigsreport=[filename],good.contigs.report
count=[filename],good,[extension]
fasta=[filename],good,[extension]
group=[filename],good,[extension]
name=[filename],good,[extension]
qfile=[filename],good,[extension]
summary=[filename],good.summary
taxonomy=[filename],good,[extension]
Boolean=0
Multiple=1
optimize=none-start-end-maxambig-maxhomop-minlength-maxlength|none|T|F|none
Numbers=16
start=-1|T|none
end=-1|T|none
maxambig=-1|F|none
maxhomop=-1|F|none
minlength=-1|F|none
maxlength=-1|F|none
processors=1|T|none
criteria=90|F|none
minoverlap=-1|F|none
ostart=-1|F|none
oend=-1|F|none
mismatches=-1|F|none
maxn=-1|F|none
minscore=-1|F|none
maxinsert=-1|F|none
minsim=-1|F|none
String=0
inputGroupNames=3
CountGroup=count-group
NameCount=count-name
report=alignreport-contigsreport-summary
inputTypes=alignreport-contigsreport-count-fasta-group-name-qfile-summary-taxonomy
alignreport=F|F|report|none|none|alignreport
contigsreport=F|T|report|none|none|contigsreport
count=F|T|NameCount-CountGroup|none|none|count
fasta=T|T|none|none|none|fasta
group=F|T|CountGroup|none|none|group
name=F|T|NameCount|none|none|name
qfile=F|F|none|none|none|qfile
summary=F|F|report|none|none|summary
taxonomy=F|F|none|none|none|taxonomy
commandName=sens.spec
commandCategory=OTU-Based Approaches
help=The sens.spec command....
citation=Schloss PD, Westcott SL (2011). Assessing and improving methods used in OTU-based approaches for 16S rRNA gene sequence analysis. Appl Environ Microbiol 77:3219.http://www.mothur.org/wiki/Sens.spec
description=sens.spec
outputTypesNames=1
sensspec=[filename],sensspec
Boolean=1
hard=T|F|none
Multiple=0
Numbers=2
cutoff=-1.00|F|none
precision=100|F|none
String=1
label=|F|none
inputGroupNames=1
PhylipColumn=column-phylip
inputTypes=column-list-phylip
column=F|F|PhylipColumn|PhylipColumn|none|none
list=T|T|none|none|none|sensspec
phylip=F|F|PhylipColumn|PhylipColumn|none|none
commandName=seq.error
commandCategory=Sequence Processing
help=The seq.error command reads a query alignment file and a reference alignment file and creates .....The fasta parameter...The reference parameter...The qfile parameter...The report parameter...The name parameter allows you to provide a name file associated with the fasta file.The count parameter allows you to provide a count file associated with the fasta file.The ignorechimeras parameter...The threshold parameter...The processors parameter...If the save parameter is set to true the reference sequences will be saved in memory, to clear them later you can use the clear.memory command. Default=f.Example seq.error(...).Note: No spaces between parameter labels (i.e. fasta), '=' and parameters (i.e.yourFasta).For more details please check out the wiki http://www.mothur.org/wiki/seq.error .
citation=Schloss PD, Gevers D, Westcott SL (2011).  Reducing the effects of PCR amplification and sequencing artifacts on 16S rRNA-based studies.  PLoS ONE.  6:e27310.http://www.mothur.org/wiki/Seq.error
description=seq.error
outputTypesNames=11
errorchimera=[filename],error.chimera
errorcount=[filename],error.count
errorforward=[filename],error.seq.forward
errormatrix=[filename],error.matrix
errorqualforward=[filename],error.qual.forward
errorquality=[filename],error.quality
errorqualreverse=[filename],error.qual.reverse
errorref-query=[filename],error.ref-query
errorreverse=[filename],error.seq.reverse
errorseq=[filename],error.seq
errorsummary=[filename],error.summary
Boolean=3
ignorechimeras=T|F|none
aligned=T|F|none
save=F|F|none
Multiple=0
Numbers=2
threshold=1.0|F|none
processors=1|T|none
String=0
inputGroupNames=2
QualReport=qfile-report
namecount=count-name
inputTypes=count-fasta-name-qfile-reference-report
count=F|T|namecount|none|none|none
fasta=T|T|none|none|none|errorType
name=F|T|namecount|none|none|none
qfile=F|F|none|none|QualReport|none
reference=T|T|none|none|none|none
report=F|F|none|none|QualReport|none
commandName=set.current
commandCategory=General
help=The set.current command allows you to set the current files saved by mothur.The set.current command parameters are: clear, phylip, column, list, rabund, sabund, name, group, design, order, tree, shared, ordergroup, relabund, fasta, qfile, sff, oligos, accnos, biom, count, summary and taxonomy.The clear paramter is used to indicate which file types you would like to clear values for, multiple types can be separated by dashes.The set.current command should be in the following format: set.current(fasta=yourFastaFile) or set.current(fasta=amazon.fasta, clear=name-accnos)
citation=http://www.mothur.org/wiki/Set.current
description=set current files for mothur
outputTypesNames=0
Boolean=0
Multiple=0
Numbers=1
processors=1|T|none
String=1
clear=|F|none
inputGroupNames=0
inputTypes=accnos-biom-column-count-design-fasta-flow-group-list-name-oligos-order-ordergroup-phylip-qfile-rabund-relabund-sabund-sff-shared-summary-taxonomy-tree
accnos=F|F|none|none|none|none
biom=F|F|none|none|none|none
column=F|F|none|none|none|none
count=F|F|none|none|none|none
design=F|F|none|none|none|none
fasta=F|F|none|none|none|none
flow=F|F|none|none|none|none
group=F|F|none|none|none|none
list=F|F|none|none|none|none
name=F|F|none|none|none|none
oligos=F|F|none|none|none|none
order=F|F|none|none|none|none
ordergroup=F|F|none|none|none|none
phylip=F|F|none|none|none|none
qfile=F|F|none|none|none|none
rabund=F|F|none|none|none|none
relabund=F|F|none|none|none|none
sabund=F|F|none|none|none|none
sff=F|F|none|none|none|none
shared=F|F|none|none|none|none
summary=F|F|none|none|none|none
taxonomy=F|F|none|none|none|none
tree=F|F|none|none|none|none
commandName=set.dir
commandCategory=General
help=The set.dir command can be used to direct the output files generated by mothur to a specific place, the directory must exist.The set.dir command can also be used to specify the directory where your input files are located, the directory must exist.The set.dir command can also be used to override or set the default location mothur will look for files if it is unable to find them, the directory must exist.The set.dir command can also be used to run mothur in debug mode.The set.dir command can also be used to set the modifynames parameter. Default=t, meaning if your sequence names contain ':' change them to '_' to avoid issues while making trees.  modifynames=F will leave sequence names as they are.The set.dir command parameters are input, output, tempdefault and debug and one is required.To run mothur in debug mode set debug=true. Default debug=false.To return the output to the same directory as the input files you may enter: output=clear.To return the input to the current working directory you may enter: input=clear.To set the output to the directory where mothur.exe is located you may enter: output=default.To set the input to the directory where mothur.exe is located you may enter: input=default.To return the tempdefault to the default you provided at compile time you may enter: tempdefault=clear.To set the tempdefault to the directory where mothur.exe is located you may enter: tempdefault=default.The set.dir command should be in the following format: set.dir(output=yourOutputDirectory, input=yourInputDirectory, tempdefault=yourTempDefault).Example set.outdir(output=/Users/lab/desktop/outputs, input=/Users/lab/desktop/inputs).Note: No spaces between parameter labels (i.e. output), '=' and parameters (i.e.yourOutputDirectory).
citation=http://www.mothur.org/wiki/Set.dir
description=set input, output and default directories
outputTypesNames=0
Boolean=2
debug=F|F|none
modifynames=T|F|none
Multiple=0
Numbers=0
String=3
tempdefault=|F|none
input=|T|none
output=|T|none
inputGroupNames=0
inputTypes=
commandName=set.logfile
commandCategory=General
help=The set.logfile command can be used to provide a specific name for your logfile and/or to append the log generated by mothur to an existing file.The set.logfile command parameters are name and append, name is required. Append is set to false by default.The set.logfile command should be in the following format: set.logfile(name=yourLogFileName, append=T).Example set.logfile(name=/Users/lab/desktop/output.txt, append=T).Note: No spaces between parameter labels (i.e. name), '=' and parameters (i.e.yourLogFileName).
citation=http://www.mothur.org/wiki/Set.logfile
description=set logfile name
outputTypesNames=0
Boolean=1
append=F|F|none
Multiple=0
Numbers=0
String=1
name=|T|none
inputGroupNames=0
inputTypes=
commandName=sff.multiple
commandCategory=Sequence Processing
help=The sff.multiple command reads a file containing sff filenames and optional oligos filenames. It runs the files through sffinfo, trim.flows, shhh.flows and trim.seqs combining the results.The sff.multiple command parameters are: file, trim, maxhomop, maxflows, minflows, pdiffs, bdiffs, ldiffs, sdiffs, tdiffs, signal, noise, order, lookup, cutoff, maxiter, large, sigma, mindelta, allfiles, flip, maxambig, minlength, maxlength, keepforward, keepfirst, removelast, processors, inputdir, outputdir, file, trim, maxhomop, maxflows, minflows, pdiffs, bdiffs, ldiffs, sdiffs, tdiffs, signal, noise, order, lookup, cutoff, maxiter, large, sigma, mindelta, allfiles, flip, maxambig, minlength, maxlength, keepforward, keepfirst, removelast, processors, inputdir, outputdir.The file parameter allows you to enter the a file containing the list of sff files and optional oligos files.The trim parameter allows you to indicate if you would like a sequences and quality scores generated by sffinfo trimmed to the clipQualLeft and clipQualRight values.  Default=True. The maxambig parameter allows you to set the maximum number of ambigious bases allowed. The default is -1.The maxhomop parameter allows you to set a maximum homopolymer length. The minlength parameter allows you to set and minimum sequence length. The maxlength parameter allows you to set and maximum sequence length. The tdiffs parameter is used to specify the total number of differences allowed in the sequence. The default is pdiffs + bdiffs + sdiffs + ldiffs.The bdiffs parameter is used to specify the number of differences allowed in the barcode. The default is 0.The pdiffs parameter is used to specify the number of differences allowed in the primer. The default is 0.The ldiffs parameter is used to specify the number of differences allowed in the linker. The default is 0.The sdiffs parameter is used to specify the number of differences allowed in the spacer. The default is 0.The allfiles parameter will create separate group and fasta file for each grouping. The default is F.The keepforward parameter allows you to indicate whether you want the forward primer removed or not. The default is F, meaning remove the forward primer.The keepfirst parameter trims the sequence to the first keepfirst number of bases after the barcode or primers are removed, before the sequence is checked to see if it meets the other requirements. The removelast removes the last removelast number of bases after the barcode or primers are removed, before the sequence is checked to see if it meets the other requirements.The order parameter options are A, B or I.  Default=A. A = TACG and B = TACGTACGTACGATGTAGTCGAGCATCATCTGACGCAGTACGTGCATGATCTCAGTCAGCAGCTATGTCAGTGCATGCAGTGACTGATCGTCATCAGCTAGCATCGACTGCATAGATCGCATGACGATCGCATATCGTCAGTGCATGTAGTCGAGCATCATCTGACGCAGTACGTGCATGATCTCAGTCAGCAGCTATGTCAGTGCATGCATAGATCGCATGACGATCGCATATCGTCAGTGCAGTGACTGATCGTCATCAGCTAGCATCGACTGCATGTAGTCGAGCATCATCTGACGCAGTACGTGCATAGATCGCATGACGATCGCATATCGTCAGTGCATGATCTCAGTCAGCAGCTATGTCAGTGCATGCAGTGACTGATCGTCATCAGCTAGCATCGACTGCATGTAGTCGAGCATCATCTGACGCAGTACGTGCAGTGACTGATCGTCATCAGCTAGCATCGACTGCATAGATCGCATGACGATCGCATATCGTCAGTGCATGATCTCAGTCAGCAGCTATGTCAGTGCATGCATGTAGTCGAGCATCATCTGACGCAGTACGTGCATAGATCGCATGACGATCGCATATCGTCAGTGCAGTGACTGATCGTCATCAGCTAGCATCGACTGCATGATCTCAGTCAGCAGCTATGTCAGTGCATGCAGTGACTGATCGTCATCAGCTAGCATCGACTGCATAGATCGCATGACGATCGCATATCGTCAGTGCATGATCTCAGTCAGCAGCTATGTCAGTGCATGCATGTAGTCGAGCATCATCTGACGCAGTACGTGCATAGATCGCATGACGATCGCATATCGTCAGTGCATGATCTCAGTCAGCAGCTATGTCAGTGCATGCAGTGACTGATCGTCATCAGCTAGCATCGACTGCATGTAGTCGAGCATCATCTGACGCAGTACGTGCATGATCTCAGTCAGCAGCTATGTCAGTGCATGCATAGATCGCATGACGATCGCATATCGTCAGTGCATGTAGTCGAGCATCATCTGACGCAGTACGTGCAGTGACTGATCGTCATCAGCTAGCATCGACTGCATAGATCGCATGACGATCGCATATCGTCAGTGCATGTAGTCGAGCATCATCTGACGCAGTACGTGCATGATCTCAGTCAGCAGCTATGTCAGTGCATGCAGTGACTGATCGTCATCAGCTAGCATCGACTGCATGATCTCAGTCAGCAGCTATGTCAGTGCATGCAGTGACTGATCGTCATCAGCTAGCATCGACTGCATAGATCGCATGACGATCGCATATCGTCAGTGCATGTAGTCGAGCATCATCTGACGCAGTACGTGCATGATCTCAGTCAGCAGCTATGTCAGTGCATGCATGTAGTCGAGCATCATCTGACGCAGTACGTGCAGTGACTGATCGTCATCAGCTAGCATCGACTGCATAGATCGCATGACGATCGCATATCGTCAGTGCAGTGACTGATCGTCATCAGCTAGCATCGACTGCATGTAGTCGAGCATCATCTGACGCAGTACGTGCATAGATCGCATGACGATCGCATATCGTCAGTGCATGATCTCAGTCAGCAGCTATGTCAGTGCATGCAGTGACTGATCGTCATCAGCTAGCATCGACTGCATGTAGTCGAGCATCATCTGACGCAGTACGTGCATGATCTCAGTCAGCAGCTATGTCAGTGCATGCATAGATCGCATGACGATCGCATATCGTCAGTGCAGTGACTGATCGTCATCAGCTAGCATCGACTGCATGATCTCAGTCAGCAGC and I = TACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGC.Example sff.multiple(file=mySffOligosFile.txt, trim=F).Note: No spaces between parameter labels (i.e. file), '=' and parameters (i.e.mySffOligosFile.txt).
citation=http://www.mothur.org/wiki/Sff.multiple
description=run multiple sff files through, sffinfo, trim.flow, shhh.flows and trim.seqs combining the results
outputTypesNames=3
fasta=[filename],fasta
group=[filename],groups
name=[filename],names
Boolean=8
trim=T|F|none
allfiles=t|F|none
flip=F|T|none
keepforward=F|F|none
trim=T|F|none
allfiles=t|F|none
flip=F|T|none
keepforward=F|F|none
Multiple=2
order=A-B-I|A|F|T|none
order=A-B-I|A|F|T|none
Numbers=42
maxhomop=9|F|none
maxflows=450|F|none
minflows=450|F|none
pdiffs=0|T|none
bdiffs=0|T|none
ldiffs=0|F|none
sdiffs=0|F|none
tdiffs=0|F|none
signal=0.50|F|none
noise=0.70|F|none
cutoff=0.01|F|none
maxiter=1000|F|none
large=-1|F|none
sigma=60|F|none
mindelta=0.000001|F|none
maxambig=-1|F|none
minlength=0|F|none
maxlength=0|F|none
keepfirst=0|F|none
removelast=0|F|none
processors=1|T|none
maxhomop=9|F|none
maxflows=450|F|none
minflows=450|F|none
pdiffs=0|T|none
bdiffs=0|T|none
ldiffs=0|F|none
sdiffs=0|F|none
tdiffs=0|F|none
signal=0.50|F|none
noise=0.70|F|none
cutoff=0.01|F|none
maxiter=1000|F|none
large=-1|F|none
sigma=60|F|none
mindelta=0.000001|F|none
maxambig=-1|F|none
minlength=0|F|none
maxlength=0|F|none
keepfirst=0|F|none
removelast=0|F|none
processors=1|T|none
String=0
inputGroupNames=0
inputTypes=file-lookup
file=T|T|none|none|none|fasta-name
lookup=F|T|none|none|none|none
commandName=sffinfo
commandCategory=Sequence Processing
help=The sffinfo command reads a sff file and extracts the sequence data, or you can use it to parse a sfftxt file.The sffinfo command parameters are sff, fasta, qfile, accnos, flow, sfftxt, oligos, bdiffs, tdiffs, ldiffs, sdiffs, pdiffs and trim. sff is required. The sff parameter allows you to enter the sff file you would like to extract data from.  You may enter multiple files by separating them by -'s.The fasta parameter allows you to indicate if you would like a fasta formatted file generated.  Default=True. The qfile parameter allows you to indicate if you would like a quality file generated.  Default=True. The oligos parameter allows you to provide an oligos file to split your sff file into separate sff files by barcode. The tdiffs parameter is used to specify the total number of differences allowed in the sequence. The default is pdiffs + bdiffs + sdiffs + ldiffs.The bdiffs parameter is used to specify the number of differences allowed in the barcode. The default is 0.The pdiffs parameter is used to specify the number of differences allowed in the primer. The default is 0.The ldiffs parameter is used to specify the number of differences allowed in the linker. The default is 0.The sdiffs parameter is used to specify the number of differences allowed in the spacer. The default is 0.The flow parameter allows you to indicate if you would like a flowgram file generated.  Default=True. The sfftxt parameter allows you to indicate if you would like a sff.txt file generated.  Default=False. If you want to parse an existing sfftxt file into flow, fasta and quality file, enter the file name using the sfftxt parameter. The trim parameter allows you to indicate if you would like a sequences and quality scores trimmed to the clipQualLeft and clipQualRight values.  Default=True. The accnos parameter allows you to provide a accnos file containing the names of the sequences you would like extracted. You may enter multiple files by separating them by -'s. Example sffinfo(sff=mySffFile.sff, trim=F).Note: No spaces between parameter labels (i.e. sff), '=' and parameters (i.e.yourSffFileName).
citation=http://www.mothur.org/wiki/Sffinfo
description=extract sequences reads from a .sff file
outputTypesNames=5
fasta=[filename],fasta-[filename],[tag],fasta
flow=[filename],flow
qfile=[filename],qual-[filename],[tag],qual
sff=[filename],[group],sff
sfftxt=[filename],sff.txt
Boolean=4
flow=T|F|flow
trim=T|F|none
fasta=T|F|fasta
qfile=T|F|qfile
Multiple=0
Numbers=5
pdiffs=0|F|none
bdiffs=0|F|none
ldiffs=0|F|none
sdiffs=0|F|none
tdiffs=0|F|none
String=1
sfftxt=|F|none
inputGroupNames=0
inputTypes=accnos-oligos-sff
accnos=F|F|none|none|none|none
oligos=F|F|none|none|none|none
sff=F|T|none|none|none|none
commandName=shhh.flows
commandCategory=Sequence Processing
help=The shhh.flows command reads a file containing flowgrams and creates a file of corrected sequences.The shhh.flows command parameters are flow, file, lookup, cutoff, processors, large, maxiter, sigma, mindelta and order.The flow parameter is used to input your flow file.The file parameter is used to input the *flow.files file created by trim.flows.The lookup parameter is used specify the lookup file you would like to use. http://www.mothur.org/wiki/Lookup_files.The order parameter options are A, B or I.  Default=A. A = TACG and B = TACGTACGTACGATGTAGTCGAGCATCATCTGACGCAGTACGTGCATGATCTCAGTCAGCAGCTATGTCAGTGCATGCAGTGACTGATCGTCATCAGCTAGCATCGACTGCATAGATCGCATGACGATCGCATATCGTCAGTGCATGTAGTCGAGCATCATCTGACGCAGTACGTGCATGATCTCAGTCAGCAGCTATGTCAGTGCATGCATAGATCGCATGACGATCGCATATCGTCAGTGCAGTGACTGATCGTCATCAGCTAGCATCGACTGCATGTAGTCGAGCATCATCTGACGCAGTACGTGCATAGATCGCATGACGATCGCATATCGTCAGTGCATGATCTCAGTCAGCAGCTATGTCAGTGCATGCAGTGACTGATCGTCATCAGCTAGCATCGACTGCATGTAGTCGAGCATCATCTGACGCAGTACGTGCAGTGACTGATCGTCATCAGCTAGCATCGACTGCATAGATCGCATGACGATCGCATATCGTCAGTGCATGATCTCAGTCAGCAGCTATGTCAGTGCATGCATGTAGTCGAGCATCATCTGACGCAGTACGTGCATAGATCGCATGACGATCGCATATCGTCAGTGCAGTGACTGATCGTCATCAGCTAGCATCGACTGCATGATCTCAGTCAGCAGCTATGTCAGTGCATGCAGTGACTGATCGTCATCAGCTAGCATCGACTGCATAGATCGCATGACGATCGCATATCGTCAGTGCATGATCTCAGTCAGCAGCTATGTCAGTGCATGCATGTAGTCGAGCATCATCTGACGCAGTACGTGCATAGATCGCATGACGATCGCATATCGTCAGTGCATGATCTCAGTCAGCAGCTATGTCAGTGCATGCAGTGACTGATCGTCATCAGCTAGCATCGACTGCATGTAGTCGAGCATCATCTGACGCAGTACGTGCATGATCTCAGTCAGCAGCTATGTCAGTGCATGCATAGATCGCATGACGATCGCATATCGTCAGTGCATGTAGTCGAGCATCATCTGACGCAGTACGTGCAGTGACTGATCGTCATCAGCTAGCATCGACTGCATAGATCGCATGACGATCGCATATCGTCAGTGCATGTAGTCGAGCATCATCTGACGCAGTACGTGCATGATCTCAGTCAGCAGCTATGTCAGTGCATGCAGTGACTGATCGTCATCAGCTAGCATCGACTGCATGATCTCAGTCAGCAGCTATGTCAGTGCATGCAGTGACTGATCGTCATCAGCTAGCATCGACTGCATAGATCGCATGACGATCGCATATCGTCAGTGCATGTAGTCGAGCATCATCTGACGCAGTACGTGCATGATCTCAGTCAGCAGCTATGTCAGTGCATGCATGTAGTCGAGCATCATCTGACGCAGTACGTGCAGTGACTGATCGTCATCAGCTAGCATCGACTGCATAGATCGCATGACGATCGCATATCGTCAGTGCAGTGACTGATCGTCATCAGCTAGCATCGACTGCATGTAGTCGAGCATCATCTGACGCAGTACGTGCATAGATCGCATGACGATCGCATATCGTCAGTGCATGATCTCAGTCAGCAGCTATGTCAGTGCATGCAGTGACTGATCGTCATCAGCTAGCATCGACTGCATGTAGTCGAGCATCATCTGACGCAGTACGTGCATGATCTCAGTCAGCAGCTATGTCAGTGCATGCATAGATCGCATGACGATCGCATATCGTCAGTGCAGTGACTGATCGTCATCAGCTAGCATCGACTGCATGATCTCAGTCAGCAGC and I = TACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGC.
citation=Schloss PD, Gevers D, Westcott SL (2011).  Reducing the effects of PCR amplification and sequencing artifacts on 16S rRNA-based studies.  PLoS ONE.  6:e27310.Quince C, Lanzen A, Davenport RJ, Turnbaugh PJ (2011).  Removing noise from pyrosequenced amplicons.  BMC Bioinformatics  12:38.Quince C, Lanzén A, Curtis TP, Davenport RJ, Hall N, Head IM, Read LF, Sloan WT (2009).  Accurate determination of microbial diversity from 454 pyrosequencing data.  Nat. Methods 6:639.http://www.mothur.org/wiki/Shhh.flows
description=shhh.flows
outputTypesNames=5
counts=[filename],shhh.counts
fasta=[filename],shhh.fasta
group=[filename],shhh.groups
name=[filename],shhh.names
qfile=[filename],shhh.qual
Boolean=0
Multiple=1
order=A-B-I|A|F|T|none
Numbers=6
cutoff=0.01|F|none
processors=1|T|none
maxiter=1000|F|none
large=-1|F|none
sigma=60|F|none
mindelta=0.000001|F|none
String=0
inputGroupNames=1
fileflow=file-flow
inputTypes=file-flow-lookup
file=F|T|none|fileflow|none|fasta-name-group-counts-qfile
flow=F|T|none|fileflow|none|fasta-name-group-counts-qfile
lookup=F|T|none|none|none|none
commandName=shhh.seqs
commandCategory=Sequence Processing
help=The shhh.seqs command reads a fasta and name file and ....The shhh.seqs command parameters are fasta, name, group, sigma and processors.The fasta parameter allows you to enter the fasta file containing your sequences, and is required, unless you have a valid current fasta file. The name parameter allows you to provide a name file associated with your fasta file. It is required. The group parameter allows you to provide a group file.  When checking sequences, only sequences from the same group as the query sequence will be used as the reference. The processors parameter allows you to specify how many processors you would like to use.  The default is 1. The sigma parameter ....  The default is 0.01. The shhh.seqs command should be in the following format: shhh.seqs(fasta=yourFastaFile, name=yourNameFile) Example: shhh.seqs(fasta=AD.align, name=AD.names) Note: No spaces between parameter labels (i.e. fasta), '=' and parameters (i.e.yourFastaFile).
citation=Schloss PD, Gevers D, Westcott SL (2011).  Reducing the effects of PCR amplification and sequencing artifacts on 16S rRNA-based studies.  PLoS ONE.  6:e27310.Quince C, Lanzen A, Davenport RJ, Turnbaugh PJ (2011).  Removing noise from pyrosequenced amplicons.  BMC Bioinformatics  12:38.http://www.mothur.org/wiki/Shhh.seqs
description=shhh.seqs
outputTypesNames=3
fasta=[filename],shhh_seqs.fasta
map=[filename],shhh_seqs.map
name=[filename],shhh_seqs.names
Boolean=0
Multiple=0
Numbers=2
processors=1|T|none
sigma=0.01|F|none
String=0
inputGroupNames=0
inputTypes=fasta-group-name
fasta=T|T|none|none|none|fasta-map
group=F|F|none|none|none|none
name=T|T|none|none|none|name
commandName=sort.seqs
commandCategory=Sequence Processing
help=The sort.seqs command puts the sequences in the same order for the following file types: accnos fasta, name, group, count, taxonomy, flow or quality file.The sort.seqs command parameters are accnos, fasta, name, group, count, taxonomy, flow, qfile and large.The accnos file allows you to specify the order you want the files in.  If none is provided, mothur will use the order of the first file it reads.The large parameters is used to indicate your files are too large to fit in RAM.The sort.seqs command should be in the following format: sort.seqs(fasta=yourFasta).Example sort.seqs(fasta=amazon.fasta).Note: No spaces between parameter labels (i.e. fasta), '=' and parameters (i.e.yourFasta).
citation=http://www.mothur.org/wiki/Sort.seqs
description=puts sequences from a fasta, name, group, quality, flow or taxonomy file in the same order
outputTypesNames=7
count=[filename],sorted,[extension]
fasta=[filename],sorted,[extension]
flow=[filename],sorted,[extension]
group=[filename],sorted,[extension]
name=[filename],sorted,[extension]
qfile=[filename],sorted,[extension]
taxonomy=[filename],sorted,[extension]
Boolean=1
large=F|F|none
Multiple=0
Numbers=0
String=0
inputGroupNames=3
CountGroup=count-group
FNGLT=count-fasta-flow-group-name-qfile-taxonomy
NameCount=count-name
inputTypes=accnos-count-fasta-flow-group-name-qfile-taxonomy
accnos=F|F|none|none|none|none
count=F|F|NameCount-CountGroup|FNGLT|none|count
fasta=F|F|none|FNGLT|none|fasta
flow=F|F|none|FNGLT|none|flow
group=F|F|CountGroup|FNGLT|none|group
name=F|F|NameCount|FNGLT|none|name
qfile=F|F|none|FNGLT|none|qfile
taxonomy=F|F|none|FNGLT|none|taxonomy
commandName=sparcc
commandCategory=OTU-Based Approaches
help=The sparcc command allows you to ....The sparcc command parameters are: shared, groups, label, samplings, iterations, permutations, processors and method.The samplings parameter is used to .... Default=20.The iterations parameter is used to ....Default=10.The permutations parameter is used to ....Default=1000.The method parameter is used to ....Options are relabund and dirichlet. Default=dirichlet.The default value for groups is all the groups in your sharedfile.The label parameter is used to analyze specific labels in your shared file.The sparcc command should be in the following format: sparcc(shared=yourSharedFile)sparcc(shared=final.an.shared)
citation=Friedman J, Alm EJ (2012) Inferring Correlation Networks from Genomic Survey Data. PLoS Comput Biol 8(9): e1002687. doi:10.1371/journal.pcbi.1002687 http://www.mothur.org/wiki/Sparcc
description=Calculates correlations between OTUs using a method that is insensitive to the use of relative abundance data
outputTypesNames=3
corr=[filename],[distance],sparcc_correlation
pvalue=[filename],[distance],sparcc_pvalue
sparccrelabund=[filename],[distance],sparcc_relabund
Boolean=0
Multiple=1
method=relabund-dirichlet|dirichlet|F|F|none
Numbers=4
samplings=20|F|none
iterations=10|F|none
permutations=1000|F|none
processors=1|T|none
String=2
groups=|F|none
label=|F|none
inputGroupNames=0
inputTypes=shared
shared=T|T|none|none|none|outputType
commandName=split.abund
commandCategory=OTU-Based Approaches
help=The split.abund command reads a fasta file and a list or a names file splits the sequences into rare and abundant groups. The split.abund command parameters are fasta, list, name, count, cutoff, group, label, groups, cutoff and accnos.The fasta and a list or name or count parameter are required, and you must provide a cutoff value.The cutoff parameter is used to qualify what is abundant and rare.The group parameter allows you to parse a group file into rare and abundant groups.The label parameter is used to read specific labels in your listfile you want to use.The accnos parameter allows you to output a .rare.accnos and .abund.accnos files to use with the get.seqs and remove.seqs commands.The groups parameter allows you to parse the files into rare and abundant files by group.  For example if you set groups=A-B-C, you will get a .A.abund, .A.rare, .B.abund, .B.rare, .C.abund, .C.rare files.  If you want .abund and .rare files for all groups, set groups=all.  The split.abund command should be used in the following format: split.abund(fasta=yourFasta, list=yourListFile, group=yourGroupFile, label=yourLabels, cutoff=yourCutoff).Example: split.abund(fasta=abrecovery.fasta, list=abrecovery.fn.list, group=abrecovery.groups, label=0.03, cutoff=2).Note: No spaces between parameter labels (i.e. list), '=' and parameters (i.e.yourListfile).
citation=http://www.mothur.org/wiki/Split.abund
description=split a list, name, group or fasta file based on abundance
outputTypesNames=6
accnos=[filename],[tag],[tag2],accnos-[filename],[tag],[group],[tag2],accnos
count=[filename],[tag],[tag2],count_table-[filename],[tag],count_table
fasta=[filename],[tag],[tag2],fasta-[filename],[tag],[group],[tag2],fasta
group=[filename],[tag],[tag2],groups-[filename],[tag],[group],[tag2],groups
list=[filename],[tag],[tag2],list-[filename],[group],[tag],[tag2],list
name=[filename],[tag],names-[filename],[group],[tag],names
Boolean=1
accnos=F|F|none
Multiple=0
Numbers=1
cutoff=0|T|none
String=2
label=|F|none
groups=|F|none
inputGroupNames=3
CountGroup=count-group
FNGLT=list-name
NameCount=count-name
inputTypes=count-fasta-group-list-name
count=F|F|NameCount-CountGroup|none|none|count
fasta=T|T|none|none|none|fasta
group=F|F|CountGroup|none|none|group
list=F|T|none|FNGLT|none|list
name=F|T|NameCount|FNGLT|none|name
commandName=split.groups
commandCategory=Sequence Processing
help=The split.groups command reads a group or count file, and parses your fasta and names or count files by groups. The split.groups command parameters are fasta, name, group, count and groups.The fasta and group or count parameters are required.The groups parameter allows you to select groups to create files for.  For example if you set groups=A-B-C, you will get a .A.fasta, .A.names, .B.fasta, .B.names, .C.fasta, .C.names files.  If you want .fasta and .names files for all groups, set groups=all.  The split.groups command should be used in the following format: split.group(fasta=yourFasta, group=yourGroupFile).Example: split.groups(fasta=abrecovery.fasta, group=abrecovery.groups).Note: No spaces between parameter labels (i.e. fasta), '=' and parameters (i.e.yourFasta).
citation=http://www.mothur.org/wiki/Split.group
description=split a name or fasta file by group
outputTypesNames=3
count=[filename],[group],count_table
fasta=[filename],[group],fasta
name=[filename],[group],names
Boolean=0
Multiple=0
Numbers=0
String=1
groups=|F|none
inputGroupNames=2
CountGroup=count-group
NameCount=count-name
inputTypes=count-fasta-group-name
count=F|T|NameCount-CountGroup|CountGroup|none|count
fasta=T|T|none|none|none|fasta
group=F|T|CountGroup|CountGroup|none|group
name=F|T|NameCount|none|none|name
commandName=sub.sample
commandCategory=Sequence Processing
help=The sub.sample command is designed to be used as a way to normalize your data, or create a smaller set from your original set.The sub.sample command parameters are fasta, name, list, group, count, rabund, sabund, shared, taxonomy, groups, size, persample and label.  You must provide a fasta, list, sabund, rabund or shared file as an input file.The namefile is only used with the fasta file, not with the listfile, because the list file should contain all sequences.The groups parameter allows you to specify which of the groups in your groupfile you would like included. The group names are separated by dashes.The label parameter allows you to select what distance levels you would like, and are also separated by dashes.The size parameter allows you indicate the size of your subsample.The persample parameter allows you indicate you want to select subsample of the same size from each of your groups, default=false. It is only used with the list and fasta files if a groupfile is given.persample=false will select a random set of sequences of the size you select, but the number of seqs from each group may differ.The size parameter is not set: with shared file size=number of seqs in smallest sample, with all other files if a groupfile is given and persample=true, then size=number of seqs in smallest sample, otherwise size=10% of number of seqs.The sub.sample command should be in the following format: sub.sample(list=yourListFile, group=yourGroupFile, groups=yourGroups, label=yourLabels).Example sub.sample(list=abrecovery.fn.list, group=abrecovery.groups, groups=B-C, size=20).The default value for groups is all the groups in your groupfile, and all labels in your inputfile will be used.The sub.sample command outputs a .subsample file.Note: No spaces between parameter labels (i.e. groups), '=' and parameters (i.e.yourGroups).
citation=http://www.mothur.org/wiki/Sub.sample
description=get a sampling of sequences from a list, shared, rabund, sabund or fasta file
outputTypesNames=9
count=[filename],subsample,[extension]
fasta=[filename],subsample,[extension]
group=[filename],subsample,[extension]
list=[filename],subsample,[extension]
name=[filename],subsample,[extension]
rabund=[filename],subsample,[extension]
sabund=[filename],subsample,[extension]
shared=[filename],[distance],subsample,[extension]
taxonomy=[filename],subsample,[extension]
Boolean=1
persample=F|T|none
Multiple=0
Numbers=1
size=0|T|none
String=2
label=|F|none
groups=|F|none
inputGroupNames=3
CountGroup=count-group
FLSSR=fasta-list-rabund-sabund-shared
NameCount=count-name
inputTypes=count-fasta-group-list-name-rabund-sabund-shared-taxonomy
count=F|T|NameCount-CountGroup|none|none|count
fasta=F|T|none|FLSSR|none|fasta
group=F|T|CountGroup|none|none|group
list=F|T|none|FLSSR|none|list
name=F|T|NameCount|none|none|name
rabund=F|F|none|FLSSR|none|rabund
sabund=F|F|none|FLSSR|none|sabund
shared=F|T|none|FLSSR|none|shared
taxonomy=F|T|none|none|none|taxonomy
commandName=summary.qual
commandCategory=Sequence Processing
help=The summary.qual command reads a quality file and an optional name or count file, and summarizes the quality information.The summary.tax command parameters are qfile, name, count and processors. qfile is required, unless you have a valid current quality file.The name parameter allows you to enter a name file associated with your quality file. The count parameter allows you to enter a count file associated with your quality file. The summary.qual command should be in the following format: summary.qual(qfile=yourQualityFile) Note: No spaces between parameter labels (i.e. qfile), '=' and parameters (i.e.yourQualityFile).
citation=http://www.mothur.org/wiki/Summary.qual
description=summarize the quality of a set of sequences
outputTypesNames=1
summary=[filename],qual.summary
Boolean=0
Multiple=0
Numbers=1
processors=1|T|none
String=0
inputGroupNames=1
namecount=count-name
inputTypes=count-name-qfile
count=F|T|namecount|none|none|none
name=F|T|namecount|none|none|none
qfile=T|T|none|none|none|summary
commandName=summary.seqs
commandCategory=Sequence Processing
help=The summary.seqs command reads a fastafile and summarizes the sequences.The summary.seqs command parameters are fasta, name, count and processors, fasta is required, unless you have a valid current fasta file.The name parameter allows you to enter a name file associated with your fasta file. The count parameter allows you to enter a count file associated with your fasta file. The summary.seqs command should be in the following format: summary.seqs(fasta=yourFastaFile, processors=2) Note: No spaces between parameter labels (i.e. fasta), '=' and parameters (i.e.yourFastaFile).
citation=http://www.mothur.org/wiki/Summary.seqs
description=summarize the quality of sequences in an unaligned or aligned fasta file
outputTypesNames=1
summary=[filename],summary
Boolean=0
Multiple=0
Numbers=1
processors=1|T|none
String=0
inputGroupNames=1
namecount=count-name
inputTypes=count-fasta-name
count=F|T|namecount|none|none|none
fasta=T|T|none|none|none|summary
name=F|T|namecount|none|none|none
commandName=summary.shared
commandCategory=OTU-Based Approaches
help=The summary.shared command parameters are shared, label, calc, distance, processors, subsample, iters and all.  shared is required if there is no current sharedfile.The summary.shared command should be in the following format: summary.shared(label=yourLabel, calc=yourEstimators, groups=yourGroups).Example summary.shared(label=unique-.01-.03, groups=B-C, calc=sharedchao-sharedace-jabund-sorensonabund-jclass-sorclass-jest-sorest-thetayc-thetan).The available estimators for calc are anderberg, braycurtis, canberra, default, gower, hamming, hellinger, jabund, jclass, jest, kstest, kulczynski, kulczynskicody, lennon, manhattan, memchi2, memchord, memeuclidean, mempearson, morisitahorn, ochiai, odum, sharedace, sharedchao, sharednseqs, sharedsobs, soergel, sorabund, sorclass, sorest, spearman, speciesprofile, structchi2, structchord, structeuclidean, structkulczynski, structpearson, thetan, thetayc, whittaker,The iters parameter allows you to choose the number of times you would like to run the subsample.The subsample parameter allows you to enter the size pergroup of the sample or you can set subsample=T and mothur will use the size of your smallest group.The output parameter allows you to specify format of your distance matrix. Options are lt, and square. The default is lt.The default value for calc is sharedsobs-sharedchao-sharedace-jabund-sorensonabund-jclass-sorclass-jest-sorest-thetayc-thetanThe default value for groups is all the groups in your groupfile.The distance parameter allows you to indicate you would like a distance file created for each calculator for each label, default=f.The label parameter is used to analyze specific labels in your input.The all parameter is used to specify if you want the estimate of all your groups together.  This estimate can only be made for sharedsobs and sharedchao calculators. The default is false.If you use sharedchao and run into memory issues, set all to false. The groups parameter allows you to specify which of the groups in your groupfile you would like analyzed.  You must enter at least 2 valid groups.Note: No spaces between parameter labels (i.e. label), '=' and parameters (i.e.yourLabel).
citation=http://www.mothur.org/wiki/Summary.shared
description=generate a summary file containing calculator values for each line in the OTU data and for all possible comparisons between groups
outputTypesNames=2
phylip=[filename],[calc],[distance],[outputtag],[tag2],dist
summary=[filename],summary-[filename],[tag],summary
Boolean=2
distance=F|F|phylip
all=F|F|none
Multiple=2
calc=sharedchao-sharedsobs-sharedace-jabund-sorabund-jclass-sorclass-jest-sorest-thetayc-thetan-kstest-whittaker-sharednseqs-ochiai-anderberg-kulczynski-kulczynskicody-lennon-morisitahorn-braycurtis-odum-canberra-structeuclidean-structchord-hellinger-manhattan-structpearson-soergel-spearman-structkulczynski-speciesprofile-structchi2-hamming-gower-memchi2-memchord-memeuclidean-mempearson|sharedsobs-sharedchao-sharedace-jabund-sorabund-jclass-sorclass-jest-sorest-thetayc-thetan|T|T|none
output=lt-square|lt|F|F|none
Numbers=2
iters=1000|F|none
processors=1|T|none
String=3
label=|F|none
subsample=|F|phylip
groups=|F|none
inputGroupNames=0
inputTypes=shared
shared=T|T|none|none|none|summary
commandName=summary.single
commandCategory=OTU-Based Approaches
help=The summary.single command parameters are list, sabund, rabund, shared, subsample, iters, label, calc, abund and groupmode.  list, sabund, rabund or shared is required unless you have a valid current file.The summary.single command should be in the following format: summary.single(label=yourLabel, calc=yourEstimators).Example summary.single(label=unique-.01-.03, calc=sobs-chao-ace-jack-bootstrap-shannon-npshannon-simpson).The available estimators for calc are ace, bergerparker, boneh, bootstrap, bstick, chao, coverage, default, efron, geometric, goodscoverage, heip, invsimpson, jack, logseries, npshannon, nseqs, qstat, shannon, shannoneven, shen, simpson, simpsoneven, smithwilson, sobs, solow,The subsample parameter allows you to enter the size of the sample or you can set subsample=T and mothur will use the size of your smallest group in the case of a shared file. With a list, sabund or rabund file you must provide a subsample size.The iters parameter allows you to choose the number of times you would like to run the subsample.The default value calc is sobs-chao-ace-jack-shannon-npshannon-simpsonIf you are running summary.single with a shared file and would like your summary results collated in one file, set groupmode=t. (Default=true).The label parameter is used to analyze specific labels in your input.Note: No spaces between parameter labels (i.e. label), '=' and parameters (i.e.yourLabels).
citation=http://www.mothur.org/wiki/Summary.single
description=generate summary file that has the calculator value for each line in the OTU data
outputTypesNames=1
summary=[filename],summary-[filename],[tag],summary
Boolean=1
groupmode=T|F|none
Multiple=1
calc=sobs-chao-nseqs-coverage-ace-jack-shannon-shannoneven-npshannon-heip-smithwilson-simpson-simpsoneven-invsimpson-bootstrap-geometric-qstat-logseries-bergerparker-bstick-goodscoverage-efron-boneh-solow-shen|sobs-chao-ace-jack-shannon-npshannon-simpson|T|T|none
Numbers=3
iters=1000|F|none
abund=10|F|none
size=0|F|none
String=2
subsample=|F|none
label=|F|none
inputGroupNames=1
LRSS=list-rabund-sabund-shared
inputTypes=list-rabund-sabund-shared
list=F|T|LRSS|LRSS|none|summary
rabund=F|F|LRSS|LRSS|none|summary
sabund=F|F|LRSS|LRSS|none|summary
shared=F|T|LRSS|LRSS|none|summary
commandName=summary.tax
commandCategory=Phylotype Analysis
help=The summary.tax command reads a taxonomy file and an optional name file, and summarizes the taxonomy information.The summary.tax command parameters are taxonomy, count, group and name. taxonomy is required, unless you have a valid current taxonomy file.The name parameter allows you to enter a name file associated with your taxonomy file. The group parameter allows you add a group file so you can have the summary totals broken up by group.The count parameter allows you add a count file so you can have the summary totals broken up by group.The reftaxonomy parameter allows you give the name of the reference taxonomy file used when you classified your sequences. It is not required, but providing it will keep the rankIDs in the summary file static.The summary.tax command should be in the following format: summary.tax(taxonomy=yourTaxonomyFile) Note: No spaces between parameter labels (i.e. taxonomy), '=' and parameters (i.e.yourTaxonomyFile).
citation=http://www.mothur.org/wiki/Summary.tax
description=summarize the taxonomies of a set of sequences
outputTypesNames=1
summary=[filename],tax.summary
Boolean=0
Multiple=0
Numbers=0
String=0
inputGroupNames=2
CountGroup=count-group
NameCount=count-name
inputTypes=count-group-name-reftaxonomy-taxonomy
count=F|T|NameCount-CountGroup|none|none|none
group=F|T|CountGroup|none|none|none
name=F|T|NameCount|none|none|none
reftaxonomy=F|F|none|none|none|none
taxonomy=T|T|none|none|none|summary
commandName=system
commandCategory=General
help=The system command allows you to execute a system command from within mothur.The system has no parameters.The system command should be in the following format: system(yourCommand).Example system(clear).
citation=http://www.mothur.org/wiki/System
description=execute system commands from within mothur
outputTypesNames=0
Boolean=0
Multiple=0
Numbers=0
String=1
command=|F|none
inputGroupNames=0
inputTypes=
commandName=tree.shared
commandCategory=OTU-Based Approaches
help=The tree.shared command creates a .tre to represent the similiarity between groups or sequences.The tree.shared command parameters are shared, groups, calc, phylip, column, name, cutoff, precision, processors, subsample, iters and label.The groups parameter allows you to specify which of the groups in your groupfile you would like included used.The group names are separated by dashes. The label allow you to select what distance levels you would like trees created for, and are also separated by dashes.The phylip or column parameter are required if you do not provide a sharedfile, and only one may be used.  If you use a column file the name filename is required. If you do not provide a cutoff value 10.00 is assumed. If you do not provide a precision value then 100 is assumed.The tree.shared command should be in the following format: tree.shared(groups=yourGroups, calc=yourCalcs, label=yourLabels).The iters parameter allows you to choose the number of times you would like to run the subsample.The subsample parameter allows you to enter the size pergroup of the sample or you can set subsample=T and mothur will use the size of your smallest group. The subsample parameter may only be used with a shared file.Example tree.shared(groups=A-B-C, calc=jabund-sorabund).The default value for groups is all the groups in your groupfile.The default value for calc is jclass-thetayc.The tree.shared command outputs a .tre file for each calculator you specify at each distance you choose.The available estimators for calc are anderberg, braycurtis, canberra, gower, hamming, hellinger, jabund, jclass, jest, kstest, kulczynski, kulczynskicody, lennon, manhattan, memchi2, memchord, memeuclidean, mempearson, morisitahorn, ochiai, odum, sharedace, sharedchao, sharednseqs, sharedsobs, soergel, sorabund, sorclass, sorest, spearman, speciesprofile, structchi2, structchord, structeuclidean, structkulczynski, structpearson, thetan, thetayc, whittaker,Or the tree.shared command can be in the following format: tree.shared(phylip=yourPhylipFile).Example tree.shared(phylip=abrecovery.dist).Note: No spaces between parameter labels (i.e. groups), '=' and parameters (i.e.yourGroups).
citation=http://www.mothur.org/wiki/Tree.shared
description=generate a tree file that describes the dissimilarity among groups
outputTypesNames=1
tree=[filename],[calc],[distance],[tag],tre-[filename],tre
Boolean=0
Multiple=1
calc=sharedsobs-sharedchao-sharedace-jabund-sorabund-jclass-sorclass-jest-sorest-thetayc-thetan-kstest-sharednseqs-ochiai-anderberg-kulczynski-kulczynskicody-lennon-morisitahorn-braycurtis-whittaker-odum-canberra-structeuclidean-structchord-hellinger-manhattan-structpearson-soergel-spearman-structkulczynski-speciesprofile-hamming-structchi2-gower-memchi2-memchord-memeuclidean-mempearson|jclass-thetayc|T|T|none
Numbers=4
iters=1000|F|none
cutoff=10|F|none
precision=100|F|none
processors=1|T|none
String=3
subsample=|F|none
label=|F|none
groups=|F|none
inputGroupNames=4
ColumnName=column-name
NameCount=count-name
PhylipColumnShared=column-phylip-shared
countcolumn=column-count
inputTypes=column-count-name-phylip-shared
column=F|F|PhylipColumnShared|PhylipColumnShared|ColumnName-countcolumn|tree
count=F|F|NameCount|none|countcolumn|none
name=F|F|NameCount|none|ColumnName|none
phylip=F|F|PhylipColumnShared|PhylipColumnShared|none|tree
shared=F|T|PhylipColumnShared|PhylipColumnShared|none|tree
commandName=trim.flows
commandCategory=Sequence Processing
help=The trim.flows command reads a flowgram file and creates .....The order parameter options are A, B or I.  Default=A. A = TACG and B = TACGTACGTACGATGTAGTCGAGCATCATCTGACGCAGTACGTGCATGATCTCAGTCAGCAGCTATGTCAGTGCATGCAGTGACTGATCGTCATCAGCTAGCATCGACTGCATAGATCGCATGACGATCGCATATCGTCAGTGCATGTAGTCGAGCATCATCTGACGCAGTACGTGCATGATCTCAGTCAGCAGCTATGTCAGTGCATGCATAGATCGCATGACGATCGCATATCGTCAGTGCAGTGACTGATCGTCATCAGCTAGCATCGACTGCATGTAGTCGAGCATCATCTGACGCAGTACGTGCATAGATCGCATGACGATCGCATATCGTCAGTGCATGATCTCAGTCAGCAGCTATGTCAGTGCATGCAGTGACTGATCGTCATCAGCTAGCATCGACTGCATGTAGTCGAGCATCATCTGACGCAGTACGTGCAGTGACTGATCGTCATCAGCTAGCATCGACTGCATAGATCGCATGACGATCGCATATCGTCAGTGCATGATCTCAGTCAGCAGCTATGTCAGTGCATGCATGTAGTCGAGCATCATCTGACGCAGTACGTGCATAGATCGCATGACGATCGCATATCGTCAGTGCAGTGACTGATCGTCATCAGCTAGCATCGACTGCATGATCTCAGTCAGCAGCTATGTCAGTGCATGCAGTGACTGATCGTCATCAGCTAGCATCGACTGCATAGATCGCATGACGATCGCATATCGTCAGTGCATGATCTCAGTCAGCAGCTATGTCAGTGCATGCATGTAGTCGAGCATCATCTGACGCAGTACGTGCATAGATCGCATGACGATCGCATATCGTCAGTGCATGATCTCAGTCAGCAGCTATGTCAGTGCATGCAGTGACTGATCGTCATCAGCTAGCATCGACTGCATGTAGTCGAGCATCATCTGACGCAGTACGTGCATGATCTCAGTCAGCAGCTATGTCAGTGCATGCATAGATCGCATGACGATCGCATATCGTCAGTGCATGTAGTCGAGCATCATCTGACGCAGTACGTGCAGTGACTGATCGTCATCAGCTAGCATCGACTGCATAGATCGCATGACGATCGCATATCGTCAGTGCATGTAGTCGAGCATCATCTGACGCAGTACGTGCATGATCTCAGTCAGCAGCTATGTCAGTGCATGCAGTGACTGATCGTCATCAGCTAGCATCGACTGCATGATCTCAGTCAGCAGCTATGTCAGTGCATGCAGTGACTGATCGTCATCAGCTAGCATCGACTGCATAGATCGCATGACGATCGCATATCGTCAGTGCATGTAGTCGAGCATCATCTGACGCAGTACGTGCATGATCTCAGTCAGCAGCTATGTCAGTGCATGCATGTAGTCGAGCATCATCTGACGCAGTACGTGCAGTGACTGATCGTCATCAGCTAGCATCGACTGCATAGATCGCATGACGATCGCATATCGTCAGTGCAGTGACTGATCGTCATCAGCTAGCATCGACTGCATGTAGTCGAGCATCATCTGACGCAGTACGTGCATAGATCGCATGACGATCGCATATCGTCAGTGCATGATCTCAGTCAGCAGCTATGTCAGTGCATGCAGTGACTGATCGTCATCAGCTAGCATCGACTGCATGTAGTCGAGCATCATCTGACGCAGTACGTGCATGATCTCAGTCAGCAGCTATGTCAGTGCATGCATAGATCGCATGACGATCGCATATCGTCAGTGCAGTGACTGATCGTCATCAGCTAGCATCGACTGCATGATCTCAGTCAGCAGC and I = TACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGC.Note: No spaces between parameter labels (i.e. fasta), '=' and parameters (i.e.yourFasta).For more details please check out the wiki http://www.mothur.org/wiki/Trim.flows.
citation=http://www.mothur.org/wiki/Trim.flows
description=trim.flows
outputTypesNames=3
fasta=[filename],flow.fasta
file=[filename],flow.files
flow=[filename],[tag],flow
Boolean=2
allfiles=t|F|none
fasta=F|F|none
Multiple=1
order=A-B-I|A|F|T|none
Numbers=11
maxhomop=9|F|none
maxflows=450|F|none
minflows=450|F|none
pdiffs=0|T|none
bdiffs=0|T|none
ldiffs=0|F|none
sdiffs=0|F|none
tdiffs=0|F|none
processors=1|T|none
signal=0.50|F|none
noise=0.70|F|none
String=0
inputGroupNames=0
inputTypes=flow-oligos
flow=T|T|none|none|none|flow-file
oligos=F|T|none|none|none|none
commandName=trim.seqs
commandCategory=Sequence Processing
help=The trim.seqs command reads a fastaFile and creates 2 new fasta files, .trim.fasta and scrap.fasta, as well as group files if you provide and oligos file.The .trim.fasta contains sequences that meet your requirements, and the .scrap.fasta contains those which don't.The trim.seqs command parameters are fasta, name, count, flip, checkorient, oligos, maxambig, maxhomop, minlength, maxlength, qfile, qthreshold, qaverage, diffs, qtrim, keepfirst, removelast and allfiles.The fasta parameter is required.The flip parameter will output the reverse compliment of your trimmed sequence. The default is false.The checkorient parameter will check the reverse compliment of the sequence if the barcodes and primers cannot be found in the forward. The default is false.The oligos parameter allows you to provide an oligos file.The name parameter allows you to provide a names file with your fasta file.The count parameter allows you to provide a count file with your fasta file.The maxambig parameter allows you to set the maximum number of ambigious bases allowed. The default is -1.The maxhomop parameter allows you to set a maximum homopolymer length. The minlength parameter allows you to set and minimum sequence length. The maxlength parameter allows you to set and maximum sequence length. The tdiffs parameter is used to specify the total number of differences allowed in the sequence. The default is pdiffs + bdiffs + sdiffs + ldiffs.The bdiffs parameter is used to specify the number of differences allowed in the barcode. The default is 0.The pdiffs parameter is used to specify the number of differences allowed in the primer. The default is 0.The ldiffs parameter is used to specify the number of differences allowed in the linker. The default is 0.The sdiffs parameter is used to specify the number of differences allowed in the spacer. The default is 0.The qfile parameter allows you to provide a quality file.The qthreshold parameter allows you to set a minimum quality score allowed. The qaverage parameter allows you to set a minimum average quality score allowed. The qwindowsize parameter allows you to set a number of bases in a window. Default=50.The qwindowaverage parameter allows you to set a minimum average quality score allowed over a window. The rollaverage parameter allows you to set a minimum rolling average quality score allowed over a window. The qstepsize parameter allows you to set a number of bases to move the window over. Default=1.The allfiles parameter will create separate group and fasta file for each grouping. The default is F.The keepforward parameter allows you to indicate whether you want the forward primer removed or not. The default is F, meaning remove the forward primer.The qtrim parameter will trim sequence from the point that they fall below the qthreshold and put it in the .trim file if set to true. The default is T.The keepfirst parameter trims the sequence to the first keepfirst number of bases after the barcode or primers are removed, before the sequence is checked to see if it meets the other requirements. The removelast removes the last removelast number of bases after the barcode or primers are removed, before the sequence is checked to see if it meets the other requirements.The trim.seqs command should be in the following format: trim.seqs(fasta=yourFastaFile, flip=yourFlip, oligos=yourOligos, maxambig=yourMaxambig,  maxhomop=yourMaxhomop, minlength=youMinlength, maxlength=yourMaxlength)  Example trim.seqs(fasta=abrecovery.fasta, flip=..., oligos=..., maxambig=..., maxhomop=..., minlength=..., maxlength=...).Note: No spaces between parameter labels (i.e. fasta), '=' and parameters (i.e.yourFasta).For more details please check out the wiki http://www.mothur.org/wiki/Trim.seqs .
citation=http://www.mothur.org/wiki/Trim.seqs
description=provides the preprocessing features needed to screen and sort pyrosequences
outputTypesNames=5
count=[filename],[tag],count_table-[filename],count_table
fasta=[filename],[tag],fasta
group=[filename],groups
name=[filename],[tag],names
qfile=[filename],[tag],qual
Boolean=5
flip=F|T|none
checkorient=F|T|none
allfiles=F|F|none
keepforward=F|F|none
qtrim=T|F|none
Multiple=0
Numbers=18
maxambig=-1|F|none
maxhomop=0|F|none
minlength=1|F|none
maxlength=0|F|none
pdiffs=0|T|none
bdiffs=0|T|none
ldiffs=0|F|none
sdiffs=0|F|none
tdiffs=0|F|none
processors=1|T|none
qthreshold=0|F|none
qaverage=0|F|none
rollaverage=0|F|none
qwindowaverage=0|F|none
qstepsize=1|F|none
qwindowsize=50|F|none
keepfirst=0|F|none
removelast=0|F|none
String=0
inputGroupNames=1
namecount=count-name
inputTypes=count-fasta-name-oligos-qfile
count=F|T|namecount|none|none|count
fasta=T|T|none|none|none|fasta
name=F|T|namecount|none|none|name
oligos=F|T|none|none|none|group
qfile=F|T|none|none|none|qfile
commandName=unifrac.unweighted
commandCategory=Hypothesis Testing
help=The unifrac.unweighted command parameters are tree, group, name, count, groups, iters, distance, processors, root and random.  tree parameter is required unless you have valid current tree file.The groups parameter allows you to specify which of the groups in your groupfile you would like analyzed.  You must enter at least 1 valid group.The group names are separated by dashes.  The iters parameter allows you to specify how many random trees you would like compared to your tree.The distance parameter allows you to create a distance file from the results. The default is false. You may set distance to lt, square or column.The random parameter allows you to shut off the comparison to random trees. The default is false, meaning compare don't your trees with randomly generated trees.The root parameter allows you to include the entire root in your calculations. The default is false, meaning stop at the root for this comparision instead of the root of the entire tree.The processors parameter allows you to specify the number of processors to use. The default is 1.The unifrac.unweighted command should be in the following format: unifrac.unweighted(groups=yourGroups, iters=yourIters).The subsample parameter allows you to enter the size pergroup of the sample or you can set subsample=T and mothur will use the size of your smallest group. The subsample parameter may only be used with a group file.The consensus parameter allows you to indicate you would like trees built from distance matrices created with the results of the subsampling, as well as a consensus tree built from these trees. Default=F.Example unifrac.unweighted(groups=A-B-C, iters=500).The default value for groups is all the groups in your groupfile, and iters is 1000.The unifrac.unweighted command output two files: .unweighted and .uwsummary their descriptions are in the manual.Note: No spaces between parameter labels (i.e. groups), '=' and parameters (i.e.yourGroups).
citation=Lozupone C, Knight R (2005). UniFrac: a new phylogenetic method for comparing microbial communities. Appl Environ Microbiol 71: 8228-35. http://www.mothur.org/wiki/Unifrac.unweighted
description=generic tests that describes whether two or more communities have the same structure
outputTypesNames=5
column=[filename],[tag],[tag2],dist
phylip=[filename],[tag],[tag2],dist
tree=[filename],[tag],[tag2],tre
unweighted=[filename],unweighted-[filename],[tag],unweighted
uwsummary=[filename],uwsummary
Boolean=3
random=F|F|none
consensus=F|F|tree
root=|F|none
Multiple=1
distance=column-lt-square-phylip|column|F|F|phylip-column
Numbers=2
iters=1000|F|none
processors=1|T|none
String=2
groups=|F|none
subsample=|F|none
inputGroupNames=2
CountGroup=count-group
NameCount=count-name
inputTypes=count-group-name-tree
count=F|T|NameCount-CountGroup|none|none|none
group=F|T|CountGroup|none|none|none
name=F|T|NameCount|none|none|none
tree=T|T|none|none|none|unweighted-uwsummary
commandName=unifrac.weighted
commandCategory=Hypothesis Testing
help=The unifrac.weighted command parameters are tree, group, name, count, groups, iters, distance, processors, root, subsample, consensus and random.  tree parameter is required unless you have valid current tree file.The groups parameter allows you to specify which of the groups in your groupfile you would like analyzed.  You must enter at least 2 valid groups.The group names are separated by dashes.  The iters parameter allows you to specify how many random trees you would like compared to your tree.The distance parameter allows you to create a distance file from the results. The default is false.The random parameter allows you to shut off the comparison to random trees. The default is false, meaning don't compare your trees with randomly generated trees.The root parameter allows you to include the entire root in your calculations. The default is false, meaning stop at the root for this comparision instead of the root of the entire tree.The processors parameter allows you to specify the number of processors to use. The default is 1.The subsample parameter allows you to enter the size pergroup of the sample or you can set subsample=T and mothur will use the size of your smallest group. The subsample parameter may only be used with a group file.The consensus parameter allows you to indicate you would like trees built from distance matrices created with the results, as well as a consensus tree built from these trees. Default=F.The unifrac.weighted command should be in the following format: unifrac.weighted(groups=yourGroups, iters=yourIters).Example unifrac.weighted(groups=A-B-C, iters=500).The default value for groups is all the groups in your groupfile, and iters is 1000.The unifrac.weighted command output two files: .weighted and .wsummary their descriptions are in the manual.Note: No spaces between parameter labels (i.e. groups), '=' and parameters (i.e.yourGroups).
citation=Lozupone CA, Hamady M, Kelley ST, Knight R (2007). Quantitative and qualitative beta diversity measures lead to different insights into factors that structure microbial communities. Appl Environ Microbiol 73: 1576-85. http://www.mothur.org/wiki/Unifrac.weighted
description=generic tests that describes whether two or more communities have the same structure
outputTypesNames=5
column=[filename],[tag],[tag2],dist
phylip=[filename],[tag],[tag2],dist
tree=[filename],[tag],[tag2],tre
weighted=[filename],weighted-[filename],[tag],weighted
wsummary=[filename],wsummary
Boolean=3
consensus=F|F|tree
random=F|F|none
root=|F|none
Multiple=1
distance=column-lt-square-phylip|column|F|F|phylip-column
Numbers=2
iters=1000|F|none
processors=1|T|none
String=2
groups=|F|none
subsample=|F|none
inputGroupNames=2
CountGroup=count-group
NameCount=count-name
inputTypes=count-group-name-tree
count=F|T|NameCount-CountGroup|none|none|none
group=F|T|CountGroup|none|none|none
name=F|T|NameCount|none|none|none
tree=T|T|none|none|none|weighted-wsummary
commandName=unique.seqs
commandCategory=Sequence Processing
help=The unique.seqs command reads a fastafile and creates a name or count file.It creates a file where the first column is the groupname and the second column is a list of sequence names who have the same sequence. If the sequence is unique the second column will just contain its name. The unique.seqs command parameters are fasta and name.  fasta is required, unless there is a valid current fasta file.The unique.seqs command should be in the following format: unique.seqs(fasta=yourFastaFile) 
citation=http://www.mothur.org/wiki/Unique.seqs
description=creates a fasta containing the unique sequences as well as a namesfile with the names each sequence represents
outputTypesNames=3
count=[filename],count_table-[filename],[tag],count_table
fasta=[filename],unique,[extension]
name=[filename],names-[filename],[tag],names
Boolean=0
Multiple=0
Numbers=0
String=0
inputGroupNames=1
namecount=count-name
inputTypes=count-fasta-name
count=F|T|namecount|none|none|count
fasta=T|T|none|none|none|fasta-name
name=F|T|namecount|none|none|name
commandName=venn
commandCategory=OTU-Based Approaches
help=The venn command parameters are list, shared, groups, calc, abund, nseqs, permute, sharedotus, fontsize and label.   shared, relabund, list, rabund or sabund is required unless you have a valid current file.The groups parameter allows you to specify which of the groups in your groupfile you would like included in your venn diagram, you may only use a maximum of 4 groups.The group names are separated by dashes. The label allows you to select what distance levels you would like a venn diagram created for, and are also separated by dashes.The fontsize parameter allows you to adjust the font size of the picture created, default=24.The venn command should be in the following format: venn(groups=yourGroups, calc=yourCalcs, label=yourLabels, abund=yourAbund).Example venn(groups=A-B-C, calc=sharedsobs-sharedchao, abund=20).The default value for groups is all the groups in your groupfile up to 4, and all labels in your inputfile will be used.The default value for calc is sobs if you have only read a list file or if you have selected only one group, and sharedsobs if you have multiple groups.The default available estimators for calc are sobs, chao and ace if you have only read a list file, and sharedsobs, sharedchao and sharedace if you have read a shared file.The nseqs parameter will output the number of sequences represented by the otus in the picture, default=F.If you have more than 4 groups, the permute parameter will find all possible combos of 4 of your groups and create pictures for them, default=F.The only estimators available four 4 groups are sharedsobs and sharedchao.The sharedotus parameter can be used with the sharedsobs calculator to get the names of the OTUs in each section of the venn diagram. Default=t.The venn command outputs a .svg file for each calculator you specify at each distance you choose.Note: No spaces between parameter labels (i.e. groups), '=' and parameters (i.e.yourGroups).
citation=http://www.mothur.org/wiki/Venn
description=generates a Venn diagram from data provided in a shared file
outputTypesNames=1
svg=[filename],svg
Boolean=3
nseqs=F|F|none
sharedotus=t|F|none
permute=F|F|none
Multiple=0
Numbers=2
abund=10|F|none
fontsize=24|F|none
String=3
groups=|F|none
label=|F|none
calc=|F|none
inputGroupNames=1
LRSS=list-shared
inputTypes=list-shared
list=F|T|LRSS|LRSS|none|svg
shared=F|T|LRSS|LRSS|none|svg
